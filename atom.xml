<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>anran758 - 前端实验台</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://anran758.github.io/blog/"/>
  <updated>2019-07-29T10:40:05.594Z</updated>
  <id>https://anran758.github.io/blog/</id>
  
  <author>
    <name>Anron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始配置Mac前端开发环境</title>
    <link href="https://anran758.github.io/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/"/>
    <id>https://anran758.github.io/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/</id>
    <published>2019-07-26T01:55:10.000Z</published>
    <updated>2019-07-29T10:40:05.594Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="https://pilotmoon.com/scrollreverser/" target="_blank" rel="noopener">鼠标和触摸板设置不同的方向</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://pilotmoon.com/scrollreverser/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;鼠标和触摸板设置不同的方向&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ant design pro 使用 no-mock 造成 POST 请求被重定向为 GET 请求</title>
    <link href="https://anran758.github.io/blog/2019/07/16/ant-design-redirect-change-method/"/>
    <id>https://anran758.github.io/blog/2019/07/16/ant-design-redirect-change-method/</id>
    <published>2019-07-16T13:37:01.000Z</published>
    <updated>2019-08-04T08:36:59.260Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行<code>npm run start:no-mock</code>后，发现预期发出<code>POST</code>请求变成了<code>GET</code>请求，状态码是<code>301</code>永久重定向。而在使用<code>mock</code>数据中不会出现这种问题。</p><a id="more"></a><p>因此使用断点调试，经过一番尝试，逐步检查函数的调用及传参问题，最后也将此问题排除掉了。</p><p>随后想到问题是不是出现在类库身上，接口是基于<code>dva/fetch</code>进行封装的，而<code>dva/fetch</code>又是基于浏览器原生(<code>native code</code>)的<code>fetch</code>进行封装. 使用断点并没有进入<code>fetch</code>内部。</p><p>为了缩小范围，将发出请求的参数和方法从<code>Network</code>中拷贝下来，使用<code>fetch</code>直接调用，发现只要不经过<code>umi</code>类处理就不会出现这种现象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过 dva/fetch</span></div><div class="line"><span class="comment">// request('/api/login', &#123; method: 'POST', body: &#123;username, password&#125; &#125;)</span></div><div class="line"></div><div class="line"><span class="comment">// 直接调用原生 fetch</span></div><div class="line">request(<span class="string">'https://zzz.xxx.com/api/login'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: &#123;username, password&#125; &#125;)</div></pre></td></tr></table></figure><p>随后在<code>network</code>上我注意到，通过<code>umi</code>处理后的请求<code>URL</code>有点奇怪:</p><p>虽然我没有研究过<code>umi</code>的具体实现细节，但可以推测出<code>umi</code>是通过<code>config</code>拿到<code>proxy.target</code>作为<code>base url</code>. 但项目中<code>target</code>使用的协议是<code>http</code>协议，在实际的<code>network</code>中被转换为了<code>https</code>.</p><p>难不成就是这个在作祟？抱着尝试的态度将<code>target</code>上的协议转为<code>https</code>, 发现就能正常的发出<code>POST</code>请求了。。</p><p>但这样就会很迷茫，真的是<code>umi</code>干的吗？由于该项目基础架构另一个团队上接手上来的，有了很多复杂的因素干扰，<code>method</code>在哪一步进行了转换呢? 然后为了解惑做了一些简单的排查:</p><p>从网络原理来考虑，这种情况应该是在客户端发生的，为了排除服务端重定向的嫌疑，使用了抓包查看了没有经过浏览器格式的报文信息，确定了是客户端的问题。接着去看了部分源码也没有看到相关的逻辑。</p><p>最后近期业务量还挺重的，因此在此文记录一下，后序会继续关注一下这个问题，了解到原因再回来补充。</p><p>由于项目是运行在内网中，因此没有升级<code>umi</code>最新版本(内网可能没有最新的版本的镜像), 也有可能在最新版已经修复但没有继续尝试了。如果有遇到相同问题的同学可以了解一下这个情况。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"umi"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="attr">"umi-plugin-react"</span>: <span class="string">"^1.0.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行&lt;code&gt;npm run start:no-mock&lt;/code&gt;后，发现预期发出&lt;code&gt;POST&lt;/code&gt;请求变成了&lt;code&gt;GET&lt;/code&gt;请求，状态码是&lt;code&gt;301&lt;/code&gt;永久重定向。而在使用&lt;code&gt;mock&lt;/code&gt;数据中不会出现这种问题。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="https://anran758.github.io/blog/categories/react/"/>
    
    
      <category term="ant design pro" scheme="https://anran758.github.io/blog/tags/ant-design-pro/"/>
    
      <category term="react" scheme="https://anran758.github.io/blog/tags/react/"/>
    
      <category term="HTTP" scheme="https://anran758.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>operating-system</title>
    <link href="https://anran758.github.io/blog/2019/07/10/operating-system/"/>
    <id>https://anran758.github.io/blog/2019/07/10/operating-system/</id>
    <published>2019-07-10T15:20:13.000Z</published>
    <updated>2019-07-16T16:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>什么是多道程序设计?</p><p>多处理器调度算法设计:</p><ul><li>不仅要决定选择在哪一个进程上执行, 还需要决定在哪一个CUP上执行</li><li>要考虑进程在多个CPU之间迁移时的开销<ul><li>高速缓存失效、TLB失效</li><li>尽可能使进程总是在同一个CPU上执行(尽量避免高速缓存失效/TLB失效的问题)</li></ul></li><li>考虑负载均衡,使多CPU都处于忙碌的状态</li></ul><p>重点概念:</p><ul><li>调度时机</li><li>进程切换</li><li>抢占/非抢占</li><li>时间片</li><li>优先级反转</li><li>饥饿</li><li>优先级与优先数</li><li>优先级提升</li><li>先来先服务</li><li>短作业优先</li><li>多级队列反馈</li><li>吞吐量</li><li>周转事件</li><li>响应时间</li></ul><h2 id="进程同步与互斥"><a href="#进程同步与互斥" class="headerlink" title="进程同步与互斥"></a>进程同步与互斥</h2><p>进程的并发执行</p><p>并发是所有问题产生的基础, 并发也是操作系统设计的基础</p><p>竞争条件就是两个或多个进程读写某些共享数据, 而最后的结果取决于进程运行的精确时序. 由于各进程要求使用</p><p>进程互斥的方案:</p><ul><li>软件方案: Dekker解法, Peterson解法</li><li>硬件方案: 屏蔽中断, TSL(XCHG)指令</li></ul><p>屏蔽中断:</p><p>“开关中断”指令</p><ul><li>简单高效</li><li>代价高,限制CPU并发能力(临界区大小)</li><li>不适用于多处理器</li><li><p>适用于操作系统本身,不适用于用户进程</p></li><li><p>软件方法</p><ul><li>编程技巧</li></ul></li><li>硬件方法</li><li>忙等待(busy waiting)</li><li>自旋锁</li><li>优先级反转</li></ul><p>进程同步: 指系统中多个进程中发生的事件存在某种时序关系,需要相互合作,共同完成一项任务.</p><p>具体的说, 一个进程运行到某一点时, 要求另一伙伴进程为它提供消息,在未获取消息之前,该进程进入阻塞态,获得消息后被唤醒进入就绪态</p><p>生产者/消费者问题</p><p>要解决的问题:</p><ul><li>当缓存区已满时,生产者不会继续向其中添加数据</li><li>当缓存区为空时,消费者不会从中移走数据</li></ul><p>避免忙等待<br>睡眠与唤醒操作(原语)</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ul><li>信号量是一种特殊的变量</li><li>用语进程间传递信息的一个整数值</li><li><p>定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struc semaphore</div><div class="line">&#123;</div><div class="line">    init count;</div><div class="line">    queueType <span class="built_in">queue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>信号量声明: <code>semaphore s</code></p></li><li><p>信号量可以实施的操作: 初始化、P和V</p></li><li><p>P、V操作为原语操作</p></li><li>在信号量上定义了三个操作： 初始化（非负数）、P操作、V操作</li></ul><p>解决互斥问题的基本步骤</p><ul><li>分析并发进程的关键活动(共享变量的代码段)，划定临界区</li><li>(针对多个进程)设置一个信号量<code>mutex</code>(互斥量), 初始值为1</li><li>在临界区前实施P(mutex)</li><li>在临界区之后实施V(mutex)</li></ul><p>每执行一次P操作，意味着请求进程分配到一个资源，每执行一次V操作，意味着进程释放了一个资源。<br>当<code>mutex &lt;= 0</code>时</p><p>重点概念：</p><ul><li>竞争条件</li><li>与时间有关的错误</li><li>忙等待</li><li>临界资源</li><li>临界区</li><li>进程互斥</li><li>进程同步</li><li>信号量</li><li>p、v操作</li><li>锁</li><li>自旋锁</li><li>生产者消费者问题</li><li>读者写者问题</li></ul><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p>为什么出现管程</p><ul><li>信号量机制的不足： 程序编写困难、易出错</li></ul><p>解决方案：在程序设计语言中引入管程成分<br>一种高级同步机制</p><p>管程要解决两个问题</p><ul><li>互斥<ul><li>管程是互斥进入，这是为了保证管程中数据结构的数据完整性、管程的互斥性是由编辑器负责保证的</li></ul></li><li>同步<ul><li>管程中设置<strong>条件变量及等待唤醒操作</strong>以解决同步问题</li></ul></li></ul><p>可以把管程想象为一个厕所，厕所一次只能进一个人，其他人需要在门口等待（入口等待队列）。先进去厕所的R君准备上厕所后想洗手，然后发现没水啦（时机不成熟）！！然后没办法，只能在厕所里等（在某个条件变量上执行 wait 操作， 进入厕所内部的紧急队列），然后让下一个人来用厕所。<br>然后正好排在后面的Q君是一个水工，他也想上厕所，上完厕所后他发现没水是水龙头有问题，然后修了它，修好了他告诉R君说可以用水了(signal 操作唤醒), 然后Q君离开了厕所。</p><p>爱干净的R君肯定是要先洗了手才让后面的人继续用呀</p><p>条件变量是在管程内部说明和使用的一种特殊类型的变量</p><p>管程：</p><ul><li>抽象数据类型</li><li>有一个明确定义的操作集合，只有通过这个集合的操作才能操作该数据类型的实例</li></ul><p>实现管程结构必须保证下面几点：</p><ul><li>只有能过管程的某个过程才能访问资源；</li><li>管程是互斥的，某个时刻只能有一个进程或线程调用管程中的进程</li></ul><p>条件变量：为提供进程与其他进程通信或同步而引入<br>操作方法有： <code>wait/signal</code>、<code>wait/notify</code>或<code>wait/broadcast</code></p><p>基本通信方式</p><ul><li>消息传递</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;什么是多道程序设计?&lt;/p&gt;&lt;p&gt;多处理器调度算法设计:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不仅要决定选择在哪一个进程上执行, 还需要决定在哪一个CUP上执行&lt;/li&gt;&lt;li&gt;要考虑进程在多个CPU之间迁移时的开销&lt;ul&gt;&lt;li&gt;高速缓存失效、TLB失
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-vs-vue</title>
    <link href="https://anran758.github.io/blog/2019/06/05/react-vs-vue/"/>
    <id>https://anran758.github.io/blog/2019/06/05/react-vs-vue/</id>
    <published>2019-06-05T03:10:56.000Z</published>
    <updated>2019-07-16T16:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>在项目架构时, React 相比 vue 会更灵活一些，在遇到非常复杂的业务时倾向于使用 React, 它的技术方案会更多一点选择, vue 则提供了更丰富的 API 实现功能会更简单，但相对来说缺少一定的灵活性，存在一定的限制。</p><p>React 组件需要以大写字母开头的标签才能正常解析</p><p>JSX 一个组件内需要包裹一个元素，可以使用<code>Fragment</code>占位符</p><p>react 是响应式框架，只需要关心数据<br>react 绑定事件名是驼峰式</p><p>react 不允许直接修改 state 的数据，因为会对性能有影响</p><p>在组件内使用 constructor 接受参数</p><p>react 是单向数据流，是视图层框架，只解决视图和数据渲染方面<br>便于自动化测试</p><p>当组件的 state 或者 props 发生改变时，render 函数就会重新执行。</p><p>新的虚拟 DOM 减少了真实 DOM 的创建，较少了性能损耗</p><p>虚拟 DOM 优点：</p><ol><li>性能提升了</li><li>使得跨端应用得以实现（React Native）</li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>componentWillMount 在组件即将被挂载到页面的时刻自动执行，只会在第一次会执行<br>render 页面被渲染时<br>componentDidMount 在组件被挂载到页面后自动执行，只会在第一次会执行</p><p>shouleComponentUpdate 组件被更新之前，它会自动被执行</p><p>除了 render 函数，其他函数都有内置，不写也不会报错</p><p>shouldComponentUpdate 仅作为性能优化存在</p><p>constructor() 用以定义数据</p><p>shouldComponentUpdate(nextProps, nextState) 可以对比组件的数据判断是否渲染数据</p><p>componentDidMount 只执行一次，会发起 ajax 请求，render 上发起 ajax 会造成死循环</p><p>componentWillMount 是会被遗留的，不建议使用它</p><p>charles -&gt; tools - mapLocal</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux 的使用步骤是：</p><ol><li>安装依赖</li><li>在<code>src/store/index.js</code>下创建<code>store</code></li><li>创建<code>src/store/reducer.js</code>, 创建一个纯函数<code>(state = defaultState, action) =&gt; {return state;}</code>，返回一个默认 state</li><li>在组件的<code>constructor</code>中调用<code>this.state = store.getState();</code>, 初始化页面的<code>state</code></li><li><p>当组件中需要修改数据时，调用<code>store.dispatch</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> action = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'change_input_value'</span>,</div><div class="line">  <span class="attr">value</span>: e.target.value</div><div class="line">&#125;;</div><div class="line"></div><div class="line">store.dispatch(action);</div></pre></td></tr></table></figure></li><li><p>在<code>reducer</code>中处理相应的<code>action.type</code>, 在再返回新的<code>state</code></p></li><li>页面中订阅<code>store</code>, 使用一个函数来处理订阅事件<code>store.subscribe(this.handleStoreChange);</code>.</li><li><p>更新组件的<code>state</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handleStoreChange() &#123;</div><div class="line">  <span class="keyword">this</span>.setState(store.getState());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>设置 actionTypes, 可以在拼写错误的时候，迅速定位问题。</p><p>容器组件和 UI 组件, 如果 UI 组件里面只有 render 函数的话，甚至可以做成无状态组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UI 组件，相比无状态组件，性能消耗更高</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListUI</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 无状态组件</span></div><div class="line"><span class="keyword">const</span> TodoListUI = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;在项目架构时, React 相比 vue 会更灵活一些，在遇到非常复杂的业务时倾向于使用 React, 它的技术方案会更多一点选择, vue 则提供了更丰富的 API 实现功能会更简单，但相对来说缺少一定的灵活性，存在一定的限制。&lt;/p&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在本地测试微信登录</title>
    <link href="https://anran758.github.io/blog/2019/05/18/wechat-pc-login/"/>
    <id>https://anran758.github.io/blog/2019/05/18/wechat-pc-login/</id>
    <published>2019-05-18T09:23:12.000Z</published>
    <updated>2019-05-18T15:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做微信登录的时候，希望能在本地能够测试登录。这里使用的是<strong>微信开放平台</strong>的<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&amp;lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录</a>, 与<strong>微信公众平台</strong>不同，<strong>微信开放平台</strong>并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。</p><a id="more"></a><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>首先在页面引入微信的<code>js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>然后在登录页上实例化登录对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- login.vuw --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"login_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// other code ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="comment">// other code ...</span></div><div class="line"></div><div class="line">    mounted() &#123;</div><div class="line">        APIs.login(&#123;</div><div class="line">            <span class="attr">redirect_uri</span>: Base64.encode(<span class="string">'http://apitest.anran758.com'</span>)</div><div class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">                <span class="comment">/* eslint-disable no-new */</span></div><div class="line">                <span class="keyword">new</span> WxLogin(&#123;</div><div class="line">                    <span class="attr">id</span>: <span class="string">'login_container'</span>,</div><div class="line">                    <span class="comment">// appid: "",</span></div><div class="line">                    <span class="comment">// scope: "",</span></div><div class="line">                    <span class="comment">// redirect_uri: "",</span></div><div class="line">                    <span class="comment">// state: "",</span></div><div class="line">                    <span class="comment">// style: "",</span></div><div class="line">                    <span class="comment">// href: ""</span></div><div class="line">                    ...res.data</div><div class="line">                &#125;);</div><div class="line">            &#125;)</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p><code>WxLogin</code>接收一个对象，对象属性如下所示。其中对象里的<code>appid</code>, <code>scope</code>，<code>redirect_uri</code>, <code>state</code>四个属性是由后端控制返回的。</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>self_redirect</td><td>否</td><td>true：手机点击确认登录后可以在 iframe 内跳转到 redirect_uri，false：手机点击确认登录后可以在 top window 跳转到 redirect_uri。默认为 false。</td></tr><tr><td>id</td><td>是</td><td>第三方页面显示二维码的容器id</td></tr><tr><td>appid</td><td>是</td><td>应用唯一标识，在微信开放平台提交应用审核通过后获得</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即可</td></tr><tr><td>redirect_uri</td><td>是</td><td>重定向地址，需要进行UrlEncode</td></tr><tr><td>state</td><td>否</td><td>用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</td></tr><tr><td>style</td><td>否</td><td>提供”black”、”white”可选，默认为黑色文字描述。详见文档底部FAQ</td></tr><tr><td>href</td><td>否</td><td>自定义样式链接，第三方可根据实际需求覆盖默认样式。详见文档底部FAQ</td></tr></tbody></table><p>该方法会生成一个二维码，并挂载到指定的容器 ID 上。用户扫描二维码时，页面会向微信服务端发送一个请求等待用户确认，用户确认完成后，就会将页面重定向至指定的路径（redirect_uri）。</p><p>那么现在问题就来了：重定向的地址要跟<strong>微信开放平台</strong>里设置的重定向的域名一致，就是说我们在本地开发起的<code>localhost:8080</code>这种是不行的。<br>这时我们就会想到了去修改<code>hosts</code>，但光改<code>hosts</code>是不行，还需要改端口。。这时就可以用到<code>shistle</code>了。</p><h2 id="shistle"><a href="#shistle" class="headerlink" title="shistle"></a>shistle</h2><p><a href="https://github.com/avwo/whistle" target="_blank" rel="noopener">whistle</a>是基于Node实现的跨平台web调试代理工具，主要用于查看、修改HTTP、HTTPS、Websocket的请求、响应，也可以作为HTTP代理服务器使用。我们可以使用它来进行转发：</p><img src="/blog/2019/05/18/wechat-pc-login/whistle.png"><p>通过 npm 来安装 whistle:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全局安装 whistle</span></div><div class="line">npm install -g whistle</div><div class="line"></div><div class="line"><span class="comment"># 启动 whistle</span></div><div class="line">w2 start</div><div class="line"></div><div class="line"><span class="comment"># 指定端口号来启动 whistle</span></div><div class="line">w2 start -p 9000</div></pre></td></tr></table></figure><p>安装完毕后命令行提示我们可以进入 whistle 的控制台(默认启动的 URL 是 127.0.0.1:8899)，但此时还不能直接抓包，还需要配置代理才可以使用.</p><p>配置代理可以使用全局代理或浏览器代理，比较推荐的做法是使用后者。我个人习惯使用<code>chrome</code>浏览器，因此可以安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">SwitchyOmega</a> 代理插件，将 shistle 的配置信息填入，保存配置后记得切换插件的模式噢。</p><img src="/blog/2019/05/18/wechat-pc-login/setting-proxy.png"> <img src="/blog/2019/05/18/wechat-pc-login/open-plugin.png"><p>想要拦截<code>HTPPS</code>的请求的话，还需要<a href="http://wproxy.org/whistle/webui/https.html" target="_blank" rel="noopener">安装根证书</a>,</p><img src="/blog/2019/05/18/wechat-pc-login/https.gif"><p>接着进入 whistle 的控制台, 点进<a href="http://127.0.0.1:8899/#rules" target="_blank" rel="noopener">rules</a>, 配置需要代理或转发的地址。这个配置规则类似于设置 hosts.</p><img src="/blog/2019/05/18/wechat-pc-login/rules.png"><p>设置好 rules 后，将本地开发的的网址<code>http://localhost:8020/#/login</code>替换为<code>http://test.anran758:8020/#/login</code>再进行测试登录，登录完毕后就能拿到用户数据了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/avwo/whistle/blob/master/README-zh_CN.md" target="_blank" rel="noopener">whistle</a></li><li><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&amp;lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录开发指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做微信登录的时候，希望能在本地能够测试登录。这里使用的是&lt;strong&gt;微信开放平台&lt;/strong&gt;的&lt;a href=&quot;https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;amp;id=open1419316505&amp;amp;token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&amp;amp;lang=zh_CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网站应用微信登录&lt;/a&gt;, 与&lt;strong&gt;微信公众平台&lt;/strong&gt;不同，&lt;strong&gt;微信开放平台&lt;/strong&gt;并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="微信开发" scheme="https://anran758.github.io/blog/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信开发" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="微信登录" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    
      <category term="shistle" scheme="https://anran758.github.io/blog/tags/shistle/"/>
    
      <category term="网站应用" scheme="https://anran758.github.io/blog/tags/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>【UI组件】来做一个可配置的滑块进度条吧</title>
    <link href="https://anran758.github.io/blog/2019/05/03/minp-customize-slider/"/>
    <id>https://anran758.github.io/blog/2019/05/03/minp-customize-slider/</id>
    <published>2019-05-03T12:51:37.000Z</published>
    <updated>2019-05-04T09:08:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..</p><a id="more"></a><p>emmm，一看这样的设计需求就意味着小程序原生的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html" target="_blank" rel="noopener">slider</a>组件就不能用了。因为这玩意在样式上就不能自由的配置，只好来手动实现一个。</p><hr><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><img src="/blog/2019/05/03/minp-customize-slider/slider-bar.png" title="slider-bar"><p>行吧，那说干就干。首先滑动条可以从俯视图角度来看，分为三层。分别是<code>底部滑轨区域</code>，<code>进度条区域</code>以及供用户操作的<code>滑块</code>本身。</p><p>在结构设计中，可以将<code>底部滑轨区域</code>，<code>进度条区域</code>分为一块，这样<code>进度条区域</code>可以根据随着滑动条的高度变化而变化, 宽度则由<code>js</code>控制。除此之外还需要暴露一些参数给外部，让它自己定义长粗宽。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 组件的属性列表</div><div class="line">     */</div><div class="line">    properties: &#123;</div><div class="line">        <span class="comment">// 滑块大小</span></div><div class="line">        blockSize: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">value</span>: <span class="number">32</span>,</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 滑块宽度</span></div><div class="line">        blockBorderWidth: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">value</span>: <span class="number">3</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 滑轨高度</span></div><div class="line">        height: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">value</span>: <span class="number">2</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 滑轨进度</span></div><div class="line">        step: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">value</span>: <span class="number">0</span>,</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 进度值小数位</span></div><div class="line">        digits: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">            <span class="attr">value</span>: <span class="number">0</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"slider-wrap"</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"silder-block"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.slider-wrap</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.silder-bg</span>,</div><div class="line"><span class="selector-class">.silder-bg-inner</span>,</div><div class="line"><span class="selector-class">.silder-block</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.silder-bg</span>,</div><div class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">2</span>rpx;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.silder-bg</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">8</span>rpx;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#66a6ff</span>;</div><div class="line">    <span class="comment">/* border-radius: 8rpx; */</span></div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">8</span>rpx;</div><div class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">8</span>rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.silder-block</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">32</span>rpx;</div><div class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</div><div class="line">    <span class="attribute">border</span>: solid <span class="number">3</span>rpx <span class="number">#66a6ff</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="点击行为事件"><a href="#点击行为事件" class="headerlink" title="点击行为事件"></a>点击行为事件</h2><blockquote><p>滑块进度条的<code>滑块</code>是一个听话的小朋友，就是说我们叫它去哪它就听话的过去。所以就不要抓它去煲汤了~</p></blockquote><p>在组件外部容器中绑定一个点击事件，我们必须得要知道用户点击位置，在<code>bind:tap</code>事件中取到<code>clientX</code>属性。除此之外还需要取到进度条的位置信息。</p><p>得到两个关键数据后，将用户点击的位置<code>ClintX</code>与进度条组件的偏移量<code>offset</code>相减，得出相对于组件内的进度<code>progress</code>.<br>再用组件的宽度<code>width</code>减去<code>progress</code>乘于<code>100</code>得到目前进度的百分比<code>percentage</code>。<br>同时为了防止进度条超出进度条</p><p>如下图所示：<code>((191 - 36) / 301) * 100 ≈ 52</code></p><img src="/blog/2019/05/03/minp-customize-slider/offset.png" title="关系示意图"><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ...other --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 组件的初始数据</div><div class="line">     */</div><div class="line">    data: &#123;</div><div class="line">        <span class="attr">containerInfo</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">percentage</span>: <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    ready() &#123;</div><div class="line">        <span class="comment">// 取到滑块进度条的位置信息</span></div><div class="line">        wx.createSelectorQuery().in(<span class="keyword">this</span>)</div><div class="line">            .select(<span class="string">'.slider-wrap'</span>)</div><div class="line">            .boundingClientRect(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!rect) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.data.container = rect;</div><div class="line">                <span class="keyword">this</span>._initBloackPos();</div><div class="line">            &#125;).exec()</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 点击进度条</span></div><div class="line">    tappingSlider(evt) &#123;</div><div class="line">        <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</div><div class="line">        <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</div><div class="line">        <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</div><div class="line"></div><div class="line">        <span class="comment">// 需要做边界处理</span></div><div class="line">        <span class="keyword">const</span> perc = <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, <span class="number">100</span>);</div><div class="line">        <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.setData(&#123; percentage &#125;);</div><div class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</div><div class="line">              <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span></div><div class="line">          &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计算相对容器的偏移距离</div><div class="line">     *</div><div class="line">     * @param &#123; Number &#125; x - X 坐标</div><div class="line">     * @param &#123; Number &#125; offset - 偏移量</div><div class="line">     * @param &#123; Number &#125; maxVal - 在 maxVal 范围内求百分比</div><div class="line">     */</div><div class="line">    _computeOffset(x, offset, maxVal) &#123;</div><div class="line">        <span class="keyword">const</span> &#123; width &#125; = <span class="keyword">this</span>.data.containerInfo;</div><div class="line"></div><div class="line">        <span class="comment">// 底层保证一定精度</span></div><div class="line">        <span class="keyword">return</span> (((x - offset) / width) * maxVal).toFixed(<span class="number">4</span>) * <span class="number">1</span>;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 边界处理</div><div class="line">     * @param &#123; Number &#125; num - 待处理的最值</div><div class="line">     * @param &#123; Number &#125; maxNum - num 最大值</div><div class="line">     * @param &#123; Number &#125; minNum - num 最小值</div><div class="line">     */</div><div class="line">    _boundaryHandler(num, maxNum = <span class="number">100</span>, minNum = <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> num &gt; maxNum ? maxNum : (num &lt; minNum ? minNum : num);</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"silder-block"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;percentage&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><hr><p>虽然实现了点击滑动到指定位置的功能，但仔细一看还是有一些瑕疵的~ 当我们点击到百分百时，<code>滑块</code>超出原先设定的容器宽度。</p><p>超出的原因是因为在布局上，我们使用绝对定位<code>absolute</code>，通过设置滑块<code>left</code>属性来控制滑块位置的。<br>偏移量中还包含了滑块自身的宽度，因此还需要对滑块的偏移量做一定的处理，去掉自身宽度再获取百分比。</p><p>在文章开头我们已经暴露了一个<code>blockSize</code>的属性，利用该属性可以计算滑块的最大偏移量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="comment">// other data...</span></div><div class="line"></div><div class="line">        _blockOffset: <span class="number">0</span>,</div><div class="line">        <span class="attr">_maxDistance</span>: <span class="number">100</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="comment">// 点击进度条</span></div><div class="line">        tappingSlider(evt) &#123;</div><div class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</div><div class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</div><div class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</div><div class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 滑块偏移度</span></div><div class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</div><div class="line">                computeOffset(_maxDistance), _maxDistance</div><div class="line">            );</div><div class="line"></div><div class="line">            <span class="comment">// 实际百分比</span></div><div class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</div><div class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- other code --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"silder-block"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><p>如此，该事件就完成啦~</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>完成点击事件后，我们还得让它能进行自由的滑动。进度条组件的拖动的流程大致是：<code>点击滑块</code> -&gt; <code>拖动滑块</code> -&gt; <code>释放滑块</code>这三个步骤。</p><p>因此跟H5的思路一样，我们只需监听<code>touchmove</code>、<code>touchstatr</code>、<code>touchend</code>三个事件。</p><p>首先先监听<code>touchmove</code>，用户点击滑块后，记录当前的<code>clientX</code>属性, 随后还需要记录当前<code>进度</code>和滑块的<code>偏移量</code>；<br><code>touchmove</code>事件则由外层容器相关联，并更新滑动的距离。由于<code>touchmove</code>里针对<code>拖动事件</code>逻辑不能被随便触发，因此需要加一个标识的锁；<br>在<code>touchend</code>事件触发后释放锁即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        onTouchStart(evt) &#123;</div><div class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 记录原始坐标</span></div><div class="line">            <span class="keyword">this</span>.data.originPos = <span class="keyword">this</span>.data._blockOffset;</div><div class="line">            <span class="keyword">this</span>.data.originPercentage = <span class="keyword">this</span>.data.percentage;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.data._startTouchX = evt.changedTouches[<span class="number">0</span>].clientX;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 滑块移动</span></div><div class="line">        onTouchMove(evt) &#123;</div><div class="line">            <span class="keyword">const</span> &#123; moving, containerInfo &#125; = <span class="keyword">this</span>.data;</div><div class="line">            <span class="keyword">if</span> (!moving || !containerInfo) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</div><div class="line">            <span class="keyword">const</span> &#123;</div><div class="line">                digits,</div><div class="line">                originPos,</div><div class="line">                originPercentage,</div><div class="line">                _startTouchX,</div><div class="line">                _maxDistance</div><div class="line">            &#125; = <span class="keyword">this</span>.data;</div><div class="line"></div><div class="line">            <span class="comment">// 计算偏移量</span></div><div class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, _startTouchX, maxVal);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 实际百分比</span></div><div class="line">            <span class="keyword">const</span> perc = originPercentage + computeOffset(<span class="number">100</span>);</div><div class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</div><div class="line"></div><div class="line">            <span class="comment">// 滑块偏移度</span></div><div class="line">            <span class="keyword">const</span> offset = originPos + computeOffset(_maxDistance);</div><div class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(offset, _maxDistance);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.setData(&#123; percentage, _blockOffset &#125;);</div><div class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</div><div class="line">                <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span></div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        onTouchEnd(evt) &#123;</div><div class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">false</span>;</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"silder-block"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></div><div class="line">        <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></div><div class="line">        <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>滑块进度条</code>组件的实现~ 实际上该组件还有更多可供配置的地方，如颜色值，背景控制等这些比较基础的东西就不继续展开讲啦~<br>本文是以小程序进行示例。但思路是共通的，也可以使用同样思路在<code>H5</code>实现，只不过是 API 的差异罢了~</p><p><a href="https://developers.weixin.qq.com/s/Oc79f7mv7K8N" target="_blank" rel="noopener">微信代码片段</a>, 可以直接拿来就用。</p><hr><p>2019/05/04 更新：</p><p>后面又重新看了一遍，发现该组件还是有可优化的空间：</p><p>操作不必局限于滑块上，可以将<code>bindtap</code>事件废弃，其余的所有事件都代理到最外部的节点中。<code>touchstar</code>的同时就渲染位置信息，还允许它自由的滑动:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span></span></div><div class="line">    <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></div><div class="line">    <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span></div><div class="line">    <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></div><div class="line">&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"silder-block"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Component(&#123;</div><div class="line">    <span class="comment">// other options ...</span></div><div class="line"></div><div class="line">    methods: &#123;</div><div class="line">        <span class="comment">// other method ...</span></div><div class="line">        onTouchStart(evt) &#123;</div><div class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</div><div class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</div><div class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</div><div class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 滑块偏移度</span></div><div class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</div><div class="line">                computeOffset(_maxDistance), _maxDistance</div><div class="line">            );</div><div class="line"></div><div class="line">            <span class="comment">// 实际百分比</span></div><div class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</div><div class="line"></div><div class="line">            <span class="comment">// 记录原始坐标</span></div><div class="line">            <span class="keyword">this</span>.data.originPos = _blockOffset;</div><div class="line">            <span class="keyword">this</span>.data.originPercentage = percentage;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.data._startTouchX = clientX;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</div><div class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><a href="https://developers.weixin.qq.com/s/XpaZV7mn7t8L" target="_blank" rel="noopener">微信代码片段 v0.0.2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..&lt;/p&gt;
    
    </summary>
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="UI组件" scheme="https://anran758.github.io/blog/tags/UI%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>H5微信支付所遇到的若干问题</title>
    <link href="https://anran758.github.io/blog/2019/02/23/h5-cookie-lost/"/>
    <id>https://anran758.github.io/blog/2019/02/23/h5-cookie-lost/</id>
    <published>2019-02-23T11:35:35.000Z</published>
    <updated>2019-04-26T07:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。</p><a id="more"></a><h2 id="cookie-丢失的问题"><a href="#cookie-丢失的问题" class="headerlink" title="cookie 丢失的问题"></a>cookie 丢失的问题</h2><p>在H5页面中，一开始我们是需要拿到微信用户的信息。因此需要调用获取用户的接口。<br>在第一次调用该接口时，需要有一个授权的过程。没有拿到用户信息的话，就需要调取授权让用户确认。</p><p>然后问题就来了~授权完成后，会发现后端是拿不到<code>cookie</code>信息。经过查询资料后发现原来还是跨域在作祟~<br>虽然我们解决了基本的跨域问题，即域名(origin)的不同。但是默认情况下跨域请求不会发送<code>cookie</code>.</p><p>这时前端需要设置<code>XHR</code>的<code>withCredentials: true</code>, 后端也需要配合设置<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials" target="_blank" rel="noopener">Access-Control-Allow-Credentials</a>即可。</p><p>以 <code>axios</code> 为例, <code>withCredentials: true</code> 与 <code>data</code> 平级:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> opt = &#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'/user'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'get'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'jojo'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">axios(opt).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</div></pre></td></tr></table></figure><p>这种情况一般是前后端项目不在同一个域名的情况下，且需要带凭证的场景需要设置<code>Credentials</code>。</p><h2 id="url未注册-url-not-registered"><a href="#url未注册-url-not-registered" class="headerlink" title="url未注册(url not registered)"></a>url未注册(url not registered)</h2><p>随后微信弹了一下<code>url not registered</code>的错误，检查支付目录已经正确的被配置。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="noopener">微信内H5调起支付</a></li><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3" target="_blank" rel="noopener">jsapi 开发流程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。&lt;/p&gt;
    
    </summary>
    
      <category term="h5" scheme="https://anran758.github.io/blog/categories/h5/"/>
    
    
      <category term="cookie" scheme="https://anran758.github.io/blog/tags/cookie/"/>
    
      <category term="h5" scheme="https://anran758.github.io/blog/tags/h5/"/>
    
      <category term="微信" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信支付" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>在微信小程序中保存网络图片</title>
    <link href="https://anran758.github.io/blog/2019/02/11/miniprograms-download-image/"/>
    <id>https://anran758.github.io/blog/2019/02/11/miniprograms-download-image/</id>
    <published>2019-02-11T13:55:37.000Z</published>
    <updated>2019-08-04T16:35:10.768Z</updated>
    
    <content type="html"><![CDATA[<p>在小程序的文档中我们得知，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html" target="_blank" rel="noopener">wx.saveImageToPhotosAlbum</a> 是用来保存图片到相册的。</p><p>但是仔细一看会发现这个接口的<code>filePath</code>参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。</p><a id="more"></a><p>因此先需要把该文件下载至本地，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.downloadFile.html?search-key=downloadFile" target="_blank" rel="noopener">wx.downloadFile</a> 。</p><p>但值得注意的是<strong>小程序只可以跟指定的域名与进行网络通信</strong>，也就是说下载图片之前，我们需要先去<strong>微信公众者平台</strong>的开发设置里设置<code>uploadFile合法域名</code>。</p><p>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">const</span> app = getApp()</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 保存图片</span></div><div class="line">  saveImage() &#123;</div><div class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</div><div class="line">        <span class="attr">url</span>: <span class="keyword">this</span>.data.url</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</div><div class="line">        <span class="attr">filePath</span>: res.tempFilePath</div><div class="line">      &#125;))</div><div class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'保存成功~'</span>,<span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</div><div class="line">      &#125;)</div><div class="line">      .catch(err) =&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line"></div><div class="line">        <span class="comment">// 如果是用户自己取消的话保存图片的话</span></div><div class="line">        <span class="comment">// if (~err.errMsg.indexOf('cancel')) return;</span></div><div class="line">      &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 将 callback 转为易读的 promise</div><div class="line">   * @returns [promise]</div><div class="line">   */</div><div class="line">  wxToPromise(method, opt) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      wx[method](&#123;</div><div class="line">        ...opt,</div><div class="line">        success(res) &#123;</div><div class="line">          opt.success &amp;&amp; opt.success();</div><div class="line">          resolve(res)</div><div class="line">        &#125;,</div><div class="line">        fail(err) &#123;</div><div class="line">          opt.fail &amp;&amp; opt.fail();</div><div class="line">          reject(err)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>然后理论上就可以保存图片了… 用户第一次在我们的小程序使用保存图片这个功能是会弹出一个授权弹框，如果用户手滑点了拒绝授权后再点一次保存图片，然后就会发现什么反应都没有了。。。</p><p>出现这样的原因是因为这个授权弹框只会出现一次，所以我们得想办法再让用户重新授权一次。这时就想到使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.authorize.html" target="_blank" rel="noopener">wx.authorize</a> .</p><p>但是经过测试后发现，使用 <code>wx.authorize</code> 后，会报 <code>authorize:fail auth deny</code> 的错误。然后经过查阅资料得知：</p><blockquote><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景。</li></ul></blockquote><p>emmm… 那这样效果当然不符合我们预期，只能在换一种方式。这时就想到了使用<code>&lt;button open-type=&quot;openSetting&quot;/&gt;</code>，在交互上做一个提示弹框，引导用户重新授权：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 简陋版提示 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;showDialog&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"dialog-wrap"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog"</span>&gt;</span></div><div class="line">    这是一段提示用户授权的提示语</div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"btn"</span></div><div class="line">        <span class="attr">open-type</span>=<span class="string">"openSetting"</span></div><div class="line">        <span class="attr">bindtap</span>=<span class="string">"confirm"</span> &gt;</div><div class="line">         授权</div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">bindtap</span>=<span class="string">"cancel"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> app = getApp()</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span>,</div><div class="line">    <span class="attr">showDialog</span>: <span class="literal">false</span>,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  saveImage() &#123;</div><div class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</div><div class="line">        <span class="attr">url</span>: <span class="keyword">this</span>.data.url</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</div><div class="line">        <span class="attr">filePath</span>: res.tempFilePath</div><div class="line">      &#125;))</div><div class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(res);</div><div class="line">        <span class="comment">// this.hide();</span></div><div class="line">        wx.showToast(&#123;</div><div class="line">          <span class="attr">title</span>: <span class="string">'保存成功~'</span>,</div><div class="line">          <span class="attr">icon</span>: <span class="string">'none'</span>,</div><div class="line">        &#125;);</div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function">(<span class="params">&#123; errMsg &#125;</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(errMsg)</div><div class="line">        <span class="comment">// if (~errMsg.indexOf('cancel')) return;</span></div><div class="line">        <span class="keyword">if</span> (!~errMsg.indexOf(<span class="string">'auth'</span>)) &#123;</div><div class="line">          wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'图片保存失败，稍后再试'</span>, <span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 调用授权提示弹框</span></div><div class="line">          <span class="keyword">this</span>.setData(&#123;</div><div class="line">            <span class="attr">showDialog</span>: <span class="literal">true</span></div><div class="line">          &#125;)</div><div class="line">        &#125;;</div><div class="line">      &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// callback to promise</span></div><div class="line">  wxToPromise(method, opt) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      wx[method](&#123;</div><div class="line">        ...opt,</div><div class="line">        success(res) &#123;</div><div class="line">          opt.success &amp;&amp; opt.success();</div><div class="line">          resolve(res)</div><div class="line">        &#125;,</div><div class="line">        fail(err) &#123;</div><div class="line">          opt.fail &amp;&amp; opt.fail();</div><div class="line">          reject(err)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  confirm() &#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="attr">showDialog</span>:<span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  cancel() &#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="attr">showDialog</span>: <span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最后这样就完成啦~</p><hr><p><a href="https://developers.weixin.qq.com/s/SoOhi6mX7D6Y" target="_blank" rel="noopener">微信代码片段点这里</a>, 该功能需要添加<code>appid</code>才能进行正常的测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在小程序的文档中我们得知，&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wx.saveImageToPhotosAlbum&lt;/a&gt; 是用来保存图片到相册的。&lt;/p&gt;&lt;p&gt;但是仔细一看会发现这个接口的&lt;code&gt;filePath&lt;/code&gt;参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序开发笔记 - 小程序项目的结构设计</title>
    <link href="https://anran758.github.io/blog/2018/11/23/miniprogrmas-build-frame/"/>
    <id>https://anran758.github.io/blog/2018/11/23/miniprogrmas-build-frame/</id>
    <published>2018-11-23T07:15:48.000Z</published>
    <updated>2018-12-16T13:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/11/23/miniprogrmas-build-frame/banner.png"><p>在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~</p><a id="more"></a><h2 id="简要认识小程序开发"><a href="#简要认识小程序开发" class="headerlink" title="简要认识小程序开发"></a>简要认识小程序开发</h2><p>其中小程序的构成是由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四种类型构成(下文将简称为四类文件)。其开发方式跟传统网页开发是十分类似的。</p><ul><li><code>.wxml</code>模板文件对应为传统网页开发的<code>.html</code>文件，是一个页面(组件)的骨架。只不过它里面采用的语法跟传统的<code>HTML</code>语法有些差异, 比如标签的名称是微信自己在底层封装的组件。</li><li><code>.wxss</code>样式文件则对应<code>CSS</code>样式文件，具有大部分<code>CSS</code>的特性(比如<code>css3</code>的某些伪类特性就没有，但常见的<code>css3</code>属性倒是可以用)，除此之外还在此基础上做了新的扩展。</li><li><code>js</code>一直都是作为跟页面交互角色，在小程序开发中也不例外。<br>在<code>js</code>中，可以使用微信提供的<code>API</code>。如常见的<code>Page</code>(构造器)和<code>Component</code>，还有微信给出的一些特定权限的API.</li><li><code>json</code>则是配置文件，一般是页面或者组件内那一级的配置文件。</li></ul><p>(这里有个小细节可以区分<code>wxml</code>和<code>wxss</code>区别，这两者都是以<code>wx(微信)</code>为开头，后面的小尾巴是区别是样式文件还是模板文件)。</p><p>具体的更多细节可以去看<a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html" target="_blank" rel="noopener">官网文档</a>。本文的重心还是在讨论项目结构如何安排会比较整洁合理。</p><h2 id="项目结构设计思路"><a href="#项目结构设计思路" class="headerlink" title="项目结构设计思路"></a>项目结构设计思路</h2><p>每个小程序项目的根目录会有一个<code>project.config.json</code>的项目配置文件，可以设置<code>miniprogramRoot</code>属性指定小程序源码的目录, 默认为根目录(<code>/</code>)。意思是说把源代码放在<code>/src/</code>下的目录也没有问题，笔者采用的是源码在根目录方式。</p><p>首先，小程序规定：一个小程序<strong>主体部分</strong>由三个文件组成，同时必须放在项目的根目录。</p><ul><li><code>app.js</code> 需要在里面调用<code>App()</code>函数，注册一个小程序。</li><li><code>app.json</code> 小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</li><li><code>app.wxss</code> 全局样式，作用于每一个页面。但注意的是<code>app.wxss</code>写的全局样式不会影响组件内的样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── app.js</div><div class="line">├── app.json</div><div class="line">├── app.wxss</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>小程序是由许多页面组成的，因此我们需要一个目录来存放页面, 我们通常把这个文件夹命名为<code>/pages/</code>。<code>app.json</code>的<code>pages</code>是一个数组，数组的每一项是用来指定页面的路径，框架会根据路径自动去寻找相对位置的四类文件(小程序的代码构成)。数组第一项为小程序入口页面。</p><p>每个页面为单独的一个目录, 页面的四类文件使用统一的名称。这里我们跟官方同步，四类文件跟随目录的名称走:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">├── pages</div><div class="line">│   │── home</div><div class="line">│   │   ├── home.wxml</div><div class="line">│   │   ├── home.js</div><div class="line">│   │   ├── home.json</div><div class="line">│   │   └── home.wxss</div><div class="line">│   └── user</div><div class="line">│       ├── user.wxml</div><div class="line">│       └── user.js</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><p>除此之外，在开发小程序时，页面是会分主要页面和次要页面(子页)，子页通常是一些列表页详情页的东西。理论上只会有一个入口能跳的过去那种二级页面。如果这样的子页一多，然后全都放在了<code>/pages/</code>目录下，就会导致目录列表变得庞大，会比较难找…</p><p>这时可以考虑换一种方式储存，在页面文件夹里再加一个文件夹, 名为<code>subpage</code>。把子页放在这个文件夹内，这样层级关系就清晰了，缺点就是不适合套太深。或者说一个产品也不应该把页面藏得太深让用户找不到…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── pages</div><div class="line">│   └── home</div><div class="line">│       ├── subpage</div><div class="line">│       │   └── detail</div><div class="line">│       │       ├── index.wxml</div><div class="line">│       │       └── ...</div><div class="line">│       ├── home.wxml</div><div class="line">│       └── ...</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><p>至于项目简单一些的话前者会好一点(子页命名参照<code>master-description</code>的格式)，页面太过复杂的话可能会比较推荐使用后者的方式。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>既然有了页面，那么页面必不可免会需要引用到图片。图片大致可以分为<strong>业务类</strong>和<strong>公共类</strong>。一些可以复用的图片我们可以放在同一个地方统一管理。而业务类则放在对应的页面目录下, 命名格式推荐为<code>dir@description</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── iamges (公共图片)</div><div class="line">│   │── icon</div><div class="line">│   │   ├── icon@download.png</div><div class="line">│   │   └── icon@cancel.png</div><div class="line">|   └── ...</div><div class="line">├── pages</div><div class="line">│   └── index</div><div class="line">│       ├── images</div><div class="line">│       |   └── index@bg.png</div><div class="line">│       |   └── index@video.png</div><div class="line">│       ├── index.wxml</div><div class="line">│       ├── index.js</div><div class="line">│       ├── index.json</div><div class="line">│       └── index.wxss</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><p>但值得注意的是，在<strong>js</strong>中使用<code>import</code>引入图片时不能通过根目录进行查找，而<code>wxml</code>则没有这种限制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"/images/icon@download.png"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"./images/index@video.png"</span> /&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 会报错</span></div><div class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/images/icon@download.png'</span></div><div class="line"><span class="comment">// 只能使用相对路径</span></div><div class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/../../icon@download.png'</span></div></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>写完页面后自然需要给页面润色, 我们可以通过在页面的<code>.wxss</code>来写局部样式，这没问题。但在我们完成一个又一个页面后，这时你可能会发现有些页面的样式<strong>重复性</strong>太高了。</p><p>因为一个成熟的设计师，在设计每一个产品时，大多会有一套设计风格或者称之为主题的东西。这些元素大量重复在各个页面中，我们重复写这些样式实际上代码是有点冗余的。</p><img src="/blog/2018/11/23/miniprogrmas-build-frame/button.png" title="主题按钮"><p>这时有经验的开发者很自然就会想到将重复性的代码抽出来，所幸微信提供了<code>@import</code>语句可以导入外联样式表。而这些通用的样式可以放在<code>/style/</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── style</div><div class="line">│   ├── button.wxss</div><div class="line">│   └── ...</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><p>直接在<code>.wxss</code>的顶层引入即可复用。<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">improt</span> <span class="string">'/style/button.wxss'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* other code */</span></div></pre></td></tr></table></figure><p></p><p>至于是为何不在<code>app.json</code>中设定全局样式而单独抽出来的原因也是前文所提及的问题————组件中默认情况下不受全局样式影响的，理论上组件也不该受到外部样式的”无意“的影响。<br>但<code>app.json</code>中的样式只需要加载一次就全局可用，外部样式就不一定了(因为没有实际的调研过)，而且还需要额外的去做引入的那一步。具体用哪一种方式还是要看具体情况来自己斟酌啦~</p><p>还有一些方法，比如使用<code>scss</code>、<code>less</code>之类的预处理之类的方案，也是可以，只不过超出了本文的讨论范围，不展开讲。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件对于熟悉模块化开发的同学自然不陌生，小程序基础库版本 <code>1.6.3</code> 就开始支持自定义组件了，至今为止也不用担心兼容性的问题了。从笔者角度来看看法，小程序的组件可以分为全局组件和局部组件。</p><p>全局性是指那种封装了登录、弹框、动画组件等等之类的组件，局部的大多是减轻一个页面内的复杂度，通过模块”搭积木”的方式来组成一个页面。即使某个功能砍了也能对页面减少牵连。</p><p>我们习惯于将全局性的东西放在源码的根目录上，因此会在根目录上创建<code>/components</code>文件夹，里面存放全局性的组件。<br>其中全局性的组件有不少会有同等类型的组件，因为可以再进一步的分类，如动画类组件存放为一个文件夹内。<br>再利用编辑器的文件名排序的特性，可以加上<code>@</code>提前组件集合。</p><p>组件下的四类文件按照<code>componment/index</code>的方式命名与<code>page</code>区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">├── componments (公共组件)</div><div class="line">│   │── anima</div><div class="line">│   │   ├── coin</div><div class="line">│   |   |   ├── index.js</div><div class="line">│   |   |   └── ...</div><div class="line">│   │   └── liquid</div><div class="line">│   |       └── ...</div><div class="line">|   └── ...</div><div class="line">├── pages</div><div class="line">│   └── home</div><div class="line">│       ├── componments</div><div class="line">│       |   └── goods</div><div class="line">│       |     ├── index.wxml</div><div class="line">│       |     └── ...</div><div class="line">│       ├── home.wxml</div><div class="line">│       ├── home.js</div><div class="line">│       ├── home.json</div><div class="line">│       └── home.wxss</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>在原生小程序开发中，一般在源码的根目录下，都会有一个<code>utils</code>文件夹，专门来干杂七杂八的脏话累活。其中包含工具类函数、<code>API</code>的管理、配置信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├── utils (工具集)</div><div class="line">│   │── api</div><div class="line">│   │   └── ...</div><div class="line">|   ├── ... (其他工具类)</div><div class="line">|   ├── config.js</div><div class="line">|   └── local.config.js (本地配置，git忽略)</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>当小程序的资源大小超过了<code>2M</code>时，进行预览调试时就会报文件过大的错误，这时你可能就需要进行分包，将资源分开加载。小程序文档给出的目录结构是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">├── app.js</div><div class="line">├── app.json</div><div class="line">├── app.wxss</div><div class="line">├── packageA</div><div class="line">│   └── pages</div><div class="line">│       ├── cat</div><div class="line">│       └── dog</div><div class="line">├── packageB</div><div class="line">│   └── pages</div><div class="line">│       ├── apple</div><div class="line">│       └── banana</div><div class="line">├── pages</div><div class="line">│   ├── index</div><div class="line">│   └── user</div><div class="line">└── utils</div></pre></td></tr></table></figure><p>但经过我们在项目中尝试，我们发现通过编辑器的字符串排序后，会破坏目录结构的清晰度，所以推荐将分包放置到一个文件夹内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── subpackages (分包)</div><div class="line">│   │── news</div><div class="line">│   │   └── ...</div><div class="line">|   └── store</div><div class="line">│       └── ...</div><div class="line">├── ...</div><div class="line">└── project.config.json</div></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后的一个小程序项目主体结构大致是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">├── components (公共组件目录)</div><div class="line">│   ├── @anima (动画组件)</div><div class="line">│   └── ...</div><div class="line">├── images（公共图片）</div><div class="line">│   └── icon</div><div class="line">│      ├── icon@download.png</div><div class="line">│      └── icon@cancel.png</div><div class="line">├── pages（主包目录）</div><div class="line">│   └── home (app.json 设置的入口页)</div><div class="line">│       ├── home.wxml</div><div class="line">│       ├── home.js</div><div class="line">│       ├── home.json</div><div class="line">│       └── home.wxss</div><div class="line">├── style（公用样式目录）</div><div class="line">├── subpackages（分包目录）</div><div class="line">│   │── news</div><div class="line">|   └── store</div><div class="line">├── utils（公共模块，工具类）</div><div class="line">│   ├── config.js（项目配置）</div><div class="line">│   └── local.config.js (本地配置，git忽略)</div><div class="line">├── .editorconfig</div><div class="line">├── .gitignore</div><div class="line">├── app.js</div><div class="line">├── app.json</div><div class="line">├── app.wxss</div><div class="line">├── project.config.json</div><div class="line">└── README.md</div></pre></td></tr></table></figure><p>以上是从原生小程序开发的角度来对项目结构的设计进行一个思路总结，没有过多的讲更深入的东西。下一期想整理一下关于<code>API</code>封装和管理，欢迎指导~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/11/23/miniprogrmas-build-frame/banner.png&quot;&gt;&lt;p&gt;在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~&lt;/p&gt;
    
    </summary>
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="小程序开发笔记" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Echarts 的食用方式</title>
    <link href="https://anran758.github.io/blog/2018/06/28/how-to-use-echart/"/>
    <id>https://anran758.github.io/blog/2018/06/28/how-to-use-echart/</id>
    <published>2018-06-28T05:04:46.000Z</published>
    <updated>2019-08-04T09:10:39.276Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/06/28/how-to-use-echart/banner.png"><p><code>ECharts</code>，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。</p><p>虽说如此，但是<code>Echarts</code>涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的<code>key</code>值相对应，缺失后就无法正常的显示…</p><p>因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。</p><a id="more"></a><hr><p>其实<code>Echarts</code>也有自己的使用教程，但本文的重心并不是从零开始讲解<code>Echarts</code>，至于更多使用细节可以看官方的<a href="http://echarts.baidu.com/tutorial.html" target="_blank" rel="noopener">文档</a>。</p><p>这里姑且先用折线图作示例。首先需要先引入<code>ECharts</code>, 我们选择好自己所需的版本后(tips: 如何选择版本，可以去看看<a href="http://echarts.baidu.com/download.html" target="_blank" rel="noopener">这里</a>)，然后在<code>&lt;/body&gt;</code>前插入脚本：<code>&lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;</code> 。</p><p>随后通过<code>echarts</code>提供的 API 初始化目标容器节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化 echarts</span></div><div class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</div></pre></td></tr></table></figure><p>接着我们需要填写配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">  <span class="comment">// 全局 tooltip ,</span></div><div class="line">  tooltip: &#123;</div><div class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// 坐标轴触发</span></div><div class="line">    trigger: <span class="string">'axis'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 图例组件，也就是提供显示或隐藏某一条数据信息开关</span></div><div class="line">  legend: &#123;</div><div class="line">    <span class="comment">// 组件在底部显示</span></div><div class="line">    bottom: <span class="string">'0px'</span>,</div><div class="line">    <span class="comment">// 图例每项之间的间隔</span></div><div class="line">    itemGap: <span class="number">46</span>,</div><div class="line">    <span class="comment">// 图例的数据数组, 省略则自动从 series.name 中获取</span></div><div class="line">    <span class="comment">// 但我们需要定制样式，因此我们添上去上去</span></div><div class="line">    data: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'曝光量'</span>,</div><div class="line">        <span class="attr">icon</span>: <span class="string">'circle'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'点击量'</span>,</div><div class="line">        <span class="attr">icon</span>: <span class="string">'circle'</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="comment">// 文字样式</span></div><div class="line">    textStyle: &#123;</div><div class="line">      <span class="attr">color</span>: <span class="string">'#276dcc'</span>,</div><div class="line">      <span class="attr">fontSize</span>: <span class="number">14</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 重设全局调色盘的颜色，比如当前涉嫌图示例中有两条数据</span></div><div class="line">  <span class="comment">// 那这两条数据就会取得我们当前设置颜色作为展示</span></div><div class="line">  color: [<span class="string">'#42a66a'</span>, <span class="string">'#276dcc'</span>],</div><div class="line">  <span class="comment">// 网格布局</span></div><div class="line">  grid: &#123;</div><div class="line">    <span class="comment">// 下面三个是离容器的位置</span></div><div class="line">    left: <span class="string">'3%'</span>,</div><div class="line">    <span class="attr">right</span>: <span class="string">'4%'</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="string">'40px'</span>,</div><div class="line">    <span class="comment">// 坐标刻度，默认是false</span></div><div class="line">    containLabel: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// X轴配置</span></div><div class="line">  xAxis: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'category'</span>,</div><div class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 坐标轴配置</span></div><div class="line">    axisLine: &#123;</div><div class="line">      <span class="attr">lineStyle</span>: &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">'#d6dfea'</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 坐标轴上的 label 样式</span></div><div class="line">    axisLabel: &#123;</div><div class="line">      <span class="attr">margin</span>: <span class="number">18</span>,</div><div class="line">      <span class="attr">fontSize</span>: <span class="number">14</span>,</div><div class="line">      <span class="attr">color</span>: <span class="string">'#56749d'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 类目数据，只有在 type: 'category' 中有效。</span></div><div class="line">    <span class="comment">// 一般情况下我们并不会手动写死数据进去，而是通过 Ajax 请求数据来展示</span></div><div class="line">    data: []</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Y轴配置</span></div><div class="line">  yAxis: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 数值轴</span></div><div class="line">      type: <span class="string">'value'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'点击量'</span>,</div><div class="line">      <span class="comment">// 左侧显示</span></div><div class="line">      position: <span class="string">'left'</span>,</div><div class="line">      <span class="comment">// 下面的样式不再多说</span></div><div class="line">      axisLine: &#123;</div><div class="line">        <span class="attr">lineStyle</span>: &#123;</div><div class="line">          <span class="attr">color</span>: <span class="string">'#d6dfea'</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">axisLabel</span>: &#123;</div><div class="line">        <span class="attr">margin</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="number">14</span>,</div><div class="line">        <span class="attr">color</span>: <span class="string">'#56749d'</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'value'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'曝光量'</span>,</div><div class="line">      <span class="attr">position</span>: <span class="string">'right'</span>,</div><div class="line">      <span class="attr">axisLine</span>: &#123;</div><div class="line">        <span class="attr">lineStyle</span>: &#123;</div><div class="line">          <span class="attr">color</span>: <span class="string">'#d6dfea'</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">axisLabel</span>: &#123;</div><div class="line">        <span class="attr">margin</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="number">14</span>,</div><div class="line">        <span class="attr">color</span>: <span class="string">'#56749d'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="comment">// 系列列表, 这个是数据的关键所在</span></div><div class="line">  series: [</div><div class="line">    <span class="comment">// 如果 legend.data 设置了数据的话，那么 series 的数目需要和 legend.data 的数目一致。</span></div><div class="line">    <span class="comment">// 否则图表会不工作 !!</span></div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'点击量'</span>,</div><div class="line">      <span class="comment">// 图表的类型，在这个示例中我们使用是折线图</span></div><div class="line">      type: <span class="string">'line'</span>,</div><div class="line">      <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</div><div class="line">      <span class="comment">// 系列中的数据内容数组</span></div><div class="line">      <span class="comment">// 同样的，我们主要展示的数据来自于服务端</span></div><div class="line">      data: []</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'曝光量'</span>,</div><div class="line">      <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">      <span class="comment">// 折线图一维数据可能是这种形式的数组</span></div><div class="line">      <span class="comment">// [1, 2, 3, 1, 4]</span></div><div class="line">      data: []</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>随后可以通过 Ajax 获取数据，再使用<code>setOption</code>来设置选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">url</span>: url,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">data</span>: data</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">  config.series[<span class="number">0</span>].data = res.data.click;</div><div class="line">  config.series[<span class="number">1</span>].data = res.data.exposure;</div><div class="line">  config.xAxis.data = res.data.xAxis;</div><div class="line"></div><div class="line">  myChart.setOption(option);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如此，这样我们定义的 echarts 就完成啦~</p><img src="/blog/2018/06/28/how-to-use-echart/echarts.png"><hr><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><p>在<code>vue</code>中封装组件也不难，大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['data-echart', echartClass ]"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"data-echart__header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header__title"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title-name"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">el-popover</span></span></div><div class="line">                        <span class="attr">v-if</span>=<span class="string">"tooltip"</span></div><div class="line">                        <span class="attr">ref</span>=<span class="string">"tooltip"</span></div><div class="line">                        <span class="attr">placement</span>=<span class="string">'bottom'</span></div><div class="line">                        <span class="attr">trigger</span>=<span class="string">'hover'</span>&gt;</div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"tooltip"</span> <span class="attr">class</span>=<span class="string">"el-icon-question"</span> <span class="attr">v-popover:tooltip</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"echartId"</span> <span class="attr">class</span>=<span class="string">"echart__main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'echart'</span>,</div><div class="line">  <span class="attr">props</span>: &#123;</div><div class="line">    <span class="attr">title</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">      <span class="attr">default</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">tooltip</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">      <span class="attr">default</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">echartClass</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">      <span class="attr">default</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">option</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Object</span>,</div><div class="line">      <span class="keyword">default</span>() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;&#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">loading</span>: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Boolean</span>,</div><div class="line">      <span class="attr">default</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">computed</span>: &#123;</div><div class="line">    domEchartId() &#123;</div><div class="line">      <span class="keyword">return</span> (<span class="built_in">document</span> || <span class="built_in">window</span>.document).getElementById(<span class="keyword">this</span>.echartId);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// 随机生成一个ID</span></div><div class="line">      echartId: <span class="keyword">this</span>.randomChar(<span class="number">20</span>),</div><div class="line">      <span class="attr">myChart</span>: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">watch</span>: &#123;</div><div class="line">    <span class="attr">option</span>: &#123;</div><div class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</div><div class="line">      handler(newVal) &#123;</div><div class="line">        <span class="keyword">this</span>.update(newVal);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    loading(newVal) &#123;</div><div class="line">      <span class="keyword">this</span>.toggleLoading(newVal);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  mounted() &#123;</div><div class="line">    <span class="keyword">this</span>.init();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="comment">// 调起loading</span></div><div class="line">    toggleLoading(flag) &#123;</div><div class="line">      flag ? <span class="keyword">this</span>.myChart.showLoading() : <span class="keyword">this</span>.myChart.hideLoading();</div><div class="line">    &#125;,</div><div class="line">    init() &#123;</div><div class="line">      <span class="keyword">this</span>.myChart = echarts.init(<span class="keyword">this</span>.domEchartId);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.myChart.on(<span class="string">'click'</span>, (params) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'clickEchart'</span>, params);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="comment">// 绘制图表</span></div><div class="line">      <span class="keyword">this</span>.myChart.setOption(<span class="keyword">this</span>.option);</div><div class="line">      <span class="comment">// Object.keys(this.data).length !== 0 &amp;&amp; this.myChart.setOption(this.data);</span></div><div class="line">    &#125;,</div><div class="line">    update(data) &#123;</div><div class="line">      <span class="keyword">this</span>.myChart.setOption(data);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生成随机字符串</div><div class="line">     * @param &#123; Number &#125; len - 指定随机字符串的长度</div><div class="line">     */</div><div class="line">    randomChar(len) &#123;</div><div class="line">      <span class="keyword">const</span> x = <span class="string">'0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span>;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> tmp = <span class="string">''</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        tmp += x.charAt(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100000000</span>) % x.length);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> tmp;</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'scss'</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">@import '~Scss/theme';</div><div class="line"></div><div class="line">.data-echart &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  width: 100%;</div><div class="line">  height: 100%;</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div><div class="line">.data-echart__header &#123;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line">.header__title &#123;</div><div class="line">  .title-name &#123;</div><div class="line">    font-size: 16px;</div><div class="line">    color: $f-color--title;</div><div class="line">    font-weight: 600;</div><div class="line">  &#125;</div><div class="line">  .el-icon-question &#123;</div><div class="line">    font-size: 18px;</div><div class="line">    color: $f-color--tip;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">.echart__main &#123;</div><div class="line">  flex: 1;</div><div class="line">  width: 100%;</div><div class="line">  height: 100%;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>我们需要将组件放入一个设有高度的容器上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"height: 600px;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">echart</span> <span class="attr">:option</span>=<span class="string">"charts.option"</span>&gt;</span><span class="tag">&lt;/<span class="name">echart</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>调用的方式也面类似。首先声明一个基础的配置作为模板，在通过 ajax 拿到数据。通过动态数据传入组件内，组件<code>watch</code>到数据变化后立即重新渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 某处集中封装的 ajax 请求</span></div><div class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">'Common/apis'</span></div><div class="line"></div><div class="line"><span class="comment">// 同上配置</span></div><div class="line"><span class="keyword">const</span> config = &#123;...&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">charts</span>: &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'My charts'</span></div><div class="line">        option： config</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;，</div><div class="line">  created() &#123;</div><div class="line">    API.getChartData()</div><div class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> data = res.data</div><div class="line">        <span class="keyword">this</span>.charts.option.xAxis.data = data.xAxis;</div><div class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">0</span>].data = data.click;</div><div class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">1</span>].data = data.exposure;</div><div class="line">      &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/06/28/how-to-use-echart/banner.png&quot;&gt;&lt;p&gt;&lt;code&gt;ECharts&lt;/code&gt;，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。&lt;/p&gt;&lt;p&gt;虽说如此，但是&lt;code&gt;Echarts&lt;/code&gt;涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的&lt;code&gt;key&lt;/code&gt;值相对应，缺失后就无法正常的显示…&lt;/p&gt;&lt;p&gt;因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://anran758.github.io/blog/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://anran758.github.io/blog/tags/javascript/"/>
    
      <category term="Echarts" scheme="https://anran758.github.io/blog/tags/Echarts/"/>
    
      <category term="图表" scheme="https://anran758.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>锚点定位导航</title>
    <link href="https://anran758.github.io/blog/2018/06/09/javascript-position-navigation/"/>
    <id>https://anran758.github.io/blog/2018/06/09/javascript-position-navigation/</id>
    <published>2018-06-09T08:15:32.000Z</published>
    <updated>2019-08-04T09:10:39.275Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/06/09/javascript-position-navigation/banner.jpg"><p>一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。</p><a id="more"></a><hr><h2 id="定位原理"><a href="#定位原理" class="headerlink" title="定位原理"></a>定位原理</h2><p>首先我们来了解一下，什么锚点？</p><p>在海上，水手们会将锚丢入海中，或者靠岸时将锚抛上岸，其固定目的是让船固定位置。而<strong>锚点(anchor)</strong>也是一样，只不过场景不同罢了。</p><p>页面锚点定位可以通过<code>name</code>或者<code>id</code>属性来定位。<code>name</code>已经被<code>HTML5</code>废弃了，就不再多提。</p><p>在页面上，每个<code>id</code>都会自动创建一个锚点，同时还会生成一个<code>hash</code>，表示所处的文档位置。浏览器可以通过<code>hash</code>来确定位置，使用的方式一般如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title"</span>&gt;</span>跳到title<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 地址栏后会加上一段 # 开头的 hash --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://anran758.github.io/blog/#title --&gt;</span></div></pre></td></tr></table></figure><p>这个<code>hash</code>值我们可以通过浏览器的API<code>location.hash</code>取到。但值得注意的是，跳转<code>hash</code>的话是不会像服务端发送请求的(除了第一次请求页面)。</p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>但我们光知道跳转的原理可不够，只要你尝试了上面的跳转方法后，你会发现浏览器跳转方式是很唐突的。它会直愣愣的跳到指定位置(或者没有找到指定位置会，跳到页面最上面)，这在用户看来是十分生硬的，在体验上这个交互并不太友好。这时产品就会要求我们对此处进行优化~ 不过知道了上面的原理后，我们也可以直接使用js的方式来代替这种原生的默认跳转：</p><p>首先我们页面的结构大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"actived"</span> <span class="attr">href</span>=<span class="string">"#title1"</span>&gt;</span>第一组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title2"</span>&gt;</span>第二组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title3"</span>&gt;</span>第三组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title2"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title3"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div></pre></td></tr></table></figure><p>页面布局固定了后，元素离页面顶部的距离可以通过<code>offsetTop</code>来获取到。同时我们可以操作滚动容器(html)的<code>scrollTop</code>来修改滚动位置。嘿，这样一上(目标距离顶部的高度)一下(滚动条)，两个<code>API</code>双剑合璧后，我们就可以点击模拟滚动啦..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jquery 环境</span></div><div class="line"><span class="keyword">var</span> $menu = $(<span class="string">'.nav'</span>);</div><div class="line"><span class="keyword">var</span> $menuList = $menu.find(<span class="string">'a'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 给超链接绑定点击事件</span></div><div class="line">$menuList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">  $<span class="keyword">this</span>.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> id = $<span class="keyword">this</span>.attr(<span class="string">'href'</span>).replace(<span class="regexp">/#/g</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 获取目标距离顶部的高度</span></div><div class="line">    <span class="keyword">var</span> top = $(<span class="string">'#'</span> + id).offset().top - <span class="number">60</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 给滚动容器加动画的效果，滚动到目标位置</span></div><div class="line">    $(<span class="string">'html'</span>).animate(&#123; <span class="attr">scrollTop</span>: top &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>蹡蹡！在页面中调试会发现，点击后页面会平滑的滚动到指定的锚点~ 除此之外，我们还得再添加一个功能：在页面滚动的时候，能让用户知道自己所在的位置~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> contentList = $(<span class="string">'#content'</span>).find(<span class="string">'.item'</span>);</div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> top = $(<span class="built_in">document</span>).scrollTop();</div><div class="line"></div><div class="line">  <span class="comment">// 获取目前滚动条所处的区间</span></div><div class="line">  <span class="keyword">var</span> currentID = <span class="string">''</span>;</div><div class="line">  contentList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 获取当前距离顶部的数值</span></div><div class="line">    <span class="keyword">var</span> itemTop = $<span class="keyword">this</span>.offset().top;</div><div class="line"></div><div class="line">    <span class="comment">// 如果当前滚动距离已经进入了 item 的区间</span></div><div class="line">    <span class="keyword">if</span> (top &gt; itemTop - <span class="number">250</span>) &#123;</div><div class="line">      currentID = <span class="string">'#'</span> + $<span class="keyword">this</span>.attr(<span class="string">'id'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> currentLink = $menu.find(<span class="string">'.actived'</span>);</div><div class="line">  <span class="comment">// 移除其他的类名</span></div><div class="line">  <span class="keyword">if</span> (currentID &amp;&amp; currentLink.attr(<span class="string">'href'</span>) !== currentID) &#123;</div><div class="line">    currentLink.removeClass(<span class="string">'actived'</span>);</div><div class="line"></div><div class="line">    $menu.find(<span class="string">"[href='"</span> + currentID + <span class="string">"']"</span>).addClass(<span class="string">'actived'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这样就锚点定位导航的功能就大功告成啦~ 最后将测试代码放入了<a href="https://codepen.io/anran758/pen/yEVqRa" target="_blank" rel="noopener">codepen</a>上了，感兴趣的同学可以去看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/06/09/javascript-position-navigation/banner.jpg&quot;&gt;&lt;p&gt;一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="业务组件" scheme="https://anran758.github.io/blog/tags/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6/"/>
    
      <category term="jQuery" scheme="https://anran758.github.io/blog/tags/jQuery/"/>
    
      <category term="javascript" scheme="https://anran758.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>将项目资源上传至七牛CDN</title>
    <link href="https://anran758.github.io/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/"/>
    <id>https://anran758.github.io/blog/2018/05/24/node-将项目资源上传至七牛CDN/</id>
    <published>2018-05-24T12:40:40.000Z</published>
    <updated>2018-05-24T16:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/05/24/node-将项目资源上传至七牛CDN/banner.png"><p>在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~</p><a id="more"></a><p>一般情况下，我们开发中会有一个脚手架，里面搭建了我们的开发环境，我们通过<code>npm</code>安装七牛的 API 客户端，<code>npm install -D qn</code>。随后我们在 build 目录下(这里我们习惯将脚手架相关的代码放在此处..)创建一个名为<code>upload.js</code>的文件。</p><p>一般  我们的代码打包后会放在一个<code>dist</code>目录下，我们通过 Node.js 查找我们想要  上传的所有文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 定义指定目录，以及过滤掉多余的系统文件</span></div><div class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</div><div class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取全部文件</div><div class="line"> * @param &#123; String &#125; dir - 指定目录</div><div class="line"> * @return &#123; Array &#125; 返回待上传的文件数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</div><div class="line">    <span class="keyword">let</span> files = [];</div><div class="line"></div><div class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">      <span class="comment">// 获取文件相关信息</span></div><div class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</div><div class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</div><div class="line"></div><div class="line">      <span class="comment">// 过滤文件</span></div><div class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> v === file;</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</div><div class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></div><div class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></div><div class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></div><div class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 文件夹，递归继续查找文件</span></div><div class="line">        files = files.concat(getAllFiles(dirname));</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> files;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ok~ 有了文件列表后，接着我们就要考虑上传的问题啦。不过在这之前，我们还需要再做一些准备…我们要先去<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">七牛开发者平台</a>获取签名信息，用来作为上传的凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// config/base.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// other configuration...</span></div><div class="line">  cdn: &#123;</div><div class="line">    <span class="comment">// https://portal.qiniu.com/user/key</span></div><div class="line">    accessKey: <span class="string">'your access key'</span>,</div><div class="line">    <span class="attr">secretKey</span>: <span class="string">'your secret key'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// https://portal.qiniu.com/bucket/koudaifm/index</span></div><div class="line">    bucket: <span class="string">'project'</span>,                    <span class="comment">// 就是储存空间的域名，一般来说也是你的项目名</span></div><div class="line">    origin: <span class="string">'http://fs.project.com'</span>,      <span class="comment">// 外链域名，这个可以自己设置，一开始七牛会分配给你一个随机的域名</span></div><div class="line"></div><div class="line">    <span class="comment">// https://developer.qiniu.com/kodo/manual/1671/region-endpoint</span></div><div class="line">    <span class="comment">// 这个是跟项目所在的储存区域相对应的，比如华南地区的就是这个示例的uploadURL</span></div><div class="line">    uploadURL: <span class="string">'http://up-z2.qiniu.com'</span>,</div><div class="line">    <span class="comment">// timeout: 3600000                   // 超时，唔..这里姑且不需要</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><img src="/blog/2018/05/24/node-将项目资源上传至七牛CDN/qiniu.png" title="七牛储存空间"><hr><p>考虑到上传资源时，可能会碰到资源已存在的问题，这时就需要再额外创建一个函数来处理这个问题~ 然后我们开始封装上传函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将配置项放到单独文件上，统一改起来也方便..</span></div><div class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</div><div class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</div><div class="line"></div><div class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</div><div class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 删除七牛资源</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</div><div class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</div><div class="line">      cb &amp;&amp; cb();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(</div><div class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</div><div class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 上传资源</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></div><div class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</div><div class="line"></div><div class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></div><div class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></div><div class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</div><div class="line">        <span class="comment">// 删除文件并重试，以最新</span></div><div class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          qnUpload(dir);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 报错信息</span></div><div class="line">      <span class="built_in">console</span>.log(</div><div class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</div><div class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</div><div class="line"></div><div class="line"><span class="comment">// 对每个文件调用 qnUpload</span></div><div class="line">myFiles.forEach(qnUpload);</div></pre></td></tr></table></figure><hr><p>锵锵！一个可复用的上传组件就这么出现啦~ 最后上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> qn = <span class="built_in">require</span>(<span class="string">'qn'</span>);</div><div class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</div><div class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</div><div class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</div><div class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</div><div class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取全部文件</div><div class="line"> * @param &#123; String &#125; dir - 指定目录</div><div class="line"> * @return &#123; Array &#125; 返回待上传的文件数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</div><div class="line">    <span class="keyword">let</span> files = [];</div><div class="line"></div><div class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">      <span class="comment">// 获取文件信息</span></div><div class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</div><div class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</div><div class="line"></div><div class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> v === file;</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</div><div class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></div><div class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></div><div class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></div><div class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 递归重复查找文件</span></div><div class="line">        files = files.concat(getAllFiles(dirname));</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> files;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myFiles = getAllFiles(distPath);</div><div class="line"><span class="keyword">const</span> filesLength = myFiles.length;</div><div class="line"></div><div class="line"><span class="comment">// 七牛上传配置</span></div><div class="line"><span class="comment">// https://www.npmjs.com/package/qn#upload</span></div><div class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</div><div class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 删除七牛资源</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</div><div class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</div><div class="line">      cb &amp;&amp; cb();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(</div><div class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</div><div class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 上传资源</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></div><div class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</div><div class="line"></div><div class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></div><div class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></div><div class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</div><div class="line">        <span class="comment">// 删除文件并重试</span></div><div class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          qnUpload(dir);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 报错信息</span></div><div class="line">      <span class="built_in">console</span>.log(</div><div class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</div><div class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</div><div class="line"></div><div class="line">myFiles.forEach(qnUpload);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/24/node-将项目资源上传至七牛CDN/banner.png&quot;&gt;&lt;p&gt;在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://anran758.github.io/blog/categories/Node/"/>
    
    
      <category term="Node" scheme="https://anran758.github.io/blog/tags/Node/"/>
    
      <category term="Javascirpt" scheme="https://anran758.github.io/blog/tags/Javascirpt/"/>
    
      <category term="七牛" scheme="https://anran758.github.io/blog/tags/%E4%B8%83%E7%89%9B/"/>
    
      <category term="项目管理" scheme="https://anran758.github.io/blog/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>常见的几种压缩图片的思路</title>
    <link href="https://anran758.github.io/blog/2018/05/08/canvas-compress-prictures/"/>
    <id>https://anran758.github.io/blog/2018/05/08/canvas-compress-prictures/</id>
    <published>2018-05-08T15:15:40.000Z</published>
    <updated>2018-05-14T12:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/05/08/canvas-compress-prictures/banner.png"><p>在做H5开发时，难免会遇到需要上传图片的需求。那么一般都是如何去处理压缩的需求呢？这里简要的概述一下原理，做个笔记加深印象~</p><a id="more"></a><p>目前主流对图片进行处理都是使用<code>canvas</code>技术~当我们碰到需要压缩图片的场景时，第一种我们就可以尝试控制图片的尺寸。因为图片的尺寸越大，里面包含的信息就越多，自然体积也随着增加了起来。</p><p>我们可以做一个宽高的限制，超出就对其进行尺寸的缩放。那么限制最大值是多少呢？这个应该根据产品或者需求来调整。当然，裁剪图片也是一种思路，那么该如何去裁剪，让用户选择还是我们自定义？这也是需要考虑的一点。</p><p>判断缩放的方法主要使用<code>drawImage</code>将图片导入canvas，如果图片超过了指定的宽高，就进行缩放图片。关于这一点，我觉得张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/" target="_blank" rel="noopener">这篇文章</a>讲的已经足够简洁的了，感兴趣的同学可以看这边~</p><hr><p>第二种就是使用<code>canvas</code>提供的另一个接口：<code>canvas.toDataURL(type, encoderOptions)</code>。这是浏览器原生提供可以压缩图片的方法，该方法返回一个包含图片展示的<code>data URI</code>(也就是我们常说的base64)。</p><p>它接受两个可选参数，我们可以使用<code>type</code>参数指定其类型，默认为<code>PNG</code>格式。<code>encoderOptions</code>则是压缩图片质量参数，区间在 0~1 之间。值得注意的是，<strong>压缩图片质量这个参数只对<code>image/jpeg</code>或<code>image/webp</code>有效</strong>。所幸的是，其他格式用不了压缩图片的参数，但浏览器还是会对图片进行压缩处理，剔除对 web 展示没啥用的元数据(虽然可能会涉及到版权纠纷的问题)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line"><span class="comment">// 中间处理的过程省略 ...</span></div><div class="line"><span class="keyword">var</span> fullQuality = canvas.toDataURL(<span class="string">"image/jpeg"</span>, <span class="number">0.8</span>);</div></pre></td></tr></table></figure><p>但单单是转为 base64 是不能满足我们一些需求的，这时我们可能会想要让它再转为对服务端友好的<code>blob</code>类型。<br>这时我们就需要用到<code>window.atob()</code>, 将已经编译成 base64 的字符串解码为二进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> type = fullQuality.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="comment">// 解码为二进制</span></div><div class="line"><span class="keyword">var</span> binStr = atob(fullQuality.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line"><span class="keyword">var</span> length = binStr.length;</div><div class="line"></div><div class="line"><span class="comment">// 创建一个缓存区，容器大小可以容纳 binStr.</span></div><div class="line"><span class="comment">// 这个缓存区我们是不能直接操作的。</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(binStr);</div><div class="line"></div><div class="line"><span class="comment">// 建立`Uint8Array`类型数组</span></div><div class="line"><span class="comment">// 这样我们就可以通过对象的方法或者数组索引读写里面的数据啦</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// var buff = new ArrayBuffer(4);   =&gt; ArrayBuffer(4) &#123;&#125;</span></div><div class="line"><span class="comment">// var arr = new Uint8Array(buff);  =&gt; Uint8Array(4) [0, 0, 0, 0]</span></div><div class="line"><span class="comment">// arr[2] = 8;</span></div><div class="line"><span class="comment">// console.log(buff)    =&gt; 缓存区和 Uint8Array 同时被修改了</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">  <span class="comment">// 逐个查询 binStr 里的二进制 Unicode 编码，并存入类型数组中</span></div><div class="line">  arr[i] = binStr.charCodeAt(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer],&#123; <span class="attr">type</span>: type &#125;</div></pre></td></tr></table></figure><p>如果是想转为<code>File</code>类型的话，和上面的方法实现的也一致..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/File/File</span></div><div class="line"><span class="comment">// 第一个参数传入 ArrayBuffer 也行，blob 也行..</span></div><div class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File([buff], <span class="string">"img.jpg"</span>, &#123; <span class="attr">type</span>: type &#125;);</div></pre></td></tr></table></figure><p>哇，转个类型都看起来好像挺麻烦的样子呢…那么有没有内置的方法呀？答案是有，canvas 里有个<code>toBlob(callback, type, encoderOptions)</code>的方法, 它接受三个参数，一个是将canvas转为<code>blob</code>后接受的回调函数、一个是指定的图片格式、另一个是图片质量，区间也在 0~1 之间。</p><p>看起来这个方法似乎比上面那个更好用呢..然而残念的是，这货还受着兼容性影响，不在乎的兼容性的话倒是可以使用… 不然就需要上一种polyfill 的方式来实现~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</div><div class="line">  <span class="comment">// 接收转换后的 blob 类型</span></div><div class="line">  <span class="comment">// 此时可以在函数里发起请求</span></div><div class="line">  $.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: baseURL + <span class="string">'/uploader/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123; <span class="attr">act_id</span>: actID, <span class="attr">pic_1</span>: blob &#125;,</div><div class="line">    <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="comment">// success</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;, <span class="string">'image/png'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/08/canvas-compress-prictures/banner.png&quot;&gt;&lt;p&gt;在做H5开发时，难免会遇到需要上传图片的需求。那么一般都是如何去处理压缩的需求呢？这里简要的概述一下原理，做个笔记加深印象~&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈CSS3 Matrix 的使用</title>
    <link href="https://anran758.github.io/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://anran758.github.io/blog/2018/05/06/谈谈CSS3-Matrix-的理解/</id>
    <published>2018-05-06T02:11:26.000Z</published>
    <updated>2018-05-06T09:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/05/06/谈谈CSS3-Matrix-的理解/banner.png"><p>CSS3的<code>transform</code>里有一个方法叫做<code>Matrix</code>，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。</p><p>光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些<code>translate(25deg)</code>之类有着明确语义跟容易调用方法外，<code>Matrix</code>使用起来确实有些复杂~</p><a id="more"></a><p><code>Matrix</code>的参数分别有a, b, c, d, e, f六个参数，我们可以分别对应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">X</span>轴的缩放， <span class="selector-tag">X</span>轴拉升, <span class="selector-tag">Y</span>轴的拉伸, <span class="selector-tag">Y</span>轴的缩放, <span class="selector-tag">X</span>轴的位移, <span class="selector-tag">Y</span>轴的位移);</div></pre></td></tr></table></figure><p>这样看上去好像好多了，我们常使用的几个方法也是可以通过Matrix来实现：</p><p>元素默认情况下的表现可以用<code>Matrix</code>来表示为：<code>matrix(1, 0, 0, 1, 0, 0)</code>;</p><p>通过上面的例子，我们很容易推测出缩放的公式为：<code>translate(sx, sy)</code>等于<code>matrix(sx, 0, 0, sy, 0, 0)</code>;</p><p>位移就更简单啦： <code>translate(tx, ty)</code>等于<code>matrix(1, 0, 0, 1, tx, ty)</code>;</p><p>拉升则是：<code>skew(degx, degy)</code>等于<code>matrix(1, tan(degx), tan(degy), 1, 0, 0)</code></p><p>旋转没有提供相应的参数，他需要套用数学的公式，毕竟这个方法名就是<code>矩阵</code>嘛：<code>rotate(deg)</code>等于<code>matrix(cos(deg),sin(deg), -sin(deg), cos(deg), 0, 0)</code></p><hr><p>那问题来了，为啥有简单易用的方法不用，我们非要搞这么麻烦的东西呢？这是因为很多时候我们需要高度精确定制动画时，那些简单的方法以及不能满足我们的需求啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/06/谈谈CSS3-Matrix-的理解/banner.png&quot;&gt;&lt;p&gt;CSS3的&lt;code&gt;transform&lt;/code&gt;里有一个方法叫做&lt;code&gt;Matrix&lt;/code&gt;，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。&lt;/p&gt;&lt;p&gt;光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些&lt;code&gt;translate(25deg)&lt;/code&gt;之类有着明确语义跟容易调用方法外，&lt;code&gt;Matrix&lt;/code&gt;使用起来确实有些复杂~&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://anran758.github.io/blog/categories/css/"/>
    
    
      <category term="transform" scheme="https://anran758.github.io/blog/tags/transform/"/>
    
      <category term="css" scheme="https://anran758.github.io/blog/tags/css/"/>
    
      <category term="css3" scheme="https://anran758.github.io/blog/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>git-flow 练习笔记</title>
    <link href="https://anran758.github.io/blog/2018/04/23/git-flow/"/>
    <id>https://anran758.github.io/blog/2018/04/23/git-flow/</id>
    <published>2018-04-23T08:09:23.000Z</published>
    <updated>2018-04-26T16:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/04/23/git-flow/banner.png"><p>在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。</p><a id="more"></a><p>git flow 有好几个版本，这里笔者演示使用的是<a href="https://github.com/petervanderdoes/gitflow-avh" target="_blank" rel="noopener">git-flow-avh</a>的版本。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先我们先开始初始化仓库的工作流，我们在命令行使用<code>git flow init</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git flow init</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (<span class="built_in">local</span>) on this platform</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (global) on this platform</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (system) on this platform</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (file) on this platform</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">No branches exist yet. Base branches must be created now.</div></pre></td></tr></table></figure><p>命令行出现了警告，告诉我们还没有基础的分支。这是因为测试是全新的仓库作测试，这个我们姑且先不管它，接着引导会向我们确定需要初始化分支的名字，我们都采用默认即可。<br>直到询问<code>Version tag prefix</code>时，我们采用<code>v</code>作版本前缀，这其实也是很常见的一种习惯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Branch name <span class="keyword">for</span> production releases: [master]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line"></div><div class="line">Branch name <span class="keyword">for</span> <span class="string">"next release"</span> development: [develop]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line"></div><div class="line">How to name your supporting branch prefixes?</div><div class="line">Feature branches? [feature/]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Bugfix branches? [bugfix/]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Release branches? [release/]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Hotfix branches? [hotfix/]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Support branches? [support/]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line"></div><div class="line">Version tag prefix? [] v</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Hooks and filters directory? [/Users/anran/MyProject/git-flow-test/.git/hooks]</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div></pre></td></tr></table></figure><p>随后我们使用<code>git branch</code>查看一下当前分支，我们会发现，git flow 创建了两条分支————主分支（master）和开发分支（develop），并自动切换到了 develop 上。</p><p>一般来说，我们常将 master 作为部署的分支，这个版本的产品防止稳定的代码和功能，作为产品的一个正式版部署。<br>正常情况下，我们不能直接在 master 分支上进行工作，而该是在 develop 开发环境下进行工作。<br>除此之外，develop 还是一个基础的分支，当我们开发新的功能时，我们会另开一个分支，在新的分支上进行功能开发，等功能开发完毕后再合并进来 develop 分支。</p><p>嘿，我们先创建一个<code>README.md</code>，在里面添加一些文字进去，再提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) git branch</div><div class="line">* develop</div><div class="line">  master</div><div class="line">➜  git-flow-test git:(develop) touch README.md</div><div class="line">➜  git-flow-test git:(develop) ✗ vim README.md</div><div class="line">➜  git-flow-test git:(develop) ✗ git add .</div><div class="line">➜  git-flow-test git:(develop) ✗ git status</div><div class="line">On branch develop</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">  new file:   README.md</div><div class="line"></div><div class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"First commit"</span></div><div class="line">[develop 61ec91a] First commit</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 README.md</div></pre></td></tr></table></figure><p>如果这时直接用<code>push</code>的话，git会提示你没有设定上游分支————别忘了现在我们在使用全新的测试仓库。</p><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) git push</div><div class="line">fatal: The current branch develop has no upstream branch.</div><div class="line">To push the current branch and set the remote as upstream, use</div><div class="line"></div><div class="line">    git push --set-upstream origin develop</div><div class="line"></div><div class="line">➜  git-flow-test git:(develop) git push --set-upstream origin develop</div><div class="line">Counting objects: 5, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (2/2), done.</div><div class="line">Writing objects: 100% (5/5), 385 bytes | 385.00 KiB/s, done.</div><div class="line">Total 5 (delta 0), reused 0 (delta 0)</div><div class="line">To github.com:anran758/git-flow-test.git</div><div class="line"> * [new branch]      develop -&gt; develop</div><div class="line">Branch &apos;develop&apos; set up to track remote branch &apos;develop&apos; from &apos;origin&apos;.</div><div class="line">➜  git-flow-test git:(develop)</div></pre></td></tr></table></figure><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><p>umm..现在假设我们现在碰到了一个需求，需要加一些功能，这时我们就需要开一个功能分支了，这时工作中常用的分支。那为啥都切到开发环境了还要单独开一个分支呢？这是避免产品调皮的说，“诶嘿，兄弟，刚才那个功能只是我突发奇想，咱们不要了吧”。嗯，这时宰一个产品祭天事小，污染了全局的开发环境才事大，回退都不好回退（可能团队中其他人也在写一些功能上去或者修复了一些bug上去，回退意味着其他人也会收到影响）。</p><p>而单独开一个分支则没那么多破事需要烦恼，再不济就删除这个分支即可，不需要耗费额外的成本。</p><p>我们先看一下给flow都有啥，使用命令<code>git flow -h</code>会提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) git flow -h</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</div><div class="line">usage: git flow &lt;subcommand&gt;</div><div class="line"></div><div class="line">Available subcommands are:</div><div class="line">   init      Initialize a new git repo with support <span class="keyword">for</span> the branching model.</div><div class="line">   feature   Manage your feature branches.</div><div class="line">   bugfix    Manage your bugfix branches.</div><div class="line">   release   Manage your release branches.</div><div class="line">   hotfix    Manage your hotfix branches.</div><div class="line">   support   Manage your support branches.</div><div class="line">   version   Shows version information.</div><div class="line">   config    Manage your git-flow configuration.</div><div class="line">   <span class="built_in">log</span>       Show <span class="built_in">log</span> deviating from base branch.</div><div class="line"></div><div class="line">Try <span class="string">'git flow &lt;subcommand&gt; help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure><p>因为我们现在是想做一个新功能，feature 就是我们想要的命令。我们进一步查看详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) git flow feature <span class="built_in">help</span></div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</div><div class="line">usage: git flow feature [list]</div><div class="line">   or: git flow feature start</div><div class="line">   or: git flow feature finish</div><div class="line">   or: git flow feature publish</div><div class="line">   or: git flow feature track</div><div class="line">   or: git flow feature diff</div><div class="line">   or: git flow feature rebase</div><div class="line">   or: git flow feature checkout</div><div class="line">   or: git flow feature pull</div><div class="line">   or: git flow feature delete</div><div class="line"></div><div class="line">    Manage your feature branches.</div><div class="line"></div><div class="line">    For more specific <span class="built_in">help</span> <span class="built_in">type</span> the <span class="built_in">command</span> followed by --help</div></pre></td></tr></table></figure><hr><p>我们使用<code>git flow feature start</code>再加上一个名字，这个名字代表着这个功能分支是做什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) git flow feature start home</div><div class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: <span class="_">-eq</span>: unary operator expected</div><div class="line">Switched to a new branch <span class="string">'feature/home'</span></div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new branch <span class="string">'feature/home'</span> was created, based on <span class="string">'develop'</span></div><div class="line">- You are now on branch <span class="string">'feature/home'</span></div><div class="line"></div><div class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</div><div class="line"></div><div class="line">     git flow feature finish home</div></pre></td></tr></table></figure><p>这时我们创建了一个名为<code>feature/home</code>的新分支，并且切换到了新分支上。feature的前缀就是前面使用默认的功能分支的名字。<br>这个 feature 可以当成一个放置功能的文件夹。</p><p>随后我创建一个 HTML 文件，并在上面写了少许代码假装（雾）完成了这个新功能的开发。<br>使用<code>git flow feature finish &lt;name&gt;</code>完成本回合的开发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(feature/home) ✗ git flow finish home</div><div class="line">Switched to branch <span class="string">'develop'</span></div><div class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</div><div class="line">Already up to date.</div><div class="line">Deleted branch feature/home (was 61ec91a).</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- The feature branch <span class="string">'feature/home'</span> was merged into <span class="string">'develop'</span></div><div class="line">- Feature branch <span class="string">'feature/home'</span> has been locally deleted</div><div class="line">- You are now on branch <span class="string">'develop'</span></div></pre></td></tr></table></figure><p>git flow 将分支合并后，会将<code>feature/home</code>分支删除。这时分支会切换到<code>develop</code>。<strong>注意，这时候的代码还没有提交到远端！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) ✗ git add .</div><div class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"添加新的功能"</span></div><div class="line">[develop 9ca31f9] 添加新的功能</div><div class="line"> 1 file changed, 12 insertions(+)</div><div class="line"> create mode 100644 index.html</div><div class="line">➜  git-flow-test git:(develop) ✗ git push</div><div class="line">Counting objects: 3, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (3/3), done.</div><div class="line">Writing objects: 100% (3/3), 482 bytes | 482.00 KiB/s, done.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To github.com:anran758/git-flow-test.git</div><div class="line">   61ec91a..9ca31f9  develop -&gt; develop</div></pre></td></tr></table></figure><h2 id="正式发布"><a href="#正式发布" class="headerlink" title="正式发布"></a>正式发布</h2><p>好啦，当我们开发的差不多了，bug都修完并且都测试过了，这时就可以考虑部署一版了。这时我们可以使用<code>git flow release start &lt;version number&gt;</code>进入发布的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(develop) ✗ git flow release start 1.0.0</div><div class="line">Switched to a new branch <span class="string">'release/1.0.0'</span></div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new branch <span class="string">'release/1.0.0'</span> was created, based on <span class="string">'develop'</span></div><div class="line">- You are now on branch <span class="string">'release/1.0.0'</span></div><div class="line"></div><div class="line">Follow-up actions:</div><div class="line">- Bump the version number now!</div><div class="line">- Start committing last-minute fixes <span class="keyword">in</span> preparing your release</div><div class="line">- When <span class="keyword">done</span>, run:</div><div class="line"></div><div class="line">     git flow release finish <span class="string">'1.0.0'</span></div></pre></td></tr></table></figure><p>git flow 基于<code>develop</code>创建了一个新的分支，同时切换到新分支<code>release/1.0.0</code>上了。</p><p>这时我们可以进入最后的准备啦~比如我们一般发布都需要写版本信息，说明这版本都做了什么？新加了哪些功能？修了哪些bug等信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(release/1.0.0) ✗ touch changelog.md</div><div class="line">➜  git-flow-test git:(release/1.0.0) ✗ vim changelog.md</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line"><span class="comment"># item name</span></div><div class="line"></div><div class="line"><span class="comment">## v1.0.0 2018/04/23</span></div><div class="line"></div><div class="line">* 基础功能完善</div><div class="line">* 完成巴拉巴拉功能</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line"><span class="string">"changelog.md"</span> 6L, 83C</div><div class="line"></div><div class="line">----</div><div class="line"></div><div class="line">➜  git-flow-test git:(release/1.0.0) ✗ git add changelog.md</div><div class="line">➜  git-flow-test git:(release/1.0.0) ✗ git commit -m <span class="string">"增加版本号信息"</span></div><div class="line">[release/1.0.0 f8464d6] 修改版本号信息</div><div class="line"> 1 file changed, 6 insertions(+)</div><div class="line"> create mode 100644 changelog.md</div></pre></td></tr></table></figure><p>这时暂时先不用push，不过这里值得注意的是，<strong>一般来说，我们只有两个长期分支，一个 develop，另一个是 master分支。例如release 、feature等分支一般不会出现在远程的分支中。这是以为当我们做完这些工作流后，这些分支都会合并删除了。</strong></p><p>等完成这些工作后，我们把发布流程结束，在命令行输入: <code>git flow release finish 1.0.0</code>。git flow将会做以下几个步骤：</p><ul><li><p>pull代码，以确保本地分支的代码都是最新的版本。</p></li><li><p>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。<br>这时命令行会进入vim编辑器里的合并信息页，默认会以<code>Merge branch &#39;release/1.0.0&#39;</code>作为 commit<br>信息提交。我们也可以自己输入一些信息进行描述。(vim编辑器状态下，输入<code>a</code>则进入编辑状态，使用<code>:q</code>为不保存信息退出编辑器，<code>:wq</code>为保存信息并退出vim)。</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Merge branch <span class="string">'release/1.0.0'</span></div><div class="line"></div><div class="line"></div><div class="line"># Please enter <span class="keyword">a</span> commit message <span class="keyword">to</span> explain why this merge <span class="keyword">is</span> necessary,</div><div class="line"># especially <span class="keyword">if</span> it merges <span class="keyword">an</span> updated upstream into <span class="keyword">a</span> topic branch.</div><div class="line">#</div><div class="line"># Lines starting with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts</div><div class="line"># the commit.</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line"><span class="string">"~/MyProject/git-flow-test/.git/MERGE_MSG"</span> <span class="number">7</span>L, <span class="number">256</span>C</div></pre></td></tr></table></figure><ul><li>保存后又会进入另一个信息，这次这个是确定版本号信息。我们将<code>v1.0.0</code>前面的<code>#</code>去掉，让其作为tag，<code>v</code>是一开头初始化所用的前缀，而<code>1.0.0</code>则是我们这次发布的名称（版本号）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Write a message for tag:</span></div><div class="line"><span class="comment">#   v1.0.0</span></div><div class="line"><span class="comment"># Lines starting with '#' will be ignored.</span></div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line"><span class="string">"~/MyProject/git-flow-test/.git/TAG_EDITMSG"</span> 5L, 84C</div></pre></td></tr></table></figure><ul><li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字。</li><li>清理操作，版本分支会被删除，并且回到 “develop”。</li></ul><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>上线后，在进行测试时会可能会发现之前没有留意到的小bug，比如展示的数据调错了字段，当bug修复后，这时就可以使用git flow 里的<code>hotfix</code>，用来表示bug的修复。值得注意的是，<code>hotfix</code>与之前两个分支有些不同，<code>hotfix</code>是基于<code>master</code>主分支的修复，而前面两者是基于<code>develop</code>分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(master) git flow hotfix start v1.0.1hotfix</div><div class="line">Switched to a new branch <span class="string">'hotfix/v1.0.1hotfix'</span></div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new branch <span class="string">'hotfix/v1.0.1hotfix'</span> was created, based on <span class="string">'master'</span></div><div class="line">- You are now on branch <span class="string">'hotfix/v1.0.1hotfix'</span></div><div class="line"></div><div class="line">Follow-up actions:</div><div class="line">- Start committing your hot fixes</div><div class="line">- Bump the version number now!</div><div class="line">- When <span class="keyword">done</span>, run:</div><div class="line"></div><div class="line">     git flow hotfix finish <span class="string">'fixShoppingCart'</span></div></pre></td></tr></table></figure><p>然后你会看到git flow会提示你：</p><ul><li>开始修复你bug</li><li>修复bug也是需要影响版本号的</li><li>完成上述工作后就可以结束这个补丁啦~</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) vim index.html</div><div class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ vim changelog.md</div><div class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git add .</div><div class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git commit -m <span class="string">"fixed shopping cart bug"</span></div><div class="line">[hotfix/v1.0.1hotfix 1506b7f] fixed shopping cart bug</div><div class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</div><div class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) git flow hotfix finish v1.0.1hotfix</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> changelog.md | 2 ++</div><div class="line"> index.html   | 4 ++--</div><div class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</div><div class="line">Switched to branch <span class="string">'develop'</span></div><div class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> changelog.md | 8 ++++++++</div><div class="line"> index.html   | 4 ++--</div><div class="line"> 2 files changed, 10 insertions(+), 2 deletions(-)</div><div class="line"> create mode 100644 changelog.md</div><div class="line">Deleted branch hotfix/v1.0.1hotfix (was 1506b7f).</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been merged into <span class="string">'master'</span></div><div class="line">- The hotfix was tagged <span class="string">'vv1.0.1hotfix'</span></div><div class="line">- Hotfix tag <span class="string">'vv1.0.1hotfix'</span> has been back-merged into <span class="string">'develop'</span></div><div class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been locally deleted</div><div class="line">- You are now on branch <span class="string">'develop'</span></div></pre></td></tr></table></figure><p>我们使用<code>git flow hotfix finish v1.0.1hotfix</code>结束工作流后，跟之前那样会出现合并的信息，如果需要的话，就添加相应秒速信息，再保存退出即可。</p><p>这时会将修复的部分同时合并到<code>master</code>和<code>develop</code>分支上，同时会为这次hotfix打上 tag。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>bugfix</code>，它也是修复bug分支。看到这里就会有同学会疑问了：“啥？又改bug，这和之前那个又有啥区别？”。</p><p>原来它与<code>hotbug</code>不同的是，它是基于<code>develop</code>分支的。事实上这一个工作流在笔者的日常开发中用的比较少，似乎有些gif flow 的模型中都没有这个工作流，不过我也没有深入的去考证~因为目前没有遇到碰到这个的场景，了解的同学不妨留言讨论分享一下。</p><p>除此之外还有一个<code>support</code>的功能，是想用来支持以前的版本产品，这是一个实验性的功能，不太建议使用这个。</p><p>如果你偏爱于可视化的git的话，如同 sourcetree 之类的 Git GUI 也内置有git flow。</p><img src="/blog/2018/04/23/git-flow/img-1.png" title="Mac下的SourceTree"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>git flow实际上就一连串命令的组合，我们也可以单个单个的输入命令达到同样的效果。虽说git flow统一了工作流程，但并不是适用于全部的场景。项目中只有一个人时却反而会显得有点繁琐了。我们应该根据实际项目去选择符合项目的工作流。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/04/23/git-flow/banner.png&quot;&gt;&lt;p&gt;在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://anran758.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://anran758.github.io/blog/tags/git/"/>
    
      <category term="github" scheme="https://anran758.github.io/blog/tags/github/"/>
    
      <category term="git flow" scheme="https://anran758.github.io/blog/tags/git-flow/"/>
    
  </entry>
  
  <entry>
    <title>浏览器与服务端的背后交互: 详解页面请求的过程</title>
    <link href="https://anran758.github.io/blog/2018/04/06/URL-to-browser/"/>
    <id>https://anran758.github.io/blog/2018/04/06/URL-to-browser/</id>
    <published>2018-04-06T08:07:15.000Z</published>
    <updated>2019-05-06T13:17:21.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/04/06/URL-to-browser/banner.jpg"><p>这其实一个很经典的一个题目啦~但其涉及知识面之广，却值得一说。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我们将 URL 输入至浏览器的地址栏后回车, 首先浏览器就会开始检查 URL 是否合法, 是否 IP 地址， 若是不符合匹配规则, 将会以关联字进行搜索， 并带至搜索页（这个看浏览器设置）.</p><p>我们以掘金为例, 我在输入 URL 的时候粗心的输错了协议. 但 Chrome 浏览器不认识这玩意呀, 然后将我们带到了搜索页. 仿佛在说: “嘿, 兄弟. 虽然不太理解你想干嘛, 但是你可以看看这里有你想要的东西吗?”</p><img src="/blog/2018/04/06/URL-to-browser/img-1.png"><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>嘿, 接下来我们需要了解一些基础的概念~</p><p>通常我们看到诸如<code>www.baidu.com/</code>之类的网址， 我们将其称之为域名. 而 <strong>DNS</strong>就是<strong>域名系统(Domain Name System)</strong>，它所处于的角色就是将主机名和域名映射为相应的 IP 地址.</p><p>事实上我们向服务端请求资源时, 也可以直接输入目标 IP, 并不一定需要通过域名才能访问到. 但更多的时候，我们常见的还是使用域名的方式进行访问， 这是为什么呢？</p><p>其实这个也很好理解，当你需要记住十个以上诸如<code>111.13.101.208</code>的 IP 地址的话，你就会感觉头疼了，如果我们使用我们熟悉的单词去记的话，相反就没那么困扰了（想想淘宝，京东和百度的域名~）.</p><p>然而当计算机在网络进行通讯时, 它们仍然需要 IP 地址————因为它们不认得域名，这时 DNS 就派上用场啦~ 换句话说, 域名对于服务端来说, 并不是必须的，这只不过是方便人脑记忆罢了~</p><img src="/blog/2018/04/06/URL-to-browser/anima-1.gif" title="通过 IP 地址来访问百度首页"><hr><p>ok, 咱们回归正题, 我们把前面的错误纠正, 输入正确的 URL =&gt; 浏览器开始解析 DNS:</p><ul><li>首先浏览器将接收到的<code>URL</code>查询主机名，并将主机名发送到<code>DNS</code>客户端.</li><li>随后查找缓存中是否有该域名的记录， 缓存查找会根据以下几步进行查找：<ul><li>每个浏览器都有自己的缓存, 浏览器会先检查自身的缓存的是否存在目标的<code>DNS</code>记录? 如果有则进行尝试连接.(chrome 浏览器的 DNS 是采用预解析的, 我们可以在地址栏输入 about:DNS 查看浏览器本地的<code>DNS</code>)</li><li>如果浏览器缓存没有找到, 进而会查找操作系统中的<code>DNS</code>. (windows 可以在命令行使用<code>ipconfig /displaydns</code>来查看 <code>DNS</code>)</li><li>如果在本地<code>DNS</code>都没有找到的话, 则会查找<strong>hosts 文件</strong>(域名解析文件), 它是负责将主机名映射到相应的<code>IP</code>地址。随带一提，我们在日常开发中常用到的<code>127.0.0.1</code>默认就在<strong>hotst 文件</strong>中映射了域名为<code>localhost</code>, 因此我们直接使用<code>localhost</code>来访问<code>127.0.0.1</code>。这些都是可以由我们自定义的。</li></ul></li><li>如果 hosts 与本地 DNS 解析器缓存都没有相应的网址映射关系，首先会找 TCP/IP 参数中设置的首选 DNS 服务器（比如谷歌通用 DNS 地址 8.8.8.8），我们叫它本地 DNS 服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析。</li><li>如果要查询的域名，由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析。</li><li>如果仍然没有找到的话， 本地 DNS 会发出一个请求到 <strong>ISP DNS 缓存服务器（互联网服务提供商，如电信，你用的是哪一家的网）</strong>进行递归查询.</li><li>如果仍然没有找到，就会去根域名进行查询，根域名服务器全球只有十三台。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com）服务器 IP 告诉本地 DNS 服务器。</li><li>顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的 IP 地址告诉本地 DNS 服务器。</li><li>主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录。</li><li>找到会将结果缓存起来， 同时返回结果给客户端.</li></ul><p>从客户端到本地<code>DNS</code>服务器是属于递归查询，而<code>DNS</code>服务器之间就是的交互查询就是迭代查询。</p><p><strong>资料借鉴：</strong> <a href="https://www.zhihu.com/question/23042131" target="_blank" rel="noopener">DNS 解析的过程是什么，求详细的？</a></p><h2 id="TCP-IP-连接"><a href="#TCP-IP-连接" class="headerlink" title="TCP/IP 连接"></a>TCP/IP 连接</h2><blockquote><p>世界上几乎所有的 HTPP 通信都是由 TCP/IP 承载的，TCP/IP 是全球计算机及网络设备都在使用的一种常用的分组交换网络分层。 HTTP 的连接实际上就是 TCP 连接以及其使用规则。 –《HTTP 权威指南》</p></blockquote><p>紧接着，浏览器拿到 IP 地址后， 浏览器获取 URL 的端口（每个协议都有默认的端口号，比如 http 默认端口就为 80.），URL 中没有则获取协议的默认端口。</p><p>随即浏览器发起 TCP 连接请求：</p><ul><li>创建新的套接字（socket）.</li><li>浏览器发起到 120.41.39.47:443(掘金主页 IP 及端口) 的连接.<ul><li>建立一条新的 TCP 连接时， TCP 软件会进行交换一系列的 IP 分组，对连接的有关参数进行沟通.<br>a1). 首先浏览器会发送一个小的 TCP 分组，这个分组设置了一个特殊的 <strong>SYN</strong> 标记，用来表示这是一条连接请求，然后等待服务端的回应.<br>a2). 服务器接受了连接后， 会对一些连接参数进行计算，并向客户端传回个 TCP 分组，这分组中包含有 <strong>SYN</strong> 和 <strong>ACK(确定字符)</strong> 标记，说明请求已经成功建立.<br>a3). 如果浏览器迟迟没有收到 ACK 标记时， 可能会重新发送一个请求。如果 收到后，则会向服务器回送一条 ACK（确认信息），将完整的请求头发送出去.</li></ul></li><li>服务器读取请求后，对 HTTP 请求进行处理.</li><li>判断请求是否合理合法，合理的话就执行所请求的动作，并将数据写回客户端.</li></ul><img src="/blog/2018/04/06/URL-to-browser/anima-2.gif" title="访问掘金首页"><p>在输入网址后，浏览器向服务端发起请求，服务端先是返回一个<code>doc</code>类型的<code>HTML</code>文件回来，浏览器解析文档时，再一次根据文档里的(link 或者 script 标签)进一步请求外部资源（详情放在下面再说）.<br>我们可以在<strong>Network</strong>上看到，浏览器将请求发出去后，请求的<code>status</code>会变为<code>pending</code>，这也是上面说到开始建立连接请求的第一步，正在等待服务器的回应。随即我们点进请求详情内，可以发现请求头只有少量的字段。<br>我们再打开一个请求状态（status）为 200 的请求，就能看到完整的请求头以及服务端传回来的响应了.</p><h2 id="渲染文档"><a href="#渲染文档" class="headerlink" title="渲染文档"></a>渲染文档</h2><p>接着上面的问题， 浏览器开始解析页面。不过不同的浏览器引擎渲染过程都不太一样，这里姑且先说说<code>webkit内核</code>的渲染方式.</p><ul><li>首先浏览器的HTML解释器（HTML Parser）先工作，它将HTML的标签解析为DOM树。（DOM树构建）.<ul><li>如果遇到了<code>&lt;script&gt;</code>标签则会停止解析文档，这是因为JavaScript中可能会带有<code>document.write</code>方法，可能会重写页面的结构，因此浏览器会等待<code>script</code>标签下载完毕并执行后才会继续解析文档。</li><li>这也是著名的web开发最佳实践的规则之一的由来————将<code>&lt;script&gt;</code>放在<code>&lt;body/&gt;&gt;</code>之上，这样就不会阻塞文档解析了。</li></ul></li><li>接着css解析器（CSS Parser）会在DOM树构建完毕后开始解析css，它和DOM树一样最后解析出来的是树形结构的<strong>CSSOM</strong>（css object module，别名也要StyleRules），浏览器将解析后的样式信息保存到新建的<code>RenderStyle</code>对象中。</li><li><code>RenderStyle</code>对象被<code>RenderObject</code>类所管理和使用.</li><li>当创建RenderObject对象之后，每个对象是不知道自己的位置、大小等信息的，webkit根据盒模型来计算他们的位置、大小等信息，这个过程也被称之为回流与重绘（reflow and reflow）.</li><li>页面呈现.</li></ul><p>页面绘制的过程在下图的加载Mozilla官网动图就很好的体现了出来~</p><img src="/blog/2018/04/06/URL-to-browser/Mozilla.gif">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/04/06/URL-to-browser/banner.jpg&quot;&gt;&lt;p&gt;这其实一个很经典的一个题目啦~但其涉及知识面之广，却值得一说。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详解图片的加载方式</title>
    <link href="https://anran758.github.io/blog/2018/03/24/loading-pictures/"/>
    <id>https://anran758.github.io/blog/2018/03/24/loading-pictures/</id>
    <published>2018-03-24T06:02:50.000Z</published>
    <updated>2018-03-24T13:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/03/24/loading-pictures/banner.png"><p>[大图预警，流量慎入！] 我们在浏览页面获取信息时, 细心的你可能会留意到, 不同网页的图片可能有不同的加载方式. 那么究竟是由什么决定图片的加载方式的呢? 然后不由的陷入了沉思(.jpg), 所谓耳听为虚, 就让自己来动手操作一下吧~</p><a id="more"></a><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><p>目前所知的图片加载方式主要有两种: 一种是<strong>线性加载</strong>, 而另一种则是<strong>渐进式加载</strong>.</p><p><strong>线性加载</strong>其实我们已经很熟悉啦, 图片的加载方式由上至下, 一点一点的加载的方式. 同时也是最常见的方式. 如下为例:</p><img src="/blog/2018/03/24/loading-pictures/anima-1.gif"><p><strong>渐进式</strong>则如同名字一般, 它会先显示低分辨率的近似图像, 再逐步的增加图片分辨率(模糊到清晰). 这里容我卖个关子, 不上示例图先.</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>那么到底是什么决定了图片的加载方式呢? 事实上, 加载方式在作图的时候就已经被定下来了.</p><p>比如在 Photoshop 中, 我们使用快捷键<code>ctrl + shift + alt + s</code>, 弹出储存为 Web 所用格式, 再选择<code>jpeg</code>格式后能看到下面有一个<strong>连续</strong>的选项(悬浮提示以多条路径下载), 这个选项的背后就是一个算法的接口，默认是不勾选的。渐进式使用的是小波变换, 而默认线性加载则是离散余弦变化算法. (关于算法的问题已经超出了本文的讨论范围, 这里姑且不谈.)</p><img src="/blog/2018/03/24/loading-pictures/img-1.jpg" title="Photoshop 界面"><p>浏览器在加载页面的时候, 读取图片的压缩算法, 再根据不同的压缩算法来选择相应的渲染算法.</p><h2 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h2><p>嗯, 看似很有道理的样子呢, 那实际效果如何呢? 来动手测试一下: 我准备了两张相同内容但不同加载方式的图片. 将控制台打开, 设置一个比较差的网速来对比两张图片的加载情况.</p><img src="/blog/2018/03/24/loading-pictures/diff-1.gif" title="jpg格式下, 两张图片加载对比"><p>what? 怎么好像跟想象中的有所出入? 仔细一瞧, 图一虽然从上至下的加载, 但同时它的清晰度也跟着变化. 而图二则没有这种的效果.</p><p>随后我想到了文件大小的限制的问题, 为了了解更详细加载过程, 我再次准备了两张<code>png</code>的格式, 只不过在ps上<code>png</code>格式需要勾选的选项变成是<strong>交错</strong>, 然后再次进行试验:</p><img src="/blog/2018/03/24/loading-pictures/diff-2.gif" title="png格式下, 两张图片加载对比"><p>啊哈… 由于图片本身也挺大的, 在这加载期间两者之间差距就体现出来了 —— 原来前面那只是因为算法前期结构的构建. 细心的同学还会看到, 虽然图一看上去最先加载完了图片, 但控制台里跳动<code>Size</code>和<code>Time</code>还在告诉我们, 浏览器仍然还没有下载渲染完这张图片, 安静的等待渲染完毕后, 你可能还会惊讶的发现: 什么? 图一竟然比图二还加载的时间还长一点?</p><p>是的, 得益于渐进式逐步加载的算法, 人们在视觉上会感觉渐进式相比线性更快一些, 虽然实际加载的时间可能还会长点, 但用户体验的确是上去.</p><p>然而并非所有浏览器都支持渐进式加载, 翻阅了一下资料, 发现早期张鑫旭dalao也写过类似的内容, 也可以参考一看: <a href="http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/" target="_blank" rel="noopener">渐进式jpeg(progressive jpeg)图片及其相关</a></p><h2 id="JavaScript的渐进式"><a href="#JavaScript的渐进式" class="headerlink" title="JavaScript的渐进式"></a>JavaScript的渐进式</h2><p>前文介绍渐进式的时候卖了个关子, 没上示例图是为啥呢~ 这是因为此物非彼物, 我们常看到的渐进式加载可能不是由图片本身算法的效果, 为了避免混淆才暂时不上. 文章看到这里, 有过开发经验的同学就会明白, 若真有这种需求, 我们总不能祈祷全部用户上传图片都是渐进式的吧, 这也不现实.</p><p>google 图片就是使用<code>javascript</code>来操作图片的渐进式. 在点击查看大图的时候, 预先加载一个缩略图, 同时图片底布有一条loading的效果. 加载完毕后就显示清晰的图片, 并且将 loading 隐藏起来. 我在控制台研究了一段时间, 没研究出具体的实现手法. 知道的dalao也不妨留言, 交流一下~</p><img src="/blog/2018/03/24/loading-pictures/google-1.gif" title="png格式下, 两张图片加载对比"><p>至于知乎的渐进式加载图片, 已经有知友分析过了, 实现方式跟我上一篇文章讲的东西思路也有相似之处, 只不过是针对方向不同~ 有兴趣的可以移步知友的回答: <a href="https://www.zhihu.com/question/55622930/answer/145475243" target="_blank" rel="noopener">新版知乎加载图片时从模糊到清晰的这个效果是如何做出来的？ - Tw93的回答</a></p><hr><p>最后如果有什么说的不对的或者, 欢迎dalao们指出批评~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/03/24/loading-pictures/banner.png&quot;&gt;&lt;p&gt;[大图预警，流量慎入！] 我们在浏览页面获取信息时, 细心的你可能会留意到, 不同网页的图片可能有不同的加载方式. 那么究竟是由什么决定图片的加载方式的呢? 然后不由的陷入了沉思(.jpg), 所谓耳听为虚, 就让自己来动手操作一下吧~&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="https://anran758.github.io/blog/categories/other/"/>
    
    
      <category term="image" scheme="https://anran758.github.io/blog/tags/image/"/>
    
      <category term="Photoshop" scheme="https://anran758.github.io/blog/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>关于移动端GIF动图逐个播放的思路</title>
    <link href="https://anran758.github.io/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>https://anran758.github.io/blog/2018/03/11/关于前台GIF动图逐个播放的思路/</id>
    <published>2018-03-11T13:23:23.000Z</published>
    <updated>2019-08-04T09:10:39.275Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/03/11/关于前台GIF动图逐个播放的思路/banner.png" class="lazy"><p>最近碰到了一个需求, 大致是移动端有一个提示页, 在页面中会四个GIF图, 连起来像一个”小视频”一样, 用来展示商品的步骤.</p><p>但是四个GIF一起播放的话, 那么用户体验就自然没有那么好啦. 我仔细的想了想, 想到了微博的GIF图好像就是一张一张播放的, 那么我们前端有没有办法也实现这个逐个播放的功能呢…</p><a id="more"></a><hr><p>事实上, 浏览器并没有给我们提供控制GIF的API(据说曾经好像有, 但因为用户体验的问题被废除了, 关于这点我没有去考证过), 我们无法得知这个动画是否已经结束了, 或者控制它的播放和停止.</p><p>网上并没有太多关于这方面的资料, 不过张鑫旭dalao的<a href="http://www.zhangxinxu.com/wordpress/2015/12/css3-animation-js-canvas-gif-pause-stop-play/" target="_blank" rel="noopener">这篇文章</a>. 其中一个方法给我一个思路 —— 虽然<code>img</code>并没有这种事件, 但是我们可以使用canvas做替换呀.</p><p>说干就干, 这里借鉴dalao的代码, 对<code>HTMLImageElement</code>(可以用来操纵<code>&lt;img&gt;</code>元素的布局和图像)的原型作扩展, 增加两个方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">'getContext'</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)) &#123;</div><div class="line"></div><div class="line">  <span class="comment">// 扩展播放功能</span></div><div class="line">  HTMLImageElement.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.storeCanvas) &#123;</div><div class="line">      <span class="comment">// 移除存储的canvas</span></div><div class="line">      <span class="keyword">this</span>.storeCanvas.parentElement.removeChild(<span class="keyword">this</span>.storeCanvas);</div><div class="line">      <span class="keyword">this</span>.storeCanvas = <span class="literal">null</span>;</div><div class="line">      <span class="comment">// 透明度还原</span></div><div class="line">      <span class="keyword">this</span>.style.opacity = <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.storeUrl) &#123;</div><div class="line">      <span class="keyword">this</span>.src = <span class="keyword">this</span>.storeUrl;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 扩展停止功能</span></div><div class="line">  HTMLImageElement.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">    <span class="keyword">let</span> width = <span class="keyword">this</span>.width;</div><div class="line">    <span class="keyword">let</span> height = <span class="keyword">this</span>.height;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (width &amp;&amp; height) &#123;</div><div class="line">      <span class="comment">// 存储图片链接</span></div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.storeUrl) &#123;</div><div class="line">        <span class="keyword">this</span>.storeUrl = <span class="keyword">this</span>.src;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// canvas 和图片相同宽高</span></div><div class="line">      canvas.width = width;</div><div class="line">      canvas.height = height;</div><div class="line">      canvas.getContext(<span class="string">'2d'</span>).drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">      <span class="comment">// 重置当前图片</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">this</span>.src = canvas.toDataURL(<span class="string">"image/gif"</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// 跨域, 这时画布被污染</span></div><div class="line">        <span class="keyword">this</span>.removeAttribute(<span class="string">'src'</span>);</div><div class="line">        canvas.style.position = <span class="string">'absolute'</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 插入图片</span></div><div class="line">        <span class="keyword">this</span>.parentElement.insertBefore(canvas, <span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.style.opacity = <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">this</span>.storeCanvas = canvas;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为前台并没有我们想要操作图片的事件, 因此无法得知gif能持续多少秒, 这点只能由服务端来判断. 所幸这次情况没有那么复杂, 我们不需要适配随机的GIF. 就根据我们手头的动图计算有多少帧, 查看得知每个GIF播放时间都为3s. 再使用定时器的方式去调用方法, 为了防止用户没看清GIF的动作, 因此在定时器时间上再翻了一倍.</p><p>页面代码大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- .split-line End --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"body-title"</span>&gt;</span>观影指南<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-tips"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-line clearfix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-1.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1.坐上座椅，系好安全带<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-2.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>2.于右手边取眼镜佩戴，并带上耳机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-line clearfix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-3.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>3.按下扶手上的按钮，开始观影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-4.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-4"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>4.如感不适，长按按钮停止观 影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- .body-tips End --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>首先选择全部目标GIF, 使其暂停(初始化). 紧接着包装一下定时器用函数调用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意这里是 ES6 的写法</span></div><div class="line"><span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.tips-img img'</span>)</div><div class="line"><span class="keyword">let</span> palyTimer = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">palyGif</span> (<span class="params">num = <span class="number">0</span></span>) </span>&#123;</div><div class="line">  clearTimeout(palyTimer)</div><div class="line">  images[num].play()</div><div class="line"></div><div class="line">  <span class="comment">// 递归</span></div><div class="line">  palyTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    images[num].stop()</div><div class="line">    num = (images.length - <span class="number">1</span> &lt;= num) ? <span class="number">0</span> : ++num</div><div class="line">    images[num].play()</div><div class="line">    <span class="keyword">return</span> palyGif(num)</div><div class="line">  &#125;, <span class="number">6000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 初始化</span></div><div class="line">images.forEach(<span class="function"><span class="params">img</span> =&gt;</span> img.addEventListener(<span class="string">'load'</span>, img.stop, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;))</div><div class="line"><span class="comment">// 函数提升, 将其推向下一队列</span></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> palyGif(), <span class="number">50</span>);</div></pre></td></tr></table></figure><p>仅仅几行代码留实现我们想要的效果啦(图片压了下):</p><img src="/blog/2018/03/11/关于前台GIF动图逐个播放的思路/anima-1.gif"><hr><p>至于微博那种逐个播放的效果, 我原本想在控制台研究一下它实现的原理. 但仔细一看, 发现微博动图在手机客户端和非客户端上的效果是不一样的. 也就是说在安卓客户端上的确逐个播放, 但是在手机网页上却是一起播放, 并没有实现这个功能, PC页面同理, 因此推测并不是使用js实现的.</p><p>最后各位看官如果有什么好的想法的话, 可以留个言一起交流一下呗~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/03/11/关于前台GIF动图逐个播放的思路/banner.png&quot; class=&quot;lazy&quot;&gt;&lt;p&gt;最近碰到了一个需求, 大致是移动端有一个提示页, 在页面中会四个GIF图, 连起来像一个”小视频”一样, 用来展示商品的步骤.&lt;/p&gt;&lt;p&gt;但是四个GIF一起播放的话, 那么用户体验就自然没有那么好啦. 我仔细的想了想, 想到了微博的GIF图好像就是一张一张播放的, 那么我们前端有没有办法也实现这个逐个播放的功能呢…&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://anran758.github.io/blog/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://anran758.github.io/blog/tags/javascript/"/>
    
      <category term="gif" scheme="https://anran758.github.io/blog/tags/gif/"/>
    
      <category term="canvas" scheme="https://anran758.github.io/blog/tags/canvas/"/>
    
      <category term="移动端" scheme="https://anran758.github.io/blog/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>聊聊常见的跨域问题</title>
    <link href="https://anran758.github.io/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://anran758.github.io/blog/2018/03/04/聊聊常见的跨域问题/</id>
    <published>2018-03-04T12:44:55.000Z</published>
    <updated>2018-03-08T13:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/03/04/聊聊常见的跨域问题/banner.jpg"><p>跨域是前端工程中一个很常见的问题啦. 今天就来聊一聊跨域, 以及常见的处理方式和原理.<br><a id="more"></a></p><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h2><p>跨域实际上源于浏览器对javascript的一种安全限制(也被称之为同源策略). 默认情况下, 我们只能访问同一协议、同一域名、同一端口下的资源. 如今都是提倡前后分离的情况下, 前端更是需要调用大量后台接口的场景, 因此解决跨域的问题就摆在了面前.</p><h2 id="产生跨域的原因"><a href="#产生跨域的原因" class="headerlink" title="产生跨域的原因"></a>产生跨域的原因</h2><p>产生跨域的原因我们主要归为这两点:</p><ol><li>浏览器安全限制(不能读取不同域、端口、协议下的内容)</li><li>使用的是XHR(XMLHttpRequest)请求</li></ol><p>同源策略这个原因是众所周知了, 它作为一个安全策略, 的确有效预防了某些安全上的问题. 但同时又阻止了大量适合使用的跨域请求. 而 XHR 也受同源策略影响: 浏览器不允许 javascript 查找跨域文档的内容. 使用 XHR, 文档内容都是通过<code>responseText</code>属性暴露, 因此同源策略不允许 XHR 进行跨域请求.</p><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><p>跨域很多情况下都需要后端的配合, 因此主要先来谈谈前端的跨域方案.</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>前文我们说过, 产生跨域的原因之一XHR请求, 但是<code>script</code>发出的请求类型(type)并不是<code>xhr</code>, 因此可以解决跨域的问题.</p><p>JSONP 由回调函数和数据组成的, 实现方式就是动态创建一个<code>&lt;script&gt;</code>标签, 然后设置<code>src</code>属性指向的跨域的URL(包涵请求参数). 来向服务端请求数据.</p><p>比如我们要查询小明的信息, 这时我们得知它的<code>userID</code>为 1150, 同时我们都知道GET请求可以通过url进行传参, 因此我们向服务器发起请求:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</div><div class="line">script.src = <span class="string">"https://www.example.com/users?user_id=1150"</span></div><div class="line"><span class="built_in">document</span>.body.appendChild(script)</div></pre></td></tr></table></figure><p>在插入<code>&lt;script&gt;</code>标签到<code>&lt;body&gt;</code>后, 浏览器立马就去请求服务器的资源. 值得注意的是, 使用<code>jsonp</code>也需要服务端的配合. 因此必须通过某种方式来告知服务端, 我们正在通过<code>&lt;script&gt;</code>标签调用请求, 必须返回一个JSONP响应, 而不应该是普通JSON响应.</p><p>至于什么叫<code>jsonp</code>响应呢? 这里其实很好理解.. 假设后端发回来的是<code>json</code>格式的数据, 我们也用不了呀, 数据还是数据, 不会做任何变化.. 为了让浏览器可以在<code>&lt;script&gt;</code>标签里直接使用, 我们需要让服务端返回一段js代码 —— 用函数包装的json的形式(这也jsonp中”P(padding)”的含义). 这个函数名前后端可约定. 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端返回 js 代码到 &lt;script&gt;里</span></div><div class="line">userData(&#123;<span class="string">'naem'</span>:<span class="string">'小明'</span>,<span class="string">'id'</span>:<span class="number">1150</span>,<span class="string">'level'</span>:<span class="string">'中等'</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 前端定义函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">userData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// 当 jsonp 请求成功后, 将json传入函数并调用, 我们拿到 json 后就可以做一些其他的事</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们来拿B站为例. 打开chrome下的network, 上图就是<code>jsonp</code>的应用, 服务端返回的js脚本. 下图可以发现, 我们发出去的请求类型是<code>script</code>, 验证了前文所说的<code>&lt;script&gt;</code>不受同源策略影响的.</p><img src="/blog/2018/03/04/聊聊常见的跨域问题/img-1.jpg"><p>目前主流的类库都对<code>jsonp</code>进行了封装, 如<code>JQuery</code>的<code>getJSON</code>和<code>ajax</code>, 这里就不深入讲解了. 最后对<code>jsonp</code>总结一下:</p><p><code>jsonp</code>实际上是一个非正式传输协议, 或者说是一种”投机取巧”的方式. 我们可以利用<code>&lt;script&gt;</code>的特性从而进行数据交互解决跨域的问题. 相对来说, 它也有一定的局限性: 只能应用在GET请求上, 除此之外还有安全性的问题 —— 只能用在我们信任的服务端, 因为你不能保证对方未来会给你传些什么…</p><h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>说完了”不正规”的<code>jsonp</code>, 紧接着我们再说说原生的<code>CORS</code>规范. 我们先来看看官方的定义:</p><p><strong>CORS(Cross-origin resource Sharing, 跨资源共享)</strong>, 定义了访问跨域资源时, 浏览器和服务器应该如何沟通. 其背后主要思想就是<strong>使用自定义的HTTP头部</strong>来让浏览器与服务器进行沟通, 从而决定请求或相应是否成功, 还是应该失败.</p><p>目前主流的浏览器都已经对CORS有着良好的支持, 而IE8 ~ 9则还需要使用专用的<code>XDomainRequest</code>这里我们抛开不谈.</p><img src="/blog/2018/03/04/聊聊常见的跨域问题/img-2.png"><p>这个功能实际上是由浏览器自动完成的, 我们并不需要做什么额外的工作. 对于开发者来说, 也就需要了解一些安全细节的问题, 这一点我们放在后面讲.</p><h4 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h4><p>浏览器发送CORS请求时, 会将请求分为<strong>简单请求</strong>与<strong>非简单请求</strong>.</p><p>在我们日常工作中, 常用的<strong>简单请求</strong>可以将其归为以下几点:</p><ul><li>使用的方法(Methods)为<code>HEAD</code>、<code>GET</code>、<code>POST</code></li><li>请求头无自定义头</li><li><code>Content-Type</code>只能是以下几种<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p><strong>非简单请求:</strong></p><ul><li><code>PUT</code>, <code>Delete</code> 方法的 ajax 请求</li><li>发送 JSON 格式的 ajax 请求(比如post数据)</li><li>带自定义头的 ajax 请求</li></ul><p>如果是简单请求, 则会<strong>先执行, 后判断</strong>。执行的过程大致如下:</p><p>浏览器发起请求检测到是 CORS 请求, 然后添加一个<code>origin</code>字段(其中包含页面源信息: 协议、域名、端口) =&gt; 服务端收到后作相应的处理(对比<code>origin</code>, 服务端判断这个源是否接受)返回结果给浏览器 =&gt; 浏览器检查响应头是否允许跨域信息 =&gt; 允许, 那就当做没事发生. 不允许, 浏览器抛出相应的错误信息(值得一提的是, 这时状态码也还有可能是200).</p><p>非简单请求执行顺序又有些不同. 在发生 CORS 请求时, 浏览器预先发送一个<code>option</code>请求. 浏览器这种行为被称之为<strong>预检请求(Preflighted request)</strong>. 其中包含如下的请求头:</p><ul><li>origin: 同上，包含页面源信息.</li><li>Access-Control-Request-Methods: 请求方法</li><li>Access-Control-Request-Header: 自定义头部信息, 多个头部以逗号分隔(可选, 看请求时有没有定义请求头)</li></ul><p>举个栗子, 我们用JQuery发送一段JSON格式的请求做演示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result;</div><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">type</span> : <span class="string">"post"</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">"https://www.example/api/rank"</span>,</div><div class="line">  <span class="attr">contentType</span> : <span class="string">"application/json;charset=utf-8"</span>,</div><div class="line">  <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">"something"</span>&#125;),</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">    result = json;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这时请求头(Request Headers)信息如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Accept: */*</div><div class="line">Accept-Encoding: gzip, deflate, br</div><div class="line">Accept-Language: zh-CN,zh;q=0.9</div><div class="line">Access-Control-Request-Header: content-type</div><div class="line">Access-Control-Request-Methods: POST</div><div class="line">Connection:keep-alive</div><div class="line">Host: https://www.example.com</div><div class="line">origin: localhost:8080</div><div class="line">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1</div></pre></td></tr></table></figure><p>服务端接收到预检请求后, 判断是否允许这种类型的请求. 在响应头(Response Header)上返回如下头部与浏览器进行交流:</p><ul><li>Access-Control-Allow-Origin: 服务端允许的源信息</li><li>Access-Control-Allow-Methods: 服务端允许的方法, 多个方法可以使用顿号分隔</li><li>Access-Control-Allow-Headrs: 服务端允许的头部, 多个头部可以使用顿号分隔</li></ul><p>当预检请求被通过后, 我们原本想要发送的请求才会发送出去.</p><p>另外, 细心的你或许已经注意到了, 非简单请求这一来一回需要发送两次请求, 如果频率高的情况下岂不是很费性能又影响效率? 所幸的是HTTP协议新增(IE10+)了一个响应头用于缓存预检请求. 服务端在响应头添加如下字段:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Access-Control-Max-Age</span>: 3600</div></pre></td></tr></table></figure><p>这个响应头表示这个预检请求可以缓存多长时间, 单位为秒. 这里3600s = 1h, 也就是说一个小时内可以不用再发预检命令了.</p><h4 id="带-cookie-的跨域请求"><a href="#带-cookie-的跨域请求" class="headerlink" title="带 cookie 的跨域请求"></a>带 cookie 的跨域请求</h4><p>默认情况下, 跨域请求是不带上 cookie 的. 前端需要将<code>withCredentials</code>属性设置为<code>true</code>, 同时还需要服务端设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>启动 cookie. 如果在发送 cookie 的时候, 浏览器检测到服务端响应头没有这个头部, 那么就会在控制台抛出一个错误.</p><p>另外, 还有一个值得注意的是. 服务端响应头设置了<code>Access-Control-Allow-Origin: *</code>的话, 是不能满足带 cookie 的跨域请求的. 因此有这种场景不能使用通配符, 需要全匹配字段.</p><h4 id="CORS-总结"><a href="#CORS-总结" class="headerlink" title="CORS 总结"></a>CORS 总结</h4><p>简单总结一下 CORS. CORS的出现也是为了解决跨域的问题. 只不过和<code>JSONP</code>不同, 它是纳入规范的一部分, 它几乎支持所有的类型的HTTP请求(JSONP只能使用GET). 唯一美中不足的也就是兼容性的问题, 因此可以使用JSONP作向下的兼容</p><p>事实上前端在 CORS 上并没有多少可操作的余地, 主要的还是浏览器来处理、服务端在设置, 但是并不代表我们就不需要了解这些知识啦.</p><hr><p>嗯, 其他的跨域方法先挖个坑..</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/03/04/聊聊常见的跨域问题/banner.jpg&quot;&gt;&lt;p&gt;跨域是前端工程中一个很常见的问题啦. 今天就来聊一聊跨域, 以及常见的处理方式和原理.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VSCode: 从零开始配置前端环境</title>
    <link href="https://anran758.github.io/blog/2018/02/06/VSCode-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/"/>
    <id>https://anran758.github.io/blog/2018/02/06/VSCode-从零开始配置前端环境/</id>
    <published>2018-02-06T13:41:18.000Z</published>
    <updated>2018-02-10T14:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/banner.png"><p>我们在进行开发工作时，选择一个顺手好用的IDE是必不可免的, 其中vscode就是一个很好的选择. 它能让你大部分的工作都在编辑器内完成, 大大的提高开发效率~ 本文将会从零开始搭建一个基础的前端开发环境.</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>vscode有着自己的插件商城, 并且有成熟良好的生态圈, 足够满足我们日常开发的所需的东西. 同时vscode提供了很多便捷的自定义配置，还很贴心的给每行设置都加上了备注.</p><p>除此之外，vscode对中文的支持也挺好，对于啃英语有些吃力的同学会比较友善(虽然作为一个程序员, 英语的学习也很重要呀~).</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/img-1.jpg"><p>另外vscode内置git管理系统, 也就是说我们在写完代码后无需再另开一个bash来提交代码, 直接编辑器上完成审阅代码差异, 提交代码这些工作. 还可以直接在编辑器上进行代码调试, 不过这些不在本文的讨论中.</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai" target="_blank" rel="noopener">One Monokai Theme</a></p><p>我们每天在跟编辑器打交道, 因此编辑器的颜值也是很重要的~ 在扩展商城里, 我们可以去挑选一些自己喜欢的主题, 让我们在coding时变得更加舒服. 目前笔者使用的<code>One Monokai</code>, 它的一些配色和主题个人还是蛮喜欢的. 同学们也可以去尝试其他的主题~</p><p>但值得注意的是, 下载主题后还需要<code>用户设置</code>上设置使用的主题.</p><h2 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h2><p>善用插件的力量能很大的提升我们的开发效率. 下面是一些自己常用插件跟大家分享一下.</p><p><strong>其他编辑器的快捷键</strong><br>如果你觉得换一个编辑器又要重新设置自己熟悉的快捷键(或者说记住vscode本身的快捷键)很麻烦的话, 没关系~ vscode为你准备了其他编辑器快捷键插件, 节省你宝贵的时间成本. 笔者曾经也是从 sublime 无障碍转向 vscode 从此一去不复返~</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/img.png"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=coderfee.open-html-in-browser" target="_blank" rel="noopener">Open-In-Browser</a></strong><br>由于 VSCode 没有提供直接在浏览器中打开文件的内置界面，所以此插件在快捷菜单中添加了在默认浏览器查看文件选项. 在windows下, 可以使用快捷键<code>Alt + b</code>快速的打开.</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-1.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek" target="_blank" rel="noopener">CSS Peek</a></strong><br>使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-2.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a></strong><br>Prettier 是目前 Web 开发中最受欢迎的代码格式化程序。安装了这个插件，它就能够自动应用 Prettier，并将整个 JS 和 CSS 文档快速格式化为统一的代码样式。</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-3.gif"><p><em><a href="https://marketplace.visualstudio.com/items?itemName=cssho.vscode-svgviewer" target="_blank" rel="noopener">SVG Viewer</a></em><br>前端开发中, 无可避免会遇到查看svg的地方, 这时这个插件就能配上了用场.</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-4.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.minify" target="_blank" rel="noopener">Minify</a></strong><br>这是一款用于压缩合并 JavaScript 和 CSS 文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为.min文件的选项。它能够分别通过 uglify-js、clean-css 和 html-minifier，与 JavaScript、CSS 和 HTML 协同工作。</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-5.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a></strong><br>这个扩展是为XML，PHP，Vue，JavaScript，TypeScript，JSX，TSX等其他语言启用的。同时它是可配置的。输入标签的右括号后，结束标签将被自动插入。</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-6.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a></strong><br>自动重命名配对的<code>HTML / XML</code>标记, 这在修改标签名上一点挺便捷的.</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-7.gif"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets" target="_blank" rel="noopener">JavaScript (ES6) code snippets</a></strong><br>es6已经是经常运用在我们的项目中了, 该扩展包含用于 Vscode 编辑器的ES6语法的JavaScript代码片段.（同时支持JavaScript和TypeScript）。</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a></strong><br>嘿, 要养成一个良好的编程习惯, ESLint就是一个不错的选择. 它会根据某种风格来纠正你的不好的习惯. 值得注意的是, 使用的话需要在全局安装有<code>ESlint</code></p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noopener">EditorConfig</a></strong><br>Editor Config 可以让你团队开发时统一约定好一种规范. 这个主流的编辑器都支持.</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noopener">Vetur</a></strong><br>格式化, 格式化<code>.vue</code>文件, 官方维护.</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets" target="_blank" rel="noopener">Vue 2 Snippets</a></strong><br>这个插件基于最新的<code>Vue</code>官方语法高亮文件添加了Syntax Highlight<code>, 并且依据</code>Vue 2<code>的 API 添加了</code>Code Snippets`. 挺不错的一个扩展.</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/img-3.png"><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus" target="_blank" rel="noopener">language-stylus</a></strong></p><p>stylus语法高亮, 还有其他的预处理器的插件这里不展开讲.</p><img src="/blog/2018/02/06/VSCode-从零开始配置前端环境/anima-8.gif"><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><p>分享一下自己目前的配置, 可以根据项目所需或者自己的习惯进行调整.</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "workbench.colorTheme": "One Monokai",</div><div class="line">    "sublimeTextKeymap.promptV3Features": true,</div><div class="line">    // 编辑器</div><div class="line">    "editor.multiCursorModifier": "ctrlCmd",</div><div class="line">    "editor.snippetSuggestions": "top",</div><div class="line">    "editor.renderWhitespace": "all",</div><div class="line">    "editor.formatOnPaste": true,</div><div class="line">    "editor.wordWrap": "on",</div><div class="line">    "editor.fontSize": 12,</div><div class="line">    "editor.tabSize": 2,</div><div class="line">    // 文件资源管理</div><div class="line">    "explorer.confirmDragAndDrop": false,</div><div class="line">    "explorer.confirmDelete": false,</div><div class="line">    // 终端</div><div class="line">    "terminal.integrated.cursorBlinking": true,</div><div class="line">    "terminal.integrated.cursorStyle": "line",</div><div class="line">    "emmet.includeLanguages": &#123;</div><div class="line">        "vue-html": "html"</div><div class="line">    &#125;,</div><div class="line">    // 文件</div><div class="line">    "files.eol": "\n",</div><div class="line">    "files.associations": &#123;</div><div class="line">        "*.vue": "vue"</div><div class="line">    &#125;,</div><div class="line">    // 窗口</div><div class="line">    "window.zoomLevel": 1,</div><div class="line">    // 使用 vscode-typescript 来整理代码</div><div class="line">    "vetur.format.defaultFormatter.js": "vscode-typescript",</div><div class="line">    "vetur.format.defaultFormatter.ts": "vscode-typescript",</div><div class="line">    "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</div><div class="line">    // 可能是让 CPU 炸了的罪魁祸首</div><div class="line">    "search.followSymlinks": false,</div><div class="line">    "html.format.extraLiners": ""</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上促使自己写这篇文章的源头, 仅仅是因为某个不可抗拒的因素, 导致系统重装.. 重装环境简直让人绝望呀~ 因此借着这个机会基础一下, 如果有遗漏哪个部分, 后来还会继续加进来吧~</p><p><strong>参考链接</strong><br><a href="https://zhuanlan.zhihu.com/p/27905838" target="_blank" rel="noopener">精选！15 个必备的 VSCode 插件（前端类）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/02/06/VSCode-从零开始配置前端环境/banner.png&quot;&gt;&lt;p&gt;我们在进行开发工作时，选择一个顺手好用的IDE是必不可免的, 其中vscode就是一个很好的选择. 它能让你大部分的工作都在编辑器内完成, 大大的提高开发效率~ 本文将会从零开始搭建一个基础的前端开发环境.&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="https://anran758.github.io/blog/categories/tools/"/>
    
    
      <category term="tools" scheme="https://anran758.github.io/blog/tags/tools/"/>
    
      <category term="vue" scheme="https://anran758.github.io/blog/tags/vue/"/>
    
      <category term="vscode" scheme="https://anran758.github.io/blog/tags/vscode/"/>
    
      <category term="环境配置" scheme="https://anran758.github.io/blog/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
