<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>usake - 实验台</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-31T15:26:55.507Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Anron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git emoji使用指南</title>
    <link href="http://yoursite.com/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/12/31/Git-emoji使用指南/</id>
    <published>2017-12-31T15:17:37.000Z</published>
    <updated>2017-12-31T15:26:55.507Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/31/Git-emoji使用指南/banner.png"><p>emoji源于日语词汇“絵文字”, 想必大家对它都挺熟悉的吧, 其拟人化的生动形象，已经成为当下流行的表情之一. 接下来讲一下如何规范的在<code>git</code>中使用emoji提高我们项目的可读性吧~<a id="more"></a></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>在<code>git commit</code>上加入emoji的二进制符号, 格式为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:emoji1: :emoji2: 本次提交的主要内容</div></pre></td></tr></table></figure></p><p>如初次提交:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"<img class="github-emoji" style="" title="tada" alt="tada" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7" height="20" width="20"> Initialize Repo"</span></div></pre></td></tr></table></figure></p><h4 id="相关规范"><a href="#相关规范" class="headerlink" title="相关规范"></a>相关规范</h4><p>emoji 表情在提交代码的时候也不能乱用，否则容易造成误解. 因此开源项目<a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">gitmoji</a>专门规定了在 github 提交代码时应当遵循的 emoji 规范：</p><table><thead><tr><th style="text-align:left">emoji</th><th style="text-align:left">emoji代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><img class="github-emoji" style="" title="tada" alt="tada" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;tada&quot; alt=&quot;tada&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">初始提交</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="art" alt="art" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f3a8.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;art&quot; alt=&quot;art&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f3a8.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">改进代码的结构/格式</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="zap" alt="zap" src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a1.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;zap&quot; alt=&quot;zap&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/26a1.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">提高性能</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="fire" alt="fire" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f525.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;fire&quot; alt=&quot;fire&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f525.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">删除代码或文件</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="bug" alt="bug" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;bug&quot; alt=&quot;bug&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修复一个错误</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="ambulance" alt="ambulance" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f691.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;ambulance&quot; alt=&quot;ambulance&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f691.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">关键修补程序</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="sparkles" alt="sparkles" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;sparkles&quot; alt=&quot;sparkles&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">引用新功能</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="memo" alt="memo" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4dd.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;memo&quot; alt=&quot;memo&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4dd.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">编写文档</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="rocket" alt="rocket" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;rocket&quot; alt=&quot;rocket&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">部署新功能</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="recycle" alt="recycle" src="https://assets-cdn.github.com/images/icons/emoji/unicode/267b.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;recycle&quot; alt=&quot;recycle&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/267b.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">代码重构</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="lipstick" alt="lipstick" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f484.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;lipstick&quot; alt=&quot;lipstick&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f484.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">更新UI和样式文件</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="white_check_mark" alt="white_check_mark" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;white_check_mark&quot; alt=&quot;white_check_mark&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加测试</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="apple" alt="apple" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f34e.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;apple&quot; alt=&quot;apple&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f34e.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修复MacOS上的问题</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="penguin" alt="penguin" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f427.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;penguin&quot; alt=&quot;penguin&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f427.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修复Linux上的问题</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="checkered_flag" alt="checkered_flag" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f3c1.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;checkered_flag&quot; alt=&quot;checkered_flag&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f3c1.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修复Windows上的问题</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="robot" alt="robot" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f916.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;robot&quot; alt=&quot;robot&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f916.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">解决Android上的问题</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="green_apple" alt="green_apple" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f34f.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;green_apple&quot; alt=&quot;green_apple&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f34f.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">解决iOS上的问题</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="bookmark" alt="bookmark" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f516.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;bookmark&quot; alt=&quot;bookmark&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f516.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">发布/版本标签</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="rotating_light" alt="rotating_light" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a8.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;rotating_light&quot; alt=&quot;rotating_light&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a8.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">移除 linter 警告</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="construction" alt="construction" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a7.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;construction&quot; alt=&quot;construction&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a7.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">工作正在进行中</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="green_heart" alt="green_heart" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;green_heart&quot; alt=&quot;green_heart&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修复CI构建</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="arrow_down" alt="arrow_down" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2b07.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;arrow_down&quot; alt=&quot;arrow_down&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2b07.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">降级依赖关系</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="arrow_up" alt="arrow_up" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2b06.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;arrow_up&quot; alt=&quot;arrow_up&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2b06.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">升级依赖关系</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="pushpin" alt="pushpin" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4cc.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;pushpin&quot; alt=&quot;pushpin&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4cc.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">将依赖关系固定到特定的版本</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="construction_worker" alt="construction_worker" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f477.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;construction_worker&quot; alt=&quot;construction_worker&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f477.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加CI构建系统</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="chart_with_upwards_trend" alt="chart_with_upwards_trend" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4c8.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;chart_with_upwards_trend&quot; alt=&quot;chart_with_upwards_trend&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4c8.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">工作正在进行中</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="heavy_minus_sign" alt="heavy_minus_sign" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2796.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;heavy_minus_sign&quot; alt=&quot;heavy_minus_sign&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2796.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">删除依赖项</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="whale" alt="whale" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f433.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;whale&quot; alt=&quot;whale&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f433.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">关于Docker的工作</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="heavy_plus_sign" alt="heavy_plus_sign" src="https://assets-cdn.github.com/images/icons/emoji/unicode/2795.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;heavy_plus_sign&quot; alt=&quot;heavy_plus_sign&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/2795.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加一个依赖项</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="wrench" alt="wrench" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f527.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;wrench&quot; alt=&quot;wrench&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f527.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">更改配置文件</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="pencil2" alt="pencil2" src="https://assets-cdn.github.com/images/icons/emoji/unicode/270f.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;pencil2&quot; alt=&quot;pencil2&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/270f.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">修正错别字</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="hankey" alt="hankey" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a9.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;hankey&quot; alt=&quot;hankey&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a9.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">编写需要改进的不好的代码</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="rewind" alt="rewind" src="https://assets-cdn.github.com/images/icons/emoji/unicode/23ea.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;rewind&quot; alt=&quot;rewind&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/23ea.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">恢复更改</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="globe_with_meridians" alt="globe_with_meridians" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f310.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;globe_with_meridians&quot; alt=&quot;globe_with_meridians&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f310.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">国际化和本地化</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="twisted_rightwards_arrows" alt="twisted_rightwards_arrows" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f500.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;twisted_rightwards_arrows&quot; alt=&quot;twisted_rightwards_arrows&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f500.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">工作正在进行中</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="package" alt="package" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4e6.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;package&quot; alt=&quot;package&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4e6.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">更新编译的文件或包</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="alien" alt="alien" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f47d.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;alien&quot; alt=&quot;alien&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f47d.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">由于外部API更改而更新代码</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="truck" alt="truck" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f69a.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;truck&quot; alt=&quot;truck&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f69a.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">移动或重命名文件</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="page_facing_up" alt="page_facing_up" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4c4.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;page_facing_up&quot; alt=&quot;page_facing_up&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4c4.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加或更新许可证</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="boom" alt="boom" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a5.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;boom&quot; alt=&quot;boom&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a5.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">介绍突破性变化</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="bento" alt="bento" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f371.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;bento&quot; alt=&quot;bento&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f371.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加或更新资产</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="ok_hand" alt="ok_hand" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44c.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;ok_hand&quot; alt=&quot;ok_hand&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f44c.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">由于代码审阅更改而更新代码</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="wheelchair" alt="wheelchair" src="https://assets-cdn.github.com/images/icons/emoji/unicode/267f.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;wheelchair&quot; alt=&quot;wheelchair&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/267f.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">改善无障碍</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="bulb" alt="bulb" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a1.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;bulb&quot; alt=&quot;bulb&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a1.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">记录源代码</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="speech_balloon" alt="speech_balloon" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4ac.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;speech_balloon&quot; alt=&quot;speech_balloon&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f4ac.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">更新文字和文字</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="card_file_box" alt="card_file_box" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f5c3.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;card_file_box&quot; alt=&quot;card_file_box&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f5c3.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">执行与数据库相关的更改</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="loud_sound" alt="loud_sound" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f50a.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;loud_sound&quot; alt=&quot;loud_sound&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f50a.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">添加日志</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="mute" alt="mute" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f507.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;mute&quot; alt=&quot;mute&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f507.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">删除日志</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="children_crossing" alt="children_crossing" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6b8.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;children_crossing&quot; alt=&quot;children_crossing&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f6b8.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">改善用户体验/可用性</td></tr><tr><td style="text-align:left"><img class="github-emoji" style="" title="building_construction" alt="building_construction" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f3d7.png?v7" height="20" width="20"></td><td style="text-align:left"><code>&lt;img class=&quot;github-emoji&quot; style=&quot;&quot; title=&quot;building_construction&quot; alt=&quot;building_construction&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f3d7.png?v7&quot; height=&quot;20&quot; width=&quot;20&quot; /&gt;</code></td><td style="text-align:left">进行架构更改</td></tr></tbody></table><p><strong>参考资料</strong></p><p>Git emoji: <a href="https://gitmoji.carloscuesta.me" target="_blank" rel="noopener">https://gitmoji.carloscuesta.me</a><br>Github emoji列表: <a href="https://segmentfault.com/a/1190000009649780" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009649780</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/31/Git-emoji使用指南/banner.png&quot;&gt;
&lt;p&gt;emoji源于日语词汇“絵文字”, 想必大家对它都挺熟悉的吧, 其拟人化的生动形象，已经成为当下流行的表情之一. 接下来讲一下如何规范的在&lt;code&gt;git&lt;/code&gt;中使用emoji提高我们项目的可读性吧~
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>新手不知道的JavaScript技巧 - 条件语句的简写技巧</title>
    <link href="http://yoursite.com/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2017/12/26/新手不知道的技巧-if语句的判定/</id>
    <published>2017-12-26T04:22:15.000Z</published>
    <updated>2017-12-26T07:13:55.535Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/26/新手不知道的技巧-if语句的判定/banner.png"><p>可能入坑不久的同学还会用着<code>if (value !== null || Value !== undefined)</code>这样的判断语句, 而实际上只要理解判定的规则, 善用规则, 就能大大的提高代码的可读性. 接下来让我们深入学习一下.</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>大多编程语言中最为常用的一个语句就是<code>if</code>语句, 这种条件语句是通过判断指定表达式的值来决定执行还是跳过某些语句. 它的语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Expression) &#123;</div><div class="line">  statement</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<strong>Expression(表达式/条件)</strong>可以是任意表达式或者值.</p><ol><li>首先它会解析表达式的值</li><li>如果表达式是无法解析的, 会报<code>ReferenceError</code>的错误并停止. 如果不是则继续.</li><li>判断值的引用类型, 如果是布尔值, 字符串和符号则继续. <code>null</code>和<code>undefined</code>永远都返回 false.</li><li>将值传入<code>toBoolean(exprValue)</code>根据下面的规则转换为布尔值.</li></ol><table><thead><tr><th style="text-align:left">value</th><th style="text-align:left">Boolean</th></tr></thead><tbody><tr><td style="text-align:left">未定义(Undefined)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">空值(null)</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">布尔值(Boolean)</td><td style="text-align:left">返回参数本身</td></tr><tr><td style="text-align:left">数字(Number)</td><td style="text-align:left">如果参数是<code>+0</code>, <code>-0</code>或<code>NaN</code>，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td style="text-align:left">字符串(String)</td><td style="text-align:left">如果参数是空字符串(长度为零)，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">返回 true</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">返回 true</td></tr></tbody></table><p>这里我们得出<code>undefined</code>, <code>null</code>, <code>NaN</code>, 空字符串, 和数字 0 都是过不了条件语块的规则, 因此我们可以利用这一点来对代码进行简写.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userName = <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad code</span></div><div class="line"><span class="keyword">if</span> (value != <span class="literal">undefined</span>) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad code</span></div><div class="line"><span class="keyword">if</span> (value !== <span class="literal">undefined</span> || value !== <span class="literal">null</span> || value !== <span class="literal">false</span>) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good code</span></div><div class="line"><span class="keyword">if</span> (userName) &#123;</div><div class="line">  something...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// flag锁, 利用取反转换布尔值</span></div><div class="line"><span class="keyword">if</span> (!flag) &#123;</div><div class="line">  flag = <span class="literal">true</span>;</div><div class="line">  something...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相同的, 也没有必要去使用<code>==</code>规范不推荐的方式去隐式转换类型, 这种规则同样适用于<code>三目运算符</code>, <code>switch</code>等条件运算中去… 这样看起来是不是自己的代码整洁多了呢~</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>才疏学浅, 如果有什么说的不对或者需要改进的地方, 可以给我留言大家一起交流. 原创不易, 如果文章对你有帮助的话就随手点个赞鼓励一下呗~</p><p><strong>参考资料</strong><br>ECMA-262 官方文档<br><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/26/新手不知道的技巧-if语句的判定/banner.png&quot;&gt;
&lt;p&gt;可能入坑不久的同学还会用着&lt;code&gt;if (value !== null || Value !== undefined)&lt;/code&gt;这样的判断语句, 而实际上只要理解判定的规则, 善用规则, 就能大大的提高代码的可读性. 接下来让我们深入学习一下.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="JavaScript原理分析" scheme="http://yoursite.com/tags/JavaScript%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>初窥WebSockets</title>
    <link href="http://yoursite.com/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/"/>
    <id>http://yoursite.com/2017/12/25/初窥Web-Sockets/</id>
    <published>2017-12-25T09:39:27.000Z</published>
    <updated>2017-12-26T03:39:38.925Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/25/初窥Web-Sockets/banner.png"><p>要说最令人津津乐道的新浏览器的API, 就数Web Sockets了. 接下来了解一下这个备受争议的API吧~<br><a id="more"></a></p><h2 id="什么是Web-Socket"><a href="#什么是Web-Socket" class="headerlink" title="什么是Web Socket?"></a>什么是Web Socket?</h2><p><strong>Web Socket</strong>是HTML5出来的一个持久化新协议. 它的目标是在一个单独的持久链接上提供全双工, 让客户端和服务器之间的数据交换变得更加简单.</p><p>Web Socket是基于HTTP协议来建立连接. 由于使用了自定义的协议, 因此它的URL模式策略也与标准的HTTP不同, 未加密的<code>http://</code>对应着<code>ws://</code>, 而加密的连接的<code>https://</code>也变成<code>https://</code>.</p><p><strong>那使用Web Socket的好处是什么?</strong></p><ol><li><p>能够在客户端和服务器之间发送非常少的数据, 而不用担心HTTP那样字节级的开销. 由于传递的数据很小, 表面看起来会很适用于移动端.</p></li><li><p>主动性<br>大家都知道, 标准HTTP请求是具有被动性的, 如<code>ajax轮询</code>:<br>客户端: “lalala, 帮我看一下我快递有变动吗?”<br>服务端: “没呢, 没变化”<br>客户端: “那现在呢?”<br>服务端: “也还没..”<br>客户端: “那现在呢?”<br>服务端: “还没…”<br>客户端: “那现在呢?”<br>服务端: “好啦好啦, 物流发生变化了, 你看到这里这里了”<br>客户端: “那开始派送了吗?”<br>服务端: “还没…”<br>这样的缺点是什么… <code>ajax轮询</code>需要服务器有很快的处理速度和资源, 而频繁过多的请求可能会报<code>503 Server Unavailable</code>的错误了.</p><p>而升级为Websocket后, 这时候服务器会主动把东西反馈给你, 如:<br>客户端: “哥们, 咱建立Websocket协议, 需要chat，Websocket协议版本：17（HTTP Request）”<br>服务端：”ok，确认，已升级为Websocket协议(HTTP Protocols Switched)”<br>客户端: “那有啥事的话跟我讲噢”<br>服务端: “balbalbal”<br>服务端: “balbalbal”<br>服务端: “hhhhhhhhhh”<br>服务端: “笑死啦2333333”<br>就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你, 这里场景就适用于聊天室之类的）</p></li><li><p>没有同源限制，客户端可以与任意服务器通信(不用担心跨域)</p></li></ol><h2 id="现状与短处"><a href="#现状与短处" class="headerlink" title="现状与短处"></a>现状与短处</h2><p>既然它存在这种优势为什么如今还是使用的不多呢?<br><code>HTML5</code>新API嘛… 说到<code>HTML5</code>就不得不考虑到<em>兼容性</em>的问题, WebSocket在各浏览器的兼容性不一致这是问题其一.<br><img src="/blog/2017/12/25/初窥Web-Sockets/img-1.png" title="Web Sockets兼容性"></p><p>前文有提过. 相对于PC端, <code>websocket</code>的客户端和服务器之间发送非常少的数据, 表面看起来的确移动端会更有优势. 但是目前以国内的环境来说, 反而不好用. 当网络不稳定的时候开销尤其大.</p><p>看到这里或许会有人问, 啊? 你之前不是说只需要1次HTTP请求就可以做信息传送了蛮?? 是的, 没错. 大家可能会玩过像<em>阴阳师</em>这样的游戏? 网络一闪, 就会让你重新登录.而长轮询断一次只会卡一秒, 而websocket断了则要重新从认证开始, 那当网络不稳定时, 那开销可想而知.</p><p>其次就是性能上并没有绝对的优势, 所以当前主流还是标准的HTTP比较多, 而<code>websocket</code>, 据我所知当下适用的场景也只有手游上的使用了.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><code>websocket</code>的路还很长, 虽然现在使用的不多, 但以后还是可以保留小小的期待. 上文提及资料有部分是来源于网上. 有部分是去咨询了相关的dalao. 才疏学浅若有违权, 或者说的不对的地方望各位指出.</p><p><strong>参考资料:</strong><br>WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear的回答 - 知乎<br><a href="https://www.zhihu.com/question/20215561/answer/40316953" target="_blank" rel="noopener">https://www.zhihu.com/question/20215561/answer/40316953</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/25/初窥Web-Sockets/banner.png&quot;&gt;
&lt;p&gt;要说最令人津津乐道的新浏览器的API, 就数Web Sockets了. 接下来了解一下这个备受争议的API吧~&lt;br&gt;
    
    </summary>
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>关于点击下拉菜单字体模糊及可能造成boder上下一像素宽度不一的坑</title>
    <link href="http://yoursite.com/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/</id>
    <published>2017-12-23T15:22:32.000Z</published>
    <updated>2017-12-23T15:55:51.538Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/transition.gif"><p>关于点击下拉菜单会造成文字模糊及<code>boder 1px</code>上下和左右宽度不一致的问题.<br><a id="more"></a></p><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>朋友叫帮忙看代码~ 问题是这样的, 当点击下拉菜单时, 整个页面的组件都变模糊一下. 然后border上下的边框能隐约看到会大概溢出那么一点(但是没到一个像素).</p><p>因为使用了<code>element</code>组件, 大概能想到中间加有<code>transition</code>, 对问题进行排查后发现<code>transform</code>这个属性会对后代元素能产生影响, 将属性删除, 问题解决. 具体影响的原理, 现在占个坑, 以后再深入挖掘…</p><h2 id="Bug相关的图"><a href="#Bug相关的图" class="headerlink" title="Bug相关的图"></a>Bug相关的图</h2><img src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/bug.gif" title="点击后能明显看到整个组件模糊了"><img src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/img-1.jpg" title="正常下的1像素"><img src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/img-2.jpg" title="1像素下还有一点点的溢出">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/transition.gif&quot;&gt;
&lt;p&gt;关于点击下拉菜单会造成文字模糊及&lt;code&gt;boder 1px&lt;/code&gt;上下和左右宽度不一致的问题.&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="transition" scheme="http://yoursite.com/tags/transition/"/>
    
      <category term="transform" scheme="http://yoursite.com/tags/transform/"/>
    
      <category term="布局bug" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80bug/"/>
    
  </entry>
  
  <entry>
    <title>git pull远程仓库代码冲突</title>
    <link href="http://yoursite.com/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/"/>
    <id>http://yoursite.com/2017/12/18/git-pull远程仓库代码冲突/</id>
    <published>2017-12-18T09:11:24.000Z</published>
    <updated>2017-12-18T14:33:54.322Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/18/git-pull远程仓库代码冲突/banner.jpg"><p>常用git与远程仓库进行交互, 难免会遇到冲突的问题. 现在来了解一下, 当出现这种情况时, 该要如何处理.<br><a id="more"></a></p><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>代码冲突, 无非就是同时有两个人在改动同一个文件所造成的冲突. 当你使用<code>git pull</code>后, <code>git</code>会提示你:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git pull</div><div class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</div><div class="line">        src/components/page/file.vue</div><div class="line">Please commit your changes or stash them before you merge.</div><div class="line">Aborting</div><div class="line">Updating 8e191be..c301cdc</div></pre></td></tr></table></figure></p><p>这时候你可以使用<code>git stash</code>将本地修改存储起来. 使用<code>git status</code>查看, 是不是干净啦~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">Saved working directory and index state WIP on master: 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></div><div class="line">HEAD is now at 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></div><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure></p><p>这时再使用将远程仓库的代码pull下来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  $ git pull</div><div class="line">Updating 8e191be..c301cdc</div><div class="line">Fast-forward</div><div class="line"> src/base/fonts/iconfont.eot                        | B<span class="keyword">in</span> 7320 -&gt; 7548 bytes</div><div class="line"> src/components/page/file.vue      |  10 +-</div><div class="line"> create mode 100644 static/font_503074_8sfhbdjlucjtt9/iconfont.eot</div></pre></td></tr></table></figure></p><p>现在要查看现有的储藏, 可以使用<code>git stash list</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div><div class="line">stash@&#123;0&#125;: WIP on master: 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></div></pre></td></tr></table></figure></p><p>这时我们还原储藏的内容, 使用命令<code>git stash pop &#39;stash@{0}&#39;</code>. <strong>注意这里的要使用引号<code>&#39;stash@{0}&#39;</code>, 因为shell正在使用扩展里的内容, 否则会报一个</strong><code>unknown option: -encodedCommand</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git stash pop <span class="string">'stash@&#123;0&#125;'</span></div><div class="line">Auto-merging src/components/page/file.vue</div><div class="line">On branch master</div><div class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        modified:   src/components/page/film.vue</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p><p>之后就可以使用<code>git diff</code>或者利用图形工具, 如sourceTree(可视化git), vscode编辑器上对比代码, 手动解决冲突即可.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/18/git-pull远程仓库代码冲突/banner.jpg&quot;&gt;
&lt;p&gt;常用git与远程仓库进行交互, 难免会遇到冲突的问题. 现在来了解一下, 当出现这种情况时, 该要如何处理.&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="代码冲突" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>什么是.gitkeep? 如何在windows下使用命令行创建.gitkeep文件</title>
    <link href="http://yoursite.com/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/12/16/使用命令行创建-gitkeep文件/</id>
    <published>2017-12-16T14:30:04.000Z</published>
    <updated>2017-12-19T04:48:51.919Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/16/使用命令行创建-gitkeep文件/banner.png"><p>在一些脚手架上构建项目中, 你或许会留意到某个目录中会有个名为<code>.gitkeep</code>的空文件. 那么这个文件是用来做什么的呢?<br><a id="more"></a></p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>什么是<code>.gitkeep</code>? 其实是这样的,  当提交的代码时目录中有空文件夹时<code>git</code>会自动忽略掉. 而有时候你就是想留着这个, 以后有用处不想被忽略怎么办呢? 因此, <code>.gitkeep</code>就应运而生了…</p><p><code>.gitkeep</code>是一个约定俗成的文件名并没有什么特殊规则, 它就相当于一个占位, 让<code>git</code>开始跟踪这个目录.<br>其实任何文件都可以, 只不过大家都遵循这个命名, 会跟具有语义化. 如同字面意思一样…<code>git</code> + <code>keep</code>, 让<code>git</code>保持这个文件夹, 是不是很简单易懂呀?</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><blockquote><p>“哥, 能发个’.gitkeep’给我蛮? 项目中的弄丢了..”<br>  “啊? 直接创建一个不就完啦?”<br>  “创建不了呀!!系统不准, 会报错提示必须输入文件名”<br>  “噢~是有这个限制的, 你用命令行吧”<br>  “搜了圈, 好像没有找到在windows创建的方法诶, “<br>  “? ? ?”  </p></blockquote><p>没错, 上面这场景就是让我写这篇博客的主要起因…其实windows下环境创建<code>.</code>开头的文件只能通过命令行的方法, 而且方式也很简单. 只需要输入一行命令即可..<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">type</span> <span class="built_in">NUL</span> &gt; .gitkeep</div></pre></td></tr></table></figure></p><p>这段代码的意思就是创建一个空文件重定向到名为<code>.gitkeep</code>的文件中.</p><h2 id="gitignore与gitkeep"><a href="#gitignore与gitkeep" class="headerlink" title="gitignore与gitkeep"></a>gitignore与gitkeep</h2><p>在脚手架构建的项目中, 你也总能在根目录看到名为<code>.giitignore</code>的文件, 那么它和<code>gitkeep</code>又有什么关联呢? 前文有提过, <code>.gitkeep</code>只是约定俗成的一个名称, 而<code>.gitignore</code>是一个特殊文件, 如果你有什么不想提交上去的东西, 如配置了表单密码的配置文件呀什么的, 你可以写进这个文件中, <code>git</code>会自动的忽略掉它.</p><blockquote><p>忽略文件的原则是：</p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实像<code>.gitignore</code>带有其他特殊文件还有其他, 如<code>.nojekyll</code>来告诉Github关闭 GitHub Pages 的 Jekyll 相关功能等, 由于实际工作中用的烧, 这里不详谈, 放着让大家去挖掘吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/16/使用命令行创建-gitkeep文件/banner.png&quot;&gt;
&lt;p&gt;在一些脚手架上构建项目中, 你或许会留意到某个目录中会有个名为&lt;code&gt;.gitkeep&lt;/code&gt;的空文件. 那么这个文件是用来做什么的呢?&lt;br&gt;
    
    </summary>
    
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
      <category term="Githubg" scheme="http://yoursite.com/tags/Githubg/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目中Axios报错Promise未定义及IE10报语法错误的解决方案</title>
    <link href="http://yoursite.com/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/</id>
    <published>2017-12-15T09:06:21.000Z</published>
    <updated>2017-12-16T12:06:46.747Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/banner.jpg"><p>关于IE11及以下版本无法使用Promise还有IE10下报错的问题<br><a id="more"></a></p><h2 id="Promise未定义"><a href="#Promise未定义" class="headerlink" title="Promise未定义 ?"></a>Promise未定义 ?</h2><p>在使用Axios开发时, IE11及以下版本报错会报<code>Promise未定义</code>的错误. 这是因为<code>axios</code>本质上是封装了ES6语法的<code>promise</code>,而<code>promise</code>在IE上并不兼容.<br><img src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/promise-1.png" title="IE11下的错误"></p><p>然而说到js兼容, 这时候我们又能联想到<code>babel</code>.. 没错, <code>babel</code>中有一个工具叫做<a href="https://babeljs.cn/docs/usage/polyfill/" target="_blank" rel="noopener">babel-Polyfill</a>, 它会仿效一个完整的<code>ES2015+</code>环境，并意图运行于一个应用中而不是一个库/工具. 其实食用的方式也很简单.</p><p>我们将<code>babel-polyfill</code>装进我们项目依赖中. <em>这里值得注意的是, 安装的时候需要安装到<code>dependency</code>(生产依赖)中, 而不是<code>devDependency</code>(开发依赖)</em><br>(tips.关于两者的区别, 我以前的文章有专门讲过, 感兴趣的可以看一下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save babel-polyfill</div></pre></td></tr></table></figure><p>首先在<code>mian.js</code>的<strong>顶部</strong>引入<code>import &quot;babel-polyfill&quot;;</code>确保能够最先加载, 随后我们在<code>build</code>目录下<code>webpack.config.js</code>修改配置, 将app使用<code>babel-polyfill</code>进行编译. 这时候我们再重新编译, 就会发现<code>promise未定义</code>的错误就以及消失了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">      <span class="attr">app</span>: [<span class="string">"babel-polyfill"</span>, <span class="string">'./src/main.js'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>你以为文章到这里就结束了吗…. 随即我们切换到IE10下进行测试. 你会发现, 又冒出了一个报错.. Emmm, 解决一个又来一个, 惊不惊喜意不意外?<br><img src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/IE10-1.png" title="IE10下语法错误"></p><h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>当你在IE10下看到提示语法错误的时, 这时候你就得去检查检查<code>package.json</code>下 <code>webpack-dev-server</code>版本是否高于<code>2.6.1</code>. 出现这个报错主要是因为项目中使用了<code>const</code>等语法, 然而IE11以下并不认得ES6语法语法.这个问题只有在开发模式才会出现, 只要es6转码后，打包放到服务器上，就没有问题了. </p><p>如果你想在开发阶段在IE10下测试你的代码, 你可以选择降低版本到<code>2.6.1</code>上, 问题就解决了.<br><img src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/IE10-2.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/banner.jpg&quot;&gt;
&lt;p&gt;关于IE11及以下版本无法使用Promise还有IE10下报错的问题&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="IE兼容性错误" scheme="http://yoursite.com/tags/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E9%94%99%E8%AF%AF/"/>
    
      <category term="解决方案" scheme="http://yoursite.com/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>浅谈前端所能做的SEO</title>
    <link href="http://yoursite.com/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/"/>
    <id>http://yoursite.com/2017/12/05/浅谈前端所能做的SEO/</id>
    <published>2017-12-05T08:19:17.000Z</published>
    <updated>2017-12-05T12:32:49.359Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/12/05/浅谈前端所能做的SEO/seo.png"><p>SEO, 就是搜索引擎优化(Search Engine Optimization)的缩写, SEO优化是专门利用搜索引擎的搜索规则来提高网站在搜索引擎内的自然排名的一种方式. 能对搜索引擎的小蜘蛛更加友好. 那么前端能做哪些SEO的优化呢?<br><a id="more"></a></p><h2 id="SEO基础三要素"><a href="#SEO基础三要素" class="headerlink" title="SEO基础三要素"></a>SEO基础三要素</h2><p>我们进入某个网页打开调试工具, 在<code>&lt;head&gt;</code>标签里我们能的看到<code>&lt;title&gt;</code>标签, <code>keywords</code>和<code>description</code>的<code>&lt;meta&gt;</code>标签. 就是最基础的SEO三要素.</p><p>其中<code>&lt;title&gt;</code>标签代表着页面的标题, <code>&lt;meta keywords&gt;</code>是网站的关键字, <code>&lt;meta Description&gt;</code>则是网页的描述, 即对这些关联字进行了扩展.<br>昂, 现在我们知道了这三要素可以SEO优化, 那我们就疯狂的在关键字里加一堆上去, 越多越好?当然, 并不是这样的.这些都有限制的, 内容不可过长, 也不能过分的堆砌关键字, 每个页面的<code>description</code>也应该不同. 比如下方张老师的博客为例.</p><img src="/blog/2017/12/05/浅谈前端所能做的SEO/head.png" title="张鑫旭老师的个人博客"><h3 id="网站构造布局优化"><a href="#网站构造布局优化" class="headerlink" title="网站构造布局优化"></a>网站构造布局优化</h3><p>对网站布局进行SEO优化, 控制首页链接数量, 扁平化的目录层次(最多三层目录层次), 然后对导航SEO优化.</p><h2 id="编写语义化代码"><a href="#编写语义化代码" class="headerlink" title="编写语义化代码"></a>编写语义化代码</h2><p>我们常说, 要养成编写语义化代码的习惯. 那什么是语义化呢? 就是既要人看得懂, 也要机器能理解你的代码.<br>其实我们常用的HTML标签很多都是带语义化的. 如:</p><ul><li>H1 ~ H6都是用于表示标题</li><li>UL标签多用于无序列表</li><li>Ol标签用于有序列表</li><li>DL标签用于定义数据列表</li><li>Em, strong表示强调等</li></ul><img src="/blog/2017/12/05/浅谈前端所能做的SEO/ul-1.png" title="掘金的这种HTML就是符合语义化"><h2 id="站内优化"><a href="#站内优化" class="headerlink" title="站内优化"></a>站内优化</h2><ul><li><code>&lt;a&gt;</code> - 标签优化, 外链上加上rel=”nofollow”, 让小蜘蛛别往外面爬</li><li><code>&lt;h1&gt;</code> - 正文标题使用h1</li><li><code>&lt;img&gt;</code> - 标签使用alt说明, alt对图片起着一个注释的作用</li><li><code>&lt;strong&gt;``&lt;em&gt;</code>与<code>&lt;b&gt;``&lt;i&gt;</code>标签<br><code>&lt;strong&gt;</code>是权重标签的代表, 在搜索引擎中能够得到高度的重视, 他能突出关键词, <code>&lt;b&gt;</code>与<code>&lt;strong&gt;</code>的效果是一样的, 但是在SEO中并不会起到很好的效果, 因此不推荐使用.<br><code>&lt;em&gt;</code>表示斜体, 权重标签的重要度仅次于<code>&lt;strong&gt;</code>. </li></ul><h2 id="一些布局小技巧"><a href="#一些布局小技巧" class="headerlink" title="一些布局小技巧"></a>一些布局小技巧</h2><ul><li>重要内容HTML代码放在最前面, 小蜘蛛抓取HTML内容是按照文档流从上往下抓取的. 利用这个特点, 我们可以将重要的HTML放在上面, 然后可以通过CSS来进行布局.</li><li>重要的内容尽量不要用JS输出, 小蜘蛛看不懂JavaScript~</li><li>尽少使用iframe框架. 小蜘蛛是不会读取里面的网页的</li><li>谨慎使用<code>display: none;</code> 小蜘蛛会过滤掉<code>display: none</code>里的内容</li><li>不断的精简代码, 能使用一个标签就不要用两个标签</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SEO其实面对的是搜索引擎, 然后搜索引擎再将搜索的结果, 根据权重展现给用户. 文中讲的只是一些基础的知识, 除此之外还有<code>robots.txt</code>, 站外友链等, 这里就不详谈了. 平时前端er日常工作中应该培养好的编程习惯, 了解了SEO的规则, 可以隐性给自己页面提升质量呢~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/12/05/浅谈前端所能做的SEO/seo.png&quot;&gt;
&lt;p&gt;SEO, 就是搜索引擎优化(Search Engine Optimization)的缩写, SEO优化是专门利用搜索引擎的搜索规则来提高网站在搜索引擎内的自然排名的一种方式. 能对搜索引擎的小蜘蛛更加友好. 那么前端能做哪些SEO的优化呢?&lt;br&gt;
    
    </summary>
    
    
      <category term="SEO" scheme="http://yoursite.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Vue &quot;v-for&quot;遍历绑定toggle icon, 动态切换action</title>
    <link href="http://yoursite.com/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/"/>
    <id>http://yoursite.com/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/</id>
    <published>2017-11-29T09:12:43.000Z</published>
    <updated>2017-11-29T09:38:39.847Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/vue.png"><p>在Vue中实现动态绑定toggle action</p><a id="more"></a><p>在遍历<code>li</code>标签时, 动态绑定点击事件, 当点击其中一个<code>item</code>时调用函数. 函数内判断是否处于<code>action</code>状态, 是则清除class, 从实现toggle的效果~ 按照这个思路也可以扩展为下拉菜单. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;hello&quot;&gt;</div><div class="line">    &lt;ul class=&quot;list&quot;&gt;</div><div class="line">      &lt;li v-for=&quot;(item, index) in itemList&quot;</div><div class="line">          @click=&quot;openItem(index)&quot;</div><div class="line">           :key=&quot;item.id&quot;</div><div class="line">      &gt;</div><div class="line">        &#123;&#123; item.desc &#125;&#125;</div><div class="line">        &lt;span class=&quot;icon&quot; :class=&quot;&#123;&apos;action&apos;: actionItem === index&#125;&quot;&gt;&lt;/span&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      itemList: [</div><div class="line">        &#123;desc: &apos;item1&apos;&#125;,</div><div class="line">        &#123;desc: &apos;item2&apos;&#125;,</div><div class="line">        &#123;desc: &apos;item3&apos;&#125;</div><div class="line">      ],</div><div class="line">      actionItem: null</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    openItem (index) &#123;</div><div class="line">      if (this.actionItem === index) &#123;</div><div class="line">        this.actionItem = null</div><div class="line">      &#125; else &#123;</div><div class="line">        this.actionItem = index</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</div><div class="line">&lt;style scoped&gt;</div><div class="line">.list &#123;</div><div class="line">  width: 500px;</div><div class="line">  padding: 0;</div><div class="line">  margin: 0 auto;</div><div class="line">  text-align: left;</div><div class="line">&#125;</div><div class="line">.list li &#123;</div><div class="line">  position: relative;</div><div class="line">  margin: 14px 0;</div><div class="line">  padding: 10px;</div><div class="line">  border-bottom: 1px solid #ccc;</div><div class="line">  list-style: none;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line">.list .icon &#123;</div><div class="line">  position: absolute;</div><div class="line">  right: 10px;</div><div class="line">  width: 0;</div><div class="line">  height: 0px;</div><div class="line">  border: 10px solid;</div><div class="line">  border-color: #aaa transparent transparent transparent;</div><div class="line">&#125;</div><div class="line">.list .action &#123;</div><div class="line">  border-color: rgb(254,0,0);</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>初次点击, <code>action</code>触发, 再次点击清除<code>action</code><br><img src="/blog/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/vue-1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/vue.png&quot;&gt;
&lt;p&gt;在Vue中实现动态绑定toggle action&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>npm包中的 install --save 和 install --save-dev之间到底有区别</title>
    <link href="http://yoursite.com/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/11/27/谈谈npm包里的 install --save 和 install --save-dev之间的区别/</id>
    <published>2017-11-27T05:32:28.000Z</published>
    <updated>2017-12-15T15:49:40.351Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/npm.jpg"><p>当我们使用<code>npm</code>进行开发时经常能遇到需要安装依赖包, 那么<code>npm install --save</code>和<code>npm install --save-dev</code>之间到底有什么区别呢? 现在来探究一番.<br><a id="more"></a></p><h3 id="install-–save-dev"><a href="#install-–save-dev" class="headerlink" title="install –save-dev"></a>install –save-dev</h3><p>实际上<code>--save-dev</code>是开发时候所依赖的东西，如我们想添加自动添加前缀, 那么就安装<code>autoprefixer</code>到开发依赖去. 也就是编译打包后<code>autoprefixer</code>已经帮我们添加了相应的浏览器前缀, 那么我们之后就不需要依赖他了. 所以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel --save-dev</div></pre></td></tr></table></figure></p><p>在这里我们可以看到已经放进<code>package.json</code>中的<code>devDependencies</code>(开发依赖)中去了.<br><img src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/dev.png"></p><h3 id="install-–save"><a href="#install-–save" class="headerlink" title="install –save"></a>install –save</h3><p><code>--save</code>就是你发布之后还依赖的东西。 如果编译打包后还需要依赖的库, 如<code>vue</code>, 所以就放进了<code>dependencies</code>中(生产依赖).<br><img src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/dep.png"></p><p>两者需要安装的依赖其实都可以在<code>package.json</code>中手动输入相应的库和版本号, 然后使用<code>npm install</code>就能进行安装<code>package.json</code>中的所有依赖了~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/npm.jpg&quot;&gt;
&lt;p&gt;当我们使用&lt;code&gt;npm&lt;/code&gt;进行开发时经常能遇到需要安装依赖包, 那么&lt;code&gt;npm install --save&lt;/code&gt;和&lt;code&gt;npm install --save-dev&lt;/code&gt;之间到底有什么区别呢? 现在来探究一番.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器地址输入URL回车后，中间发生了什么？</title>
    <link href="http://yoursite.com/2017/11/23/%E5%9C%A8Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E8%BE%93%E5%85%A5URL%E5%9B%9E%E8%BD%A6%E5%90%8E%EF%BC%8C%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/11/23/在Chrome浏览器地址输入URL回车后，中间发生了什么？/</id>
    <published>2017-11-23T09:07:47.000Z</published>
    <updated>2017-11-26T14:51:15.262Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/23/在Chrome浏览器地址输入URL回车后，中间发生了什么？/chrome.jpg"><p>最近在面试的时候遇到了一道比较经典的面试题, 在Chrome浏览器地址栏输入url, 回车之后会发生什么事?<br>题目很经典, 自己也懂些大概. 不过抱着探究原理的精神. 也查询了相关的知识, 今天就来探讨一下, 浏览器的处理过程是怎么样的~<br><a id="more"></a></p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>当我们在地址栏输入网址时, 其实就是要向服务器请求我们想要的资源. </p><h3 id="1-解析Url"><a href="#1-解析Url" class="headerlink" title="1. 解析Url"></a>1. 解析Url</h3><p>首先开始解析Url, 分析输入的Url还是搜索关键字</p><h3 id="2-DNS查询"><a href="#2-DNS查询" class="headerlink" title="2. DNS查询"></a>2. DNS查询</h3><p><strong>2.1. 浏览器缓存</strong> 然后浏览器开始检测域名是否还存在缓存中, 如果缓存没有就<code>gethostbyname</code>库函数进行查询.</p><p><strong>2.2 Hosts文件</strong>  <code>gethostbyname</code>函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里.</p><p><strong>2.3 本地DNS服务器</strong> hosts 中也没有找到的话, 将会向DNS 服务器发送一条DNS查询请求.</p><p><strong>2.4 路由缓存</strong> 接着，前面的查询请求发向路由器，它一般会有自己的DNS缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/23/在Chrome浏览器地址输入URL回车后，中间发生了什么？/chrome.jpg&quot;&gt;
&lt;p&gt;最近在面试的时候遇到了一道比较经典的面试题, 在Chrome浏览器地址栏输入url, 回车之后会发生什么事?&lt;br&gt;题目很经典, 自己也懂些大概. 不过抱着探究原理的精神. 也查询了相关的知识, 今天就来探讨一下, 浏览器的处理过程是怎么样的~&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用JavaScript删除全部的微博</title>
    <link href="http://yoursite.com/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/"/>
    <id>http://yoursite.com/2017/11/20/使用JavaScript删除全部的微博/</id>
    <published>2017-11-20T01:05:23.000Z</published>
    <updated>2017-11-21T01:48:50.182Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/20/使用JavaScript删除全部的微博/weibo.png"><p>生活中常常会遇到一些繁琐重复而又没有意义的东西, 所以常有人说, 作为一个程序员, 应该避免做重复没意义的事, 我们学习编程最终的目的之一无非也是偷懒….. 能让自动的就坚决不手动. 当然, 除了在学习中自己造一些有意义的轮子除外. 今天就利用一些自己所学的知识去解决生活上的一些麻烦. 比如..自动删光微博黑历史~<br><a id="more"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>打开chrome浏览器(其他非IE现代浏览器都可以), 进入<strong>我的主页</strong>, 然后按下<code>F12</code>进入控制台.<br><img src="/blog/2017/11/20/使用JavaScript删除全部的微博/home.png"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>首先这次只是单纯的想通过JavaScript批量删除全部微博代替手动而已, 那么就简单了. 我们只需要模仿点击删除的动作.</p><p>找到删除微博的key, 选中DOM元素, 这里我们可以看到菜单<strong>a标签</strong>中有一个属性<code>action-type=&quot;fl_menu</code>, 在控制台进使用<code>document.querySelectorAll</code>进行测试输出, 可以看到是一个<code>NodeList</code>的类数组, 分别对应着页面每一个<code>fl_menu</code>.<br><img src="/blog/2017/11/20/使用JavaScript删除全部的微博/DOM-1.png" title="Menu的DOM节点"><br><img src="/blog/2017/11/20/使用JavaScript删除全部的微博/DOM-2.png" title="输出到控制台"></p><p>点击<code>menu</code>弹出下拉菜单, 继续用同样的方法分析节点, 找出一个表示用于删除的属性. 一般来说, 一个合格的程序员都懂得编写语义化的代码, 这里先推测<code>action-type=&quot;feed_list_delete</code>这个属性是专属删除微博的属性, 使用<code>document.querySelector</code>将代码在控制台上测试输出. 获取到页面中第一个delete DOM, 模拟点击后弹出一个确定框, 再次使用相同的方法确定即可.<br><br></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一般网站都会限制用户频繁操作, 这里我们使用<code>setTimeout</code>, 测试一个weibo能够容忍的一个操作频率(可能还跟网速有关).<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 经测试, 750ms是一个较快较稳定的频率, 效率过快会弹警告.</span></div><div class="line">  <span class="keyword">var</span> timer = setTimeout(Delete, <span class="number">750</span>);</div><div class="line">  <span class="keyword">var</span> item = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Delete</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* 这里需要停止定时器等待加载, 请求XHR进行加载剩余微博.</span></div><div class="line">     * 这里是微博的一个限制, 当页面中不存在相应的DOM, 就进行页面刷新.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (item &gt; <span class="number">15</span>) &#123;</div><div class="line">      item = <span class="number">0</span>;</div><div class="line">      clearTimeout(timer);</div><div class="line">      <span class="keyword">return</span> timer = setTimeout(Delete, <span class="number">15000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 模拟点击</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="fl_menu"]'</span>).click();</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="feed_list_delete"]'</span>).click();</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="ok"]'</span>).click();</div><div class="line"></div><div class="line">    ++item;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`已成功删除了<span class="subst">$&#123;item&#125;</span>项`</span>);</div><div class="line">    timer = setTimeout(Delete, <span class="number">750</span>);</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这样我们想要的效果就实现了.省去了一条一条删的人力, 又能运用到自己所学的知识. 其实代码代码也很简单, 无非是用到了<code>setTimeout</code>重复去递归调用而已. 要注意的是<code>querySelector</code>, 和<code>querySelector</code>都是IE9+的API, 在这里没有去考虑对IE的兼容, 并且也没有必要.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/20/使用JavaScript删除全部的微博/weibo.png&quot;&gt;
&lt;p&gt;生活中常常会遇到一些繁琐重复而又没有意义的东西, 所以常有人说, 作为一个程序员, 应该避免做重复没意义的事, 我们学习编程最终的目的之一无非也是偷懒….. 能让自动的就坚决不手动. 当然, 除了在学习中自己造一些有意义的轮子除外. 今天就利用一些自己所学的知识去解决生活上的一些麻烦. 比如..自动删光微博黑历史~&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="实战" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Javascript深入理解-裁剪图片效果(选取框)</title>
    <link href="http://yoursite.com/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2017/11/17/Javascript深入解析-裁剪图片效果/</id>
    <published>2017-11-17T08:31:03.000Z</published>
    <updated>2017-11-22T01:31:49.065Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/image-01.png"><p>在生活中我们时常能看到这种图片裁剪的效果, 那么他实际上底层的原理是怎么实现的呢? 让我们深入的解剖一下.<br><a id="more"></a></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><img src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/clip_spec.png" title="自己用PS撸的渣图"><p>首先我们先将视图一分为三, 理解为三个层级叠加在一起的仰视图.</p><ul><li>最上面是可拖动的选择窗口</li><li>中间待剪辑的可视窗口</li><li>底层是一张<code>opacity: .5</code>的背景图片</li></ul><h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><p>我们这里主要讲JavaScript, HTML与css就简要的过一下.</p><p>首先<code>HTML</code>基本结构是两张相同的结构, 两张图片分别是调整过透明度的底图和一张被裁剪过了的中间层.<code>mainBox</code>包裹着选择的小方块<code>square</code>,相对定位于image在最上面一层.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/Konachan.com - 239917 sample.jpg"</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">id</span>=<span class="string">"image1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/Konachan.com - 239917 sample.jpg"</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">id</span>=<span class="string">"image2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mainBox"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* main.css */</span></div><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>: <span class="number">#333</span>;&#125;</div><div class="line"><span class="selector-id">#box</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">100px</span>; <span class="attribute">left</span>: <span class="number">200px</span>; <span class="attribute">width</span>: <span class="number">460px</span>; <span class="attribute">height</span>: <span class="number">360px</span>;&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-tag">img</span> &#123;<span class="attribute">width</span>: <span class="number">460px</span>;&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-id">#image1</span> &#123;<span class="attribute">opacity</span>: .<span class="number">5</span>;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-id">#image2</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">clip</span>: <span class="built_in">rect</span>(0, 200px, 200px, 0) &#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">box-sizing</span>: border-box;&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.square</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">width</span>: <span class="number">8px</span>;<span class="attribute">height</span>: <span class="number">8px</span>; <span class="attribute">background</span>: <span class="number">#fff</span>&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-up</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: nw-resize;&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.up</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: n-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-up</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: ne-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: e-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-down</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: se-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.down</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: s-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-down</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: sw-resize&#125;</div><div class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left</span>&#123;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: w-resize&#125;</div><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</div><div class="line">  <span class="attribute">-webkit-user-select</span>: none;</div><div class="line">  <span class="attribute">-khtml-user-select</span>: none;</div><div class="line">  <span class="attribute">-moz-user-select</span>: none;</div><div class="line">  <span class="attribute">-ms-user-select</span>: none;</div><div class="line">  <span class="attribute">user-select</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h3><p><strong>ESMAScript</strong>并没有提供可拖动的API, 那我们先来思考一下, 该如何实现拖动的功能~ 最上层有9个<strong>小方块(Square)</strong>, 分别代表着不同方向的边界, 拖动这个边界, 无非需要实现这下面的底层步骤.</p><blockquote><p><strong>鼠标落下(MouseDown) =&gt; 鼠标拖动 =&gt; 松开鼠标(MouseUp)</strong>.</p></blockquote><p>先创建一个<code>clipImage</code>函数作为入口函数, 主要<strong>获取目标元素和生成DOM节点(后面讲), 绑定事件</strong>.<br>先给小方块绑定一个<strong>鼠标落下事件(mousedown)</strong>, 当触发事件(MouseEvent)时, 监听器调用<code>onMousedown函数</code>.<br><code>onMousedown</code>函数中, 接受四个参数<code>e</code>事件, <code>box</code>目标元素, <code>ctrl</code>小方块的方向, <code>type</code>属性, 主要是用来记录数据并暴露给全局变量进行通讯.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Util工具函数</span></div><div class="line">  <span class="keyword">var</span> util = &#123;</div><div class="line">    <span class="attr">$</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// "全局变量", 记录状态</span></div><div class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</div><div class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</div><div class="line"></div><div class="line">  clipImage(<span class="string">'mainBox'</span>);</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</div><div class="line">    <span class="keyword">var</span> right = util.$(<span class="string">'#box .main .right'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Add mouse down event</span></div><div class="line">    up.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, box, up, <span class="string">'up'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line"></div><div class="line">    <span class="comment">// 将接受到的信息暴露出去.</span></div><div class="line">    _MainBox = box;</div><div class="line">    _MainCtrl = ctrl;</div><div class="line">    _MainType = type;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>紧接着来计算拖动的距离, 在<code>onMouseDown</code>函数上将<code>moving</code>拖动标记设为<code>1</code>(true也行).<br><img src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-1.png" title="大致坐标关系图"></p><p>判断拖动的标记是否启动, 创建<code>getPosition</code>函数获取元素相对于页面左/上边的偏移量用于计算拖动的偏移量. 如下图.<br><img src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-2.png" title="原理图"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化</span></div><div class="line"><span class="keyword">var</span> moving = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line"></div><div class="line">  _MainBox = box;</div><div class="line">  _MainCtrl = ctrl;</div><div class="line">  _MainType = type;</div><div class="line"></div><div class="line">  <span class="comment">// 移动计算偏移量并设置到box上</span></div><div class="line">   moving = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取元素相对于文档的距离</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> left = node.offsetLeft;</div><div class="line">  <span class="keyword">var</span> top = node.offsetTop;</div><div class="line">  <span class="keyword">var</span> parent = node.offsetParent;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(parent) &#123;</div><div class="line">    left += parent.offsetLeft;</div><div class="line">    top += parent.offsetTop;</div><div class="line">    parent = parent.offsetParent;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="string">"left"</span>: left, <span class="string">"top"</span>: top&#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 监听鼠标相对于页面的坐标</span></div><div class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (moving) &#123;</div><div class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line">    <span class="comment">// 父容器的宽高</span></div><div class="line">    <span class="keyword">var</span> addWidth, addHeight;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line"></div><div class="line">    <span class="comment">// 相对于屏幕左/上的距离</span></div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(_MainType) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">"right"</span>:</div><div class="line">        addWidth = e.clientX - boxX - width;</div><div class="line">        _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><img src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-2.png" title="大致坐标关系图"><p>紧接着我们会发现虽然实现了拖动的效果, 但是松开鼠标<code>box宽度</code>还是会随着鼠标变化. 这是因为还没有重置标记. 随即监听<code>鼠标松开事件(MouseUp)</code>. 单边拖动就完成啦~<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 鼠标松开</span></div><div class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// reset</span></div><div class="line">  moving = <span class="number">0</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h4 id="整理归纳"><a href="#整理归纳" class="headerlink" title="整理归纳"></a>整理归纳</h4><p>我们将<code>switch</code>里的代码整理出来. 装进函数里去调用. 相续的将各个方向也加上, 原理也是同理. 值得注意的是将<strong>右面和下面</strong>要加上<code>box</code>的宽高才能计算出来. <strong>剩下四个边角, 如左上什么的其实就是同时调用正方位的两个函数实现的实现起来.</strong> 然后拖动功能就大功告成啦~<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> util = &#123;</div><div class="line">    <span class="attr">$</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</div><div class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</div><div class="line"></div><div class="line">  clipImage(<span class="string">'mainBox'</span>);</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</div><div class="line">    <span class="keyword">var</span> up = util.$(<span class="string">'#box .main .up'</span>);</div><div class="line">    <span class="keyword">var</span> down = util.$(<span class="string">'#box .main .down'</span>);</div><div class="line">    <span class="keyword">var</span> right = util.$(<span class="string">'#box .main .right'</span>);</div><div class="line">    <span class="keyword">var</span> rightUp = util.$(<span class="string">'#box .main .right-up'</span>);</div><div class="line">    <span class="keyword">var</span> rightDown = util.$(<span class="string">'#box .main .right-down'</span>);</div><div class="line">    <span class="keyword">var</span> left = util.$(<span class="string">'#box .main .left'</span>);</div><div class="line">    <span class="keyword">var</span> leftUp = util.$(<span class="string">'#box .main .left-up'</span>);</div><div class="line">    <span class="keyword">var</span> leftDown = util.$(<span class="string">'#box .main .left-down'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Add mouse down event</span></div><div class="line">    right.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, right, <span class="string">'right'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    up.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, up, <span class="string">'up'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    down.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, down, <span class="string">'down'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    left.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, left, <span class="string">'left'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    leftUp.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, leftUp, <span class="string">'leftUp'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    leftDown.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, leftDown, <span class="string">'leftDown'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    rightUp.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, rightUp, <span class="string">'rightUp'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    rightDown.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      onMousedown(e, boxMain, rightDown, <span class="string">'rightDown'</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [onMousedown description] Mouse down event</div><div class="line">   * @param  &#123;[type]&#125; e    [Event]</div><div class="line">   * @param  &#123;[type]&#125; box  [target vessel]</div><div class="line">   * @param  &#123;[type]&#125; ctrl [Square DOM node]</div><div class="line">   * @param  &#123;[type]&#125; type [Square direction]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</div><div class="line">    _MainBox = box;</div><div class="line">    _MainCtrl = ctrl;</div><div class="line">    _MainType = type;</div><div class="line"></div><div class="line">    moving = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取元素相对于左边的距离</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> left = node.offsetLeft;</div><div class="line">    <span class="keyword">var</span> top = node.offsetTop;</div><div class="line">    <span class="keyword">var</span> parent = node.offsetParent;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(parent) &#123;</div><div class="line">      left += parent.offsetLeft;</div><div class="line">      top += parent.offsetTop;</div><div class="line">      parent = parent.offsetParent;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="string">"left"</span>: left, <span class="string">"top"</span>: top&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 鼠标移动</span></div><div class="line">  <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (moving) &#123;</div><div class="line">      <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line">      <span class="comment">// 父容器的宽高</span></div><div class="line">      <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line"></div><div class="line">      <span class="comment">// 相对于屏幕左/上的距离</span></div><div class="line">      <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line"></div><div class="line">      <span class="keyword">switch</span>(_MainType) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"right"</span>:</div><div class="line">          right(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"up"</span>:</div><div class="line">          up(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"down"</span>:</div><div class="line">          down(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"left"</span>:</div><div class="line">          left(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"leftUp"</span>:</div><div class="line">          leftUp(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"leftDown"</span>:</div><div class="line">          leftDown(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"rightUp"</span>:</div><div class="line">          rightUp(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"rightDown"</span>:</div><div class="line">          rightDown(e);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// 鼠标松开</span></div><div class="line">  <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    moving = <span class="number">0</span>;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">right</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</div><div class="line"></div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</div><div class="line"></div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</div><div class="line"></div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">left</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</div><div class="line"></div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftUp</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</div><div class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</div><div class="line"></div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</div><div class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftDown</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</div><div class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</div><div class="line"></div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</div><div class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightUp</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</div><div class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</div><div class="line"></div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">"px"</span>;</div><div class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">"px"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightDown</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</div><div class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</div><div class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</div><div class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</div><div class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</div><div class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</div><div class="line"></div><div class="line">    _MainBox.style.height = height + addHeight + <span class="string">"px"</span>;</div><div class="line">    _MainBox.style.width = width + addWidth + <span class="string">"px"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p><strong> &lt;– 努力填坑中~ –&gt; </strong></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/17/Javascript深入解析-裁剪图片效果/image-01.png&quot;&gt;
&lt;p&gt;在生活中我们时常能看到这种图片裁剪的效果, 那么他实际上底层的原理是怎么实现的呢? 让我们深入的解剖一下.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="原理解析" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数组方法深入研究之三 (基础算法)</title>
    <link href="http://yoursite.com/2017/11/06/Basic%20Algorithm%20Scripting%20-%203/"/>
    <id>http://yoursite.com/2017/11/06/Basic Algorithm Scripting - 3/</id>
    <published>2017-11-06T04:03:28.613Z</published>
    <updated>2017-11-29T04:36:15.692Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/11/06/Basic%20Algorithm%20Scripting%20-%203/code.png"><p>今天让继续来学习数组方法的用法~</p><a id="more"></a><h2 id="Sum-All-Numbers-in-a-Range"><a href="#Sum-All-Numbers-in-a-Range" class="headerlink" title="Sum All Numbers in a Range"></a>Sum All Numbers in a Range</h2><blockquote><p>题目描述</p></blockquote><p>&emsp;&emsp;传递给一个包含两个数字的数组。返回这两个数字和<strong>它们之间所有数字的和</strong>。最小的数字并非总在最前面。<br>比如传递<code>[1, 4]</code>会返回<code>10</code>, 即<code>1 + 2 + 3 + 4</code>.</p><h3 id="非数组方法"><a href="#非数组方法" class="headerlink" title="非数组方法"></a>非数组方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div><div class="line">  <span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr);</div><div class="line">  <span class="keyword">var</span> num = max - min;</div><div class="line">  <span class="keyword">var</span> total = min;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(num) &#123;</div><div class="line">    num--;</div><div class="line">    total += ++min;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> total;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sumAll([<span class="number">1</span>, <span class="number">1</span>]);</div></pre></td></tr></table></figure><p><strong> &lt;– 未待续~ 有空再深挖 –&gt; </strong></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/11/06/Basic%20Algorithm%20Scripting%20-%203/code.png&quot;&gt;
&lt;p&gt;今天让继续来学习数组方法的用法~&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ffc" scheme="http://yoursite.com/tags/ffc/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>通过sourcetree实现远程仓库与本地仓库关联</title>
    <link href="http://yoursite.com/2017/11/03/%E9%80%9A%E8%BF%87sourcetree%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94/"/>
    <id>http://yoursite.com/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/</id>
    <published>2017-11-03T13:55:50.809Z</published>
    <updated>2017-11-04T15:47:26.334Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;sourceTree 是当下比较流行的git客户端,简化了如何与Git存储库进行交互，从而可以专注于编码, 可以通过简单的Git GUI可视化来管理仓库, 提高效率.</p><p><img src="http://tc.ffsky.net/images/2017/11/03/a8ad904c186d87984da6a60b9f95f023.png" alt="sourcetree"></p><p>&emsp;&emsp;题归正转, 今天我们来说说如何通过sourcetree来将本地仓库与远程仓库关联.</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>&emsp;首先把本地仓库初始化.</p><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/init.png"><p>&emsp;再添加到sourcetree上<br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add.png"></p><p>&emsp;进入github.com -&gt; your profile -&gt; repositories(仓库) -&gt; New<br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-02.png"></p><p>&emsp;填写仓库信息, 复制仓库链接<br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-03.png"><br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-04.png"></p><p>&emsp;设置 -&gt; 添加 -&gt; 填写信息 -&gt; 确定<br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-01.png"><br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-05.png"></p><p>&emsp;然后就可以提交到github了~<br><img src="/blog/2017/11/03/通过sourcetree实现远程仓库与本地仓库关联/add-06.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;sourceTree 是当下比较流行的git客户端,简化了如何与Git存储库进行交互，从而可以专注于编码, 可以通过简单的Git GUI可视化来管理仓库, 提高效率.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tc.ffsky.net/images/2017/11/03/a8ad904c186d87984da6a60b9f95f023.png&quot; alt=&quot;sourcetree&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;题归正转, 今天我们来说说如何通过sourcetree来将本地仓库与远程仓库关联.&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="sourcetree" scheme="http://yoursite.com/tags/sourcetree/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Normalize与reset</title>
    <link href="http://yoursite.com/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/"/>
    <id>http://yoursite.com/2017/10/15/浅谈Normalize与reset/</id>
    <published>2017-10-15T01:03:28.000Z</published>
    <updated>2017-12-30T13:47:51.981Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/10/15/浅谈Normalize与reset/normalize.jpg"><p>前言: 在一次开发的时候, 发现团队中的小伙伴对normalize与reset都持有不同分歧. 趁着这事来谈谈, normalize与reset都有什么区别, 该如何取舍.<br><a id="more"></a></p><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><strong>reset</strong>, 顾名思义就是重置的意思. 最早的一份CSS reset来自Tantek的<code>undohtml.css</code>, Tantek根据自己的需要，对浏览器的默认样式进行了一些重置。</p><p>早期的浏览器支持和理解的CSS规范不同，导致渲染页面时效果不一致，会出现很多兼容性问题, <strong>reset</strong> 的作用是让各个浏览器的CSS样式有一个统一的基准，而这个基准更多的就是“清零”. </p><p>此后国内出现<code>* {margin: 0, padding: 0}</code>这种暴力清除全部样式的reset出现.</p><h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h2><p><code>Normalize</code>, 从字面上也理解也就是使其正常化. 这是<code>css reset</code>的一个代替方案.<br><code>Normalize</code>相对「平和」, 注重通用的方案，重置掉该重置的样式，保留有用的<code>user agent</code>样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的。</p><p>创造<code>normalize.css</code>的目的主要是: </p><ul><li><strong>保护有用的浏览器默认样式</strong>而不是完全去掉它们</li><li><strong>一般化的样式</strong>：为大部分HTML元素提供</li><li><strong>修复浏览器自身的bug</strong>并保证各浏览器的一致性</li><li><strong>优化CSS可用性</strong>：用一些小技巧</li><li><strong>解释代码</strong>：用注释和详细的文档来</li></ul><h2 id="相比两者的利弊"><a href="#相比两者的利弊" class="headerlink" title="相比两者的利弊"></a>相比两者的利弊</h2><p>那么相对来说, 两者之间又有什么区别呢? 这里引用一下知乎用户的回答.</p><blockquote><p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧</p><p>Normalize.css 是改良派。他们提倡，各个元素都有其存在的道理，简单粗暴地一视同仁是不好的。body 那一圈确实挤压了页面的生存空间，那就改掉。士农工商，谁有谁的作用，给他们制定个规范，确保他们在任何浏览器里都干好自己的活儿。</p></blockquote><p>然而在实际项目中, 为了还原设计图我们并不需要这种自带特性, 因此可以根据项目的需求将我们常用的标签进<strong>格式化</strong>, 但也不是跟传统的<code>reset</code>那样粗暴. </p><p>因为传统的<code>reset</code>的很多清除默认样式是无意义的, 是浪费性能的. 就比如<code>&lt;li&gt;</code>, 人家生来就没有<code>margin padding</code>, 干嘛非要给人家加个<code>margin: 0</code>上去呀??? <code>h1~h6</code>标签虽然有<code>margin</code>没有<code>padding</code>呀! 也不要一棒子全打死啦! 其实这是不严谨的态度.</p><p>以下的代码可以作为针对项目需求的进行调整. 这样看下去是不是舒服简洁多了呢? 也减少了很多无意义的性能损耗何乐而不为呢.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  <span class="selector-tag">body</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">form</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.6</span> Monda,PingFang SC,Microsoft YaHei,sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong> 参考资料: </strong><br><a href="https://www.zhihu.com/question/20094066" target="_blank" rel="noopener">Normalize.css 与传统的 CSS Reset 有哪些区别？</a><br><a href="http://www.ayqy.net/blog/normalize%E3%80%81reset%E4%B8%8Ebase/" target="_blank" rel="noopener">normalize、reset与base</a><br><a href="https://segmentfault.com/a/1190000003021766" target="_blank" rel="noopener">关于CSS Reset 那些事（一）之 历史演变与Normalize.css</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/10/15/浅谈Normalize与reset/normalize.jpg&quot;&gt;
&lt;p&gt;前言: 在一次开发的时候, 发现团队中的小伙伴对normalize与reset都持有不同分歧. 趁着这事来谈谈, normalize与reset都有什么区别, 该如何取舍.&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>数组方法深入研究之二 (基础算法)</title>
    <link href="http://yoursite.com/2017/07/19/Basic%20Algorithm%20Scripting%20-%202/"/>
    <id>http://yoursite.com/2017/07/19/Basic Algorithm Scripting - 2/</id>
    <published>2017-07-19T11:12:09.588Z</published>
    <updated>2017-11-14T01:48:42.715Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e48206bbgy1flhd8j2b8xj21uo18g49f.jpg" alt="coding"></p><blockquote><p>数组方法的深入学习</p></blockquote><a id="more"></a><h2 id="Chunky-Monkey-分割数组"><a href="#Chunky-Monkey-分割数组" class="headerlink" title="Chunky Monkey(分割数组)"></a>Chunky Monkey(分割数组)</h2><p>猴子吃香蕉, 分割数组,把一个数组arr按照指定的数组大小<code>size</code>分割成若干个数组块。<br>例如:<br> &#8195;&#8195;hunk([1,2,3,4],2) =&gt; [[1,2],[3,4]];<br> &#8195;&#8195;chunk([1,2,3,4,5],2) =&gt; [[1,2],[3,4],[5]];</p><blockquote><p>思路</p></blockquote><p>&#8195;这道题重点主要是每<code>size</code>个值分割一个数组,这里我们可以使用以下几种方法来解题.</p><ol><li>while + splice</li><li>for + slice</li><li>while + slice</li></ol><p>第一种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// while + splice</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</div><div class="line">  <span class="comment">// 定义一个新数组和用来临时存放分割的空数组.</span></div><div class="line">  <span class="keyword">var</span> a = [], t = [], i = <span class="number">0</span>,</div><div class="line">      len = arr.length;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (i &lt; len)&#123;</div><div class="line">    t = arr.splice(<span class="number">0</span>, size);</div><div class="line">    a.push(t);</div><div class="line">    i += size;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</div></pre></td></tr></table></figure></p><p>&#8195;在这里值得注意的是,<code>len</code>保存<code>arr.length</code>的快照是必须的..因为splice会修改原来原来的数组.</p><p>第二种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for + splice</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = [], t = [], len = arr.length;</div><div class="line"></div><div class="line">  <span class="comment">// 数组中的个数小于size或者size是小于等于0的也就没有必要分割了</span></div><div class="line">  <span class="keyword">if</span> (len &lt;= size || size &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 它的重点主要是数组中的值的数量</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i += size) &#123;</div><div class="line">      <span class="comment">// 查询指定数</span></div><div class="line">      t = arr.slice(i, i + size);</div><div class="line">      a.push(t);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</div></pre></td></tr></table></figure></p><p>第三种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// while + slice</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = [], t = [], i = <span class="number">0</span>,</div><div class="line">      len = arr.length;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">    <span class="comment">// 查询的值</span></div><div class="line">    t = arr.slice(i, i += size);</div><div class="line">    a.push(t);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</div></pre></td></tr></table></figure></p><h2 id="Falsy-Bouncer-过滤数组假值"><a href="#Falsy-Bouncer-过滤数组假值" class="headerlink" title="Falsy Bouncer(过滤数组假值)"></a>Falsy Bouncer(过滤数组假值)</h2><p>删除数组中的所有假值。在JavaScript中，假值有false、null、0、””、undefined 和 NaN。</p><blockquote><p>思路</p></blockquote><p>&#8195;这道题比较有意思..一开始我走进了一个误区,想着单纯<code>return x !== false &amp;&amp; ...</code>这样简单的返回就可以了,后来发现在处理<code>NaN</code>时会很麻烦..<code>isNaN()</code>还会把英文字符串也给过滤掉,再加上多个<code>&amp;&amp;</code>使得代码会变得繁乱,可读性不高.<br>&#8195;然后查阅了一番资料后,才注意到平时被忽略<code>Boolean()</code>的一些特性对于处理这种类型的问题简直不能太合适.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="comment">// 请把你的代码写在这里</span></div><div class="line">  <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(x);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]);</div></pre></td></tr></table></figure><p>&#8195;<strong>摘至<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noopener">MDN.Boolean</a> 的描述: </strong></p><blockquote><p>如果Boolean构造函数的参数不是一个布尔值,则该参数会被转换成一个布尔值.<strong>如果参数是 0, -0,  null, false, NaN, undefined, 或者空字符串 (“”),生成的Boolean对象的值为false. </strong>其他任何值,包括任何对象或者字符串”false”, 都会创建一个值为true的Boolean对象.</p></blockquote><h2 id="Seek-and-Destroy-摧毁指定数组"><a href="#Seek-and-Destroy-摧毁指定数组" class="headerlink" title="Seek and Destroy (摧毁指定数组)"></a>Seek and Destroy (摧毁指定数组)</h2><p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</p><blockquote><p>实现原理</p></blockquote><p>&#8195;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter()</a> 为数组中的每个元素调用一次 <code>callback</code>函数，并利用所有使得 <code>callback</code> 返回 true 或 等价于 true 的值 的元素创建一个<strong>新数组.</strong><br>&#8195;<code>filter()</code>从头至尾遍历数组,<strong>若回调函数返回的是true(通过测试),就存入新数组中.若返回的是false,则过滤掉.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="comment">// 先将第一个参数隔开,定义一个储存着待移除的空数组</span></div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>], removeArgs = [];</div><div class="line"></div><div class="line">  <span class="comment">// 要被删除的参数装进'removeArgs'里</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    removeArgs.push(<span class="built_in">arguments</span>[i]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 遍历'args',若'removeArgs'中不存在'value',应该返回-1.反之返回false被过滤掉.</span></div><div class="line">  <span class="keyword">return</span> args.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeArgs.indexOf(value) === <span class="number">-1</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><h2 id="Where-do-I-belong-数组排序并找出元素索引"><a href="#Where-do-I-belong-数组排序并找出元素索引" class="headerlink" title="Where do I belong (数组排序并找出元素索引)"></a>Where do I belong (数组排序并找出元素索引)</h2><p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。  </p><p>&#8195;举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。  </p><p>&#8195; 同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。  </p><blockquote><p>思路</p></blockquote><p>&#8195;这个没啥好说的了..将第二个参数<code>push</code>进数组中,再进行排序.排序后通过<code>indexOf()</code>来实现功能.<strong>不过需要注意的是<code>sort</code>默认是按照’Unicode’编码进行排序的.</strong></p><h2 id="Caesars-Cipher-凯撒密码"><a href="#Caesars-Cipher-凯撒密码" class="headerlink" title="Caesars Cipher (凯撒密码)"></a>Caesars Cipher (凯撒密码)</h2><p>风靡全球的凯撒密码Caesar cipher，又叫移位密码。<br>移位密码也就是密码中的字母会按照指定的数量来做移位。<br>一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>写一个ROT13函数，实现输入加密字符串，输出解密字符串。<br>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。  </p><blockquote><p>思路</p></blockquote><p>&#8195;本次练习用到<code>String.charCodeAt()</code>和<code>String.fromCharCode()</code>,首先来查询字符串的Unicode字符.<br>&#8195;根据Unicode表我们得知:</p><ul><li>小于65和大于90对应的就是数字和小写字符a-z</li><li>大于等于65和小于等于77对应的就是大写字符A-M (13位)</li><li>大于等于78和小于等于90对应的就是大写字符N-Z<br>&#8195;ROT13的功能就是移位,如果序号小于78(A-M字母)，使用String.fromCharCode()转换成该序号加13的字符,反之减13.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// LBH QVQ VG!</span></div><div class="line">  <span class="keyword">var</span> newStr = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; str.length;i ++) &#123;</div><div class="line">    <span class="comment">// 查询每个字符串的Unicode编号</span></div><div class="line">    <span class="keyword">var</span> temp = str.charCodeAt(i);</div><div class="line">    <span class="comment">// 非大写字母,空格,数字等都不转换</span></div><div class="line">    <span class="keyword">if</span> (temp &lt; <span class="number">65</span> || temp &gt; <span class="number">91</span>) &#123;</div><div class="line">      newStr.push(str.charAt(i));</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 大于77(N-Z),就转换成该序号 - 13的字符串.</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; <span class="number">77</span>) &#123;</div><div class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp - <span class="number">13</span>));</div><div class="line">    <span class="comment">// 小于78(A-M),就转换成该序号 + 13的字符串</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp + <span class="number">13</span>));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newStr.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">rot13(<span class="string">"SERR PBQR PNZC"</span>);  <span class="comment">// 你可以修改这一行来测试你的代码</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e48206bbgy1flhd8j2b8xj21uo18g49f.jpg&quot; alt=&quot;coding&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数组方法的深入学习&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ffc" scheme="http://yoursite.com/tags/ffc/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>数组方法深入研究之一 (基础算法)</title>
    <link href="http://yoursite.com/2017/07/16/Basic%20Algorithm%20Scripting%20-%201/"/>
    <id>http://yoursite.com/2017/07/16/Basic Algorithm Scripting - 1/</id>
    <published>2017-07-16T07:09:34.780Z</published>
    <updated>2017-11-14T01:45:19.740Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e48206bbgy1flhd6wd575j21040o3tb8.jpg" alt="coding"></p><blockquote><p>一些基础的算法练习</p></blockquote><a id="more"></a><h2 id="Palindromes-回文处理"><a href="#Palindromes-回文处理" class="headerlink" title="Palindromes(回文处理)"></a>Palindromes(回文处理)</h2><p>Palindromes称之为回文。在中文文当中是指倒着念和顺着念都是相同的，前后对称.</p><ul><li>正则表达式</li><li>replace()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> string = str.replace(<span class="regexp">/[\W_]/g</span>,<span class="string">''</span>).toLowerCase();</div><div class="line">  <span class="keyword">var</span> replaceStr = string.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  <span class="keyword">return</span> replaceStr === string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">palindrome(<span class="string">"eye"</span>);    <span class="comment">// true</span></div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;首先对字符串进行处理..去掉字符串多余的标点符号和空格，然后把字符串转化成小写.<br>&#8195;<code>split</code>把字符串拆分为一个字符串组成的数组.<code>reverse</code>反转数组顺序,<code>join</code>拼接字符串.</p><h2 id="Title-Case-a-Sentence-首个单词字母大写"><a href="#Title-Case-a-Sentence-首个单词字母大写" class="headerlink" title="Title Case a Sentence(首个单词字母大写)"></a>Title Case a Sentence(首个单词字母大写)</h2><p>句中单词首字母大写,确保字符串的每个单词首字母都大写，其余部分小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">L</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> L.toUpperCase();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">titleCase(<span class="string">"I'm a little tea pot"</span>);    <span class="comment">// I'm A Little Tea Pot</span></div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;首先把字符串转换为小写,再用正则匹配带空格或者就字母开头的首个字母<code>replace</code>替换成大写字母.</p><h2 id="Return-Largest-Numbers-in-Arrays-返回数组最大的数字"><a href="#Return-Largest-Numbers-in-Arrays-返回数组最大的数字" class="headerlink" title="Return Largest Numbers in Arrays(返回数组最大的数字)"></a>Return Largest Numbers in Arrays(返回数组最大的数字)</h2><p>找出多个数组中的最大数,并返回一个新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="comment">// 请把你的代码写在这里</span></div><div class="line">  <span class="keyword">var</span> count = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i ++) &#123;</div><div class="line">      <span class="keyword">var</span> a = arr[i].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b-a;</div><div class="line">      &#125;);</div><div class="line">      count.push(a[<span class="number">0</span>]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);    <span class="comment">// [5,27,39,1001]</span></div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;新定义一个数组,遍历传进来的数组进行从大到小排序,将排序后最大的数<code>push</code>进新的数组<code>count</code>最后再返回.</p><h2 id="Confirm-the-Ending-检查字符串结尾"><a href="#Confirm-the-Ending-检查字符串结尾" class="headerlink" title="Confirm the Ending(检查字符串结尾)"></a>Confirm the Ending(检查字符串结尾)</h2><p>检查字符串结尾,判断一个字符串(str)是否以指定的字符串(target)结尾。<br>如果是，返回true;如果不是，返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> l = str.length - target.length;</div><div class="line">  <span class="keyword">if</span> (str.substr(l) === target) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">confirmEnding(<span class="string">"Connor"</span>, <span class="string">"n"</span>);                         <span class="comment">// false</span></div><div class="line">confirmEnding(<span class="string">"Bastian"</span>, <span class="string">"n"</span>);                        <span class="comment">// true</span></div><div class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"me"</span>);  <span class="comment">// true</span></div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;乍一看好像挺麻烦的样子,容我们深入一看却发现好像并没有想象中的麻烦..<br>&#8195;这里用上了<code>String.prototype.substr()</code>而参数start是一个字符的索引,把字符串<code>str.length - target.length</code>就可以对比结尾字符串是否一样了.</p><h2 id="Repeat-a-string-repeat-a-string-重复输出字符串"><a href="#Repeat-a-string-repeat-a-string-重复输出字符串" class="headerlink" title="Repeat a string repeat a string(重复输出字符串)"></a>Repeat a string repeat a string(重复输出字符串)</h2><p>重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</p><p>&#8195;对于这种题目可以使用两种方法解决:</p><ul><li>递归</li><li>while循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种使用递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">  <span class="comment">// 请把你的代码写在这里</span></div><div class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> str + repeat(str, num - <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repeat(<span class="string">"abc"</span>, <span class="number">3</span>);   <span class="comment">// "abcabcabc"</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第二种使用while</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> s = <span class="string">''</span>;</div><div class="line">  <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</div><div class="line">    s += str;</div><div class="line">    num --;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repeat(<span class="string">"abc"</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;递归一般放进<code>if()</code>判断语句中,是一种通过重复地调用函数本身,逐次减少num的值来实现效果.<br>第二种使用了<code>while</code>语句,每调用一次就递减1,直至<code>num &gt; 0</code>.</p><p>Truncate a string(截断字符串)<br>截断字符串,如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。<br>插入到字符串尾部的三个点号也会计入字符串的长度。如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">  <span class="comment">// 首先判断num的值是不是大于字符串的长度,若是,那就没有必要省略了.</span></div><div class="line">  <span class="keyword">if</span>(num &gt;= str.length) &#123;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt;= <span class="number">3</span>) &#123;</div><div class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>,num) + <span class="string">"..."</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>,num<span class="number">-3</span>) + <span class="string">"..."</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="string">"A-tisket a-tasket A green and yellow basket"</span>.length);</div></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>&#8195;slice截取字符串.substr(),indexOf()和lastIndexOf()办法同理.<br><a href="https://www.w3cplus.com/javascript/confirm-the-ending.html" target="_blank" rel="noopener">https://www.w3cplus.com/javascript/confirm-the-ending.html</a> 大漠老师有一篇文章对此使用有着更详细的说明.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e48206bbgy1flhd6wd575j21040o3tb8.jpg&quot; alt=&quot;coding&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些基础的算法练习&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ffc" scheme="http://yoursite.com/tags/ffc/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
