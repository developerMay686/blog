<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从搭建到部署，快速构建一个私人博客</title>
      <link href="/blog/2019/08/19/hexo-blog/"/>
      <url>/blog/2019/08/19/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>有时候我们希望有一个受控的博客，来记录或分享一些东西。这个博客的主题内容由你自己来决定，可以是技术分享(编程、汉化分享等)，也可以是生活感想。</p><a id="more"></a><p>本文将介绍一个可以迅速搭建并部署的受控博客。阅读本文前，希望你对以下知识点有所了解:</p><ul><li><code>git(版本控制)</code> 的基础使用</li><li><code>markdown</code> 的使用</li></ul><h2 id="为什么要搭建博客"><a href="#为什么要搭建博客" class="headerlink" title="为什么要搭建博客"></a>为什么要搭建博客</h2><p>在线类博客有很多选择，为什么我们需要从零搭建新的博客呢？自己搭建的博客有什么好处吗？</p><p>首先，前文所提的 <strong>“博客受控”</strong>，指的就是能够自己控制的博客的样式、内容等，自己想怎么改就怎么改。</p><p>内容受控是指我们知道在线类的博客是受平台限制的，这意味着你所发表的内容是需要受审才能发出的，一些敏感的技术词汇，该篇文章都可能会被和谐或被删除。但在自己搭建博客就没有这样的问题，最起码能保留源文件。</p><p>其二，博客的样式是受控的。像著名在线博客<code>CSDN</code>上一些博主的文章确实是有学习参考的价值，但问题的是该站广告是在是太多了，字体和排版的阅读体验并不太好。但如果是自己搭建的博客的话，就可以自己着手优化这些问题。</p><p>但博客的搭建还需要我们从各方面考虑利弊。平台类博客会有相应的推荐系统，会对同类型文章相互引流，在 SEO 方面会做得比我们好。</p><p>个人搭建的博客，刚起步时的浏览量并不高，但是可以通过<code>SEO</code>等方式来逐步增加自己网站的权重。或者提高博客的质量和干货，读者认为文章有价值，自然会收藏起来形成熟客。</p><p>那么博客能写什么东西呢？在日常生活中，有很多知识点是呈碎片状，写博客的本质上就是对自己知识的一种梳理，然后再将这些知识分享出来，可能会有对这方面知识有疑惑，或者想找到解决方案，自身分享出来的东西能给读者做一定的参考。同时这也会是一个良性循环，因为分享的同时，你可能也需要去查询一些资料，同时也可以找到别人遇到过并分享出来的解决方案，是一个相互收益的过程。</p><p>我们的基本需求是梳理与分享，那么更应该把注意力放在内容本身，网站布局的排版样式等则是增加读者阅读体验的问题。因此我们可以使用现成的博客框架快速完成这些事。</p><p>博客框架有很多种选择，笔者选择的是 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==" title="https://hexo.io/zh-cn/">Hexo<i class="fa fa-external-link"></i></span>，因为它足够便捷优雅。</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p><code>Hexo</code> 依赖 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">Node.js<i class="fa fa-external-link"></i></span> 和 <code>NPM</code>包管理，<code>Node.js</code> 安装后一般会自带<code>NPM</code>。</p><p>我们打开终端(<code>Windows PowerShell / cmd.exe</code>、<code>bash</code>、<code>macOS</code> 里的终端)，输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 npm 是否安装成功</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo cli，</span></span><br><span class="line"><span class="comment"># 如果安装速度过慢的话，可以安装国内的淘宝镜像</span></span><br><span class="line"><span class="comment"># 在命令行输入 ` npm install -g cnpm --registry=https://registry.npm.taobao.org`</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 hexo 是否安装成功，并查看版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>依赖安装成功后，我们可以在命令行输入 <code>hexo help</code> 查看使用方式(描述是英文，示例部分笔者将其转为中文):</p><p><strong><code>Usage: hexo &lt;command&gt;</code></strong></p><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td><code>help</code></td><td>获取命令的帮助</td></tr><tr><td><code>init</code></td><td>创建一个新的 Hexo 文件夹</td></tr><tr><td><code>version</code></td><td>显示版本信息</td></tr></tbody></table><p>使用 <code>hexo help [command]</code> 可以查看更多的信息, 如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span> init</span><br><span class="line"><span class="comment"># Usage: hexo init [destination]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Description(描述):</span></span><br><span class="line"><span class="comment"># 在指定的路径或当前目录中创建一个新的Hexo文件夹.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments（参数）:</span></span><br><span class="line"><span class="comment">#  destination  文件夹路径。 如果未指定，则在当前文件夹中初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Options（选项）:</span></span><br><span class="line"><span class="comment">#  --no-clone    复制文件而不是从GitHub克隆</span></span><br><span class="line"><span class="comment">#  --no-install  跳过 npm 依赖安装(默认初始化会自动装依赖)</span></span><br></pre></td></tr></table></figure><p><strong>全局选项：</strong></p><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td><code>--config</code></td><td>指定配置文件而不是使用默认的 <code>_config.yml</code></td></tr><tr><td><code>--cwd</code></td><td>指定 CWD</td></tr><tr><td><code>--debug</code></td><td>显示终端中的所有详细消息</td></tr><tr><td><code>--draft</code></td><td>显示草稿帖子</td></tr><tr><td><code>--safe</code></td><td>禁用所有插件和脚本</td></tr><tr><td><code>--silent</code></td><td>在控制台上隐藏输出</td></tr></tbody></table><p>在官网 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=" title="https://hexo.io/zh-cn/docs/commands">commands<i class="fa fa-external-link"></i></span> 中可以找到全部完整的解释。</p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>在终端上，我们可以看到有一个 <code>init</code> 的命令，我们可以使用这个命令来初始化 <code>hexo</code> 项目，但再建站之前我们需要先决定在哪里存放博客源代码。</p><p>我推荐使用如微软的 <span class="exturl" data-url="aHR0cHM6Ly9vbmVkcml2ZS5saXZlLmNvbS9hYm91dC9lbi1VUy8=" title="https://onedrive.live.com/about/en-US/">OneDrive<i class="fa fa-external-link"></i></span>（win10 系统自带）之类的云文件夹。你可以白嫖它 5G 的云储存空间。当你在<code>设备A</code>下修改了文件，它会自动同步到云端上。切换回<code>设备B</code>并登录账号后，它又会自动从云端下载数据，是一个便捷的方式。</p><p>但值得注意的是 <code>OneDrive</code> 毕竟是国外服务，由于众所周知的原因可能需要科学上网才能使用。该方式只是数据备份与同步的问题，不使用它也不会影响下文的构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你是 unix 系统的话，可以使用该命令查看当前路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化文件夹名为 blog</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span></span><br><span class="line"><span class="comment"># other install info ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>安装完成后目录如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   (网站的配置信息)</span><br><span class="line">├── package.json  (应用依赖信息)</span><br><span class="line">├── node_modules  (依赖包)</span><br><span class="line">├── scaffolds     (模板文件)</span><br><span class="line">├── source        (资源文件夹是存放用户资源的地方)</span><br><span class="line">|   ├── _drafts      (草稿文件夹，刚初始化时可能不存在)</span><br><span class="line">|   └── _posts       (文章/帖子源码列表)</span><br><span class="line">└── themes        (主题)</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>建站完成后我们需要进行 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==" title="https://hexo.io/zh-cn/docs/configuration">配置<i class="fa fa-external-link"></i></span>，<code>hexo</code> 中主要有两项配置。一项是<code>站点配置文件</code>，路径为 <code>/_config.yml</code>。另一项是<code>主题配置文件</code>,路径是<code>/themes/(下载的主题)/_config.yml</code>。</p><p>我们可以先在<code>站点配置文件</code>修改以下基础选项:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站主标题，SEO元素之一</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网站副标题，可选</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站描述, SEO元素之一，用于告诉搜索引擎关于这个站点的描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">分享生活、分享技术</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站的关键词，如:</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Front</span> <span class="string">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">anran758</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站使用的语言, 由于 Hexo 具备多语言配置，默认为英文，我们需要修改回中文语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>初始化项目后默认会安装相关的依赖，接着在命令行输入如下命令来<strong>运行博客</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务，默认端口为 4000，启动服务后可以在浏览器输入 `http://localhost:4000` 查看效果</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># or 简写方式</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用 -p, 指定 9000 端口</span></span><br><span class="line">hexo s -p 9000</span><br></pre></td></tr></table></figure><p><img alt="blog preview" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5vqfyezoqj21yo0wgwmp.jpg"></p><h3 id="写作步骤"><a href="#写作步骤" class="headerlink" title="写作步骤"></a>写作步骤</h3><p>我们一般通过命令行来操作博客:</p><p>比如创建文章的方式如下: <code>hexo new [layout] &lt;title&gt;</code></p><p><code>layout</code>是指定布局，<code>Hexo</code>默认有<code>post</code>、<code>page</code> 和 <code>draft</code> 三种布局，它们分别对应不同的路径。我们也可以自定义布局，但实际页面会和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>按照我个人的写作习惯，通常写作步骤是：</p><ol><li>创建草稿(<code>drafts</code>)</li><li>在草稿上进行写作</li><li>整理细节并在本地服务器上查看效果(<code>server</code>)</li><li>发布至正式的帖子上</li><li>生成静态文件并部署(后续讲)</li></ol><hr><p><strong>创建草稿(<code>drafts</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">"My first post"</span></span><br><span class="line"><span class="comment"># INFO  Created: ~/blog/source/_drafts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>在初次创建草稿会生成一个名为 <code>_drafts</code> 的草稿文件夹，接着该文件夹下有一个我们刚刚创建的草稿，名为 <code>My-first-post.md</code> 的 <code>markdown</code> 文件，文件内容如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My first post</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>在本地服务器查看草稿(<code>drafts</code>)</strong></p><p>我们可以启动本地服务器一边写作一边预览,但默认情况下草稿是不会被展示出来的，如果你想查看草稿的话，可以输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 9000 --draft</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Hexo is running at http://localhost:9000 . Press Ctrl+C to stop.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要退出服务器，按住 control + c</span></span><br></pre></td></tr></table></figure><p><img alt="preview" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5vuljnkm9j21yu0w40zq.jpg"></p><p><strong>发布草稿(<code>publish</code>)</strong></p><p>如果我们在本地服务器上校队完草稿细节后，可以将草稿发布为文章，否则在后续生成博客静态文件时不会被打包出来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo publish [layout] &lt;filename&gt;</span></span><br><span class="line"><span class="comment"># 将草稿发布为文章</span></span><br><span class="line">$ hexo publish post My-first-post</span><br><span class="line"><span class="comment"># INFO  Published: ~/blog/source/_posts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>输入命令后你可以发现发布的文章被转移到了<code>source/_posts/</code>上，这样就完成了本地的文章发布。</p><p><strong>生成静态文件(<code>generate</code>)</strong></p><p><code>Hexo</code>框架的一项工作就是将源文件 <code>markdown</code> 最后生成为 <code>HTML</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Files loaded in 275 ms</span></span><br><span class="line"><span class="comment"># INFO  Generated: 2019/08/11/My-first-post/index.html</span></span><br><span class="line"><span class="comment"># INFO  1 files generated in 152 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写形式</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控文件变化，并生成静态文件</span></span><br><span class="line">$ hexo g --watch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文件并部署(部署后面单独章节来讲解)</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>我们熟悉完博客系统的操作后，接下来就是美化博客。<code>Hexo</code> 支持主题，我们可以根据<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvdGhlbWVzLmh0bWw=" title="https://hexo.io/zh-cn/docs/themes.html">官网的创建主题教程<i class="fa fa-external-link"></i></span>自己来设计，也可以直接在<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=" title="https://hexo.io/themes/">主题商城<i class="fa fa-external-link"></i></span> 中找现成的主题。这里以笔者推荐的主题 <code>Next</code> 为例:</p><p><img alt="hexo theme" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5xzcus0rjj20zs0nr0xh.jpg"><br><img alt="theme next" data-src="https://user-images.githubusercontent.com/16272760/61057395-d2deb000-a427-11e9-8e28-f348fe181795.png"></p><p>笔者一开始使用 <code>next</code> 主题时，版本才 <code>5.x</code>，当时仍有很多博客所需的东西没有集成。如今回头一看，发现 <code>next</code> 升级了好几个大版本。github 主题仓库也迁移至了 <code>https://github.com/theme-next</code> 里，乃至文档都有两个不同的版本。</p><p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=" title="https://theme-next.org/">新文档<i class="fa fa-external-link"></i></span>是采用它自身主题的一个<code>scheme</code>来建成，是全英文文档，可以保证信息资料是最新的。<span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v" title="http://theme-next.iissnan.com/">旧文档<i class="fa fa-external-link"></i></span>布局便于阅读，同时是中文文档，大多参数也能在该文档找到，但毕竟没有再过多的维护，建议还是以最新文档为参考。</p><p>安装主题可以通过<code>git clone</code>克隆至<code>blog/theme/</code>下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive/Blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主题前需要清除缓存与已部署的文件</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone 主题</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>接着在 <code>站点配置文件(/_config.yml)</code> 中启动 <code>theme</code>。再打开<code>主题配置文件(/themes/next/_config.yml)</code>选择 Scheme:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">- theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">+</span> <span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># 提供三种模式</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://ws1.sinaimg.cn/mw690/e48206bbgy1g5zgkcldo5j21o80ymgov.jpg"></p><p>评论、订阅、数据统计、SEO 等部分功能配置已经集成至 <code>next</code> 主题配置中，但大多还需要额外添加依赖还需要根据<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC8=" title="https://theme-next.org/docs/getting-started/">文档<i class="fa fa-external-link"></i></span>来配置。<code>next</code> 在主题配置中集成了由于配置自定义项过多，读者可以根据自己所需添加相应的统计、SEO 相关的 <code>app key</code> 等就不进一步展开讲。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>我们使用<code>git</code>进行部署，可以将网站部署至私人服务器、也可以部署到免费的<code>github pages</code>上。本文将介绍部署至<code>github</code>的方法，如果你还没有<code>github</code>账号的话，那你需要先<a href="github.com">注册一个账号</a>。</p><p>步骤如下:</p><ol><li><p>访问<code>github.com</code>，点击<code>sign up</code>注册账号。</p></li><li><p>进入注册页，输入账号密码和邮箱，输入验证码!</p><p><img alt="sign up" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g63444etcuj210g0rbadp.jpg"></p></li><li><p>选择免费用户</p><p><img alt="choose free account" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g63468y0e1j20ve0undjs.jpg"></p></li><li><p>接着是关于<code>github</code>推荐服务的调查，当然你也可以跳过它.</p><p><img alt="调查" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g63468y4m7j20uc0rrmzz.jpg"></p></li><li><p>验证完毕后，它会提示你创建一个仓库，这里我们先创建一个<code>blog</code>。</p><p><img alt="create blog" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g634ppf4mej20sz0nk416.jpg"></p></li><li><p>复制仓库链接，copy 至 <code>站点配置文件(/_config.yml)</code>里。同时安装<code>hexo-deployer-git</code>的依赖：</p><p><img alt="copy" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g634wyminzj20sx07owfv.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://yourname.github.io/blog</span>   <span class="comment"># 修改为 github io 的地址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span>                           <span class="comment"># 要将资源映射到仓库名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/yourname/blog.git</span>  <span class="comment"># blog 的 git 地址</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">gh-pages</span>                            <span class="comment"># 发布至 gp-pages 分支，如果该分支不存在，就会自动创建它</span></span><br></pre></td></tr></table></figure></li><li><p>接着开始部署。如果你还没配置<code>git</code>账号的话，它会提示你输入账号密码，输入正确的账号密码后就部署成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者使用`hexo d -g`, 两者是等价的效果</span></span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># *** Please tell me who you are.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line"><span class="comment">#  git config --global user.email "you@example.com"</span></span><br><span class="line"><span class="comment">#  git config --global user.name "Your Name"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to set your account's default identity.</span></span><br><span class="line"><span class="comment"># Omit --global to set the identity only in this repository.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fatal: unable to auto-detect email address (got '29625@DESKTOP-0R7P8H4.(none)')</span></span><br><span class="line"><span class="comment"># Logon failed, use ctrl+c to cancel basic credential prompt.</span></span><br><span class="line"><span class="comment"># Username for 'https://github.com': anran758</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 621 ms</span><br><span class="line">INFO  0 files generated <span class="keyword">in</span> 424 ms</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line"></span><br><span class="line">INFO  Congratulations! Your are using the latest version of theme NexT.</span><br><span class="line">Enumerating objects: 131, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (131/131), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (91/91), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (131/131), 257.72 KiB | 2.48 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 131 (delta 43), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (43/43), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/yourname/blog.git</span><br><span class="line"> * [new branch]      HEAD -&gt; gh-pages</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'gh-pages'</span> from <span class="string">'https://github.com/yourname/blog.git'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有配置全局 git 账号的话可以先配置，不然下次部署还是会提示你输入账号密码</span></span><br><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure></li><li><p>接着在我们创建的<code>blog</code>下进入<code>settings</code>项，设置 <code>github pages</code> 为 <code>gh-pages</code> 也就是之前在配置里设置的分支即可。这样就可以在线上查看我们部署的状况啦~</p></li></ol><p><img alt="settings" data-src="https://ws1.sinaimg.cn/large/e48206bbly1g63yzfwscgj21c008oq47.jpg"></p><p><img alt="githu pages" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g63z07oguzj20rp0mpdg9.jpg"></p><p><img alt="finish" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g63zglzk5nj21h80pnaab.jpg"></p><h2 id="优化与扩展"><a href="#优化与扩展" class="headerlink" title="优化与扩展"></a>优化与扩展</h2><p>下面介绍一下文档中没有提到的相关问题与扩展。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p><code>next</code> 有内置本地搜索的配置项，但文档上说明需要额外安装 <code>hexo-generator-searchdb</code> 这个依赖。但该项目现在已经被归档了，它还存在一些问题没有修复。你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d6cGFuL2hleG8tZ2VuZXJhdG9yLXNlYXJjaA==" title="https://github.com/wzpan/hexo-generator-search">hexo-generator-search<i class="fa fa-external-link"></i></span> 来代替它。接者在<code>站点配置文件</code>添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-search</span></span><br><span class="line"><span class="comment"># 站内搜索</span></span><br><span class="line"><span class="comment"># https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>在使用本地搜索功能时，你可能会遇到以下错误：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line">error on line 86 at column 35: Input is not proper UTF-8, indicate encoding !</span><br><span class="line">Bytes: 0x08 0xE8 0xB7 0x9F</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure><p>出现这种错误原因大多是因为搜狗输入法带来的特殊字符串，我们在源码中替换它即可。打开编辑器（比如<code>vscode</code>），在全局搜索错误信息<code>Bytes</code> 第一个字节 <code>/x08</code> 替换为空。</p><h3 id="github-emoji"><a href="#github-emoji" class="headerlink" title="github emoji"></a>github emoji</h3><p>如果你希望在博客中支持 <code>emoji</code> 的话，你可以安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyaW14L2hleG8tZmlsdGVyLWdpdGh1Yi1lbW9qaXM=" title="https://github.com/crimx/hexo-filter-github-emojis">hexo-filter-github-emojis<i class="fa fa-external-link"></i></span></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use Github Emojis</span></span><br><span class="line"><span class="comment"># Docs: https://github.com/crimx/hexo-filter-github-emojis</span></span><br><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  className:</span> <span class="string">github-emoji</span></span><br><span class="line"><span class="attr">  unicode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  styles:</span></span><br><span class="line"><span class="attr">  localEmojis:</span></span><br></pre></td></tr></table></figure><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>为了让搜索引擎能找到我们的网站，我还需要给搜索引擎的网络蜘蛛提供<strong>站点地图文件</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo sitemap 生成器以及百度的 sitemap 生成器</span></span><br><span class="line">npm install hexo-generator-sitemap hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>依赖安装完后在<code>站点配置文件</code>中添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-sitemap</span></span><br><span class="line"><span class="comment"># generate sitemap.</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expansion: hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="comment"># 针对百度进行优化的 sitemap，作者还是建议手动提交至百度会比较好</span></span><br><span class="line"><span class="comment"># https://github.com/coneycode/hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="设置无分页的归档"><a href="#设置无分页的归档" class="headerlink" title="设置无分页的归档"></a>设置无分页的归档</h3><p>如果你期望将归档目录在一页中全部加载出来，那么你可以添加如下配置: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-archive</span></span><br><span class="line"><span class="comment"># 该插件默认内置于 hexo 中，只需参考文档添加配置即可</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-archive</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="图片的引入"><a href="#图片的引入" class="headerlink" title="图片的引入"></a>图片的引入</h3><p>在 <code>hexo</code> 中引用图片主要有两种方式：</p><ul><li>在本地通过资源文件夹引入</li><li>使用图床</li></ul><p>在本地资源的引入，需要修改 <code>_config.yml</code> 的配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> 设置完选项后，以后每次使用 <code>hexo new [layout] &lt;title&gt;</code> 后就会生成一个同名的文件夹。然后可以使用 `</p>` 来引入图片资源:<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 例如插入一个 banner 图，hexo 会自动寻找同名文件夹下的文件 --&gt;</span></span></span><br><span class="line">&#123;% asset_img banner.png banner %&#125;</span><br><span class="line"></span><br><span class="line">这里是一段示例内容。</span><br></pre></td></tr></table></figure><p>该方法的缺点是需要占用本地资源，如果你是使用 <code>git</code> 进行部署，因为使 <code>.git</code> 文件变大(即便删除了该文件，它还会存在 <code>git</code> 的 commit 信息中)。</p><p>第二种方式可以使用图床，免费图床有个问题就是服务可能会不稳定，风险不由自己掌控，相对没那么保险。但是它能节省空间，甚至在网络传输上下载速度更快。如果使用图床的话，可以尝试<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N1eGlhb2dhbmcvV2VpYm9QaWNCZWQ=" title="https://github.com/Suxiaogang/WeiboPicBed">新浪微博图床<i class="fa fa-external-link"></i></span>，将插件下载至 <code>chrome</code>，登录后即可上传得到相应的 <code>url</code>.</p><h3 id="README"><a href="#README" class="headerlink" title="README"></a>README</h3><p>默认情况下，将源码生成部署至服务器会将上一次生成的数据覆盖掉。如果你期望在 <code>github</code>上保留一个 <code>README.md</code> 给读者看说明的话，可以通过 <code>_config.yml</code> 来设置它：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">['images/loading.gif',</span> <span class="string">'README.md'</span><span class="string">]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[环境搭建] 从零开始配置前端开发环境</title>
      <link href="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/"/>
      <url>/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/</url>
      
        <content type="html"><![CDATA[<p>前段时间更换了设备，正好趁着这个机会来记录一下适合前端开发的一个环境，以及推荐提高效率的应用。</p><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p><strong><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==" title="https://nodejs.org/zh-cn/">Node.js<i class="fa fa-external-link"></i></span></strong> 是<code>JavaScript</code>运行时，目前前端工程化必不可缺的一个环境。通常我们会选择稳定版本(LTS)进行下载。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL2dldC1ucG0=" title="https://www.npmjs.com/get-npm">NPM<i class="fa fa-external-link"></i></span></strong> 是<code>javascript</code>的包管理工具，也是目前<code>Node.js</code>默认的包管理工具。一般下载了<code>Node.js</code>后会附带<code>npm</code>，不用专门的去下载。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhcm5wa2cveWFybg==" title="https://github.com/yarnpkg/yarn">YARN<i class="fa fa-external-link"></i></span></strong> 是<code>Fackbook</code>开源的依赖管理包，和<code>npm</code>是做同样的工作，但相比<code>npm</code>安装依赖的速度会更加迅速。两者都是讲依赖写入<code>package.json</code>中，在使用习惯上是相近的。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=" title="https://git-scm.com/downloads">Git<i class="fa fa-external-link"></i></span></strong> 是最先进的代码版本控制软件。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="关于编辑器"><a href="#关于编辑器" class="headerlink" title="关于编辑器"></a>关于编辑器</h3><p>目前前端开发主流的编辑器有 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLzM=" title="https://www.sublimetext.com/3">sublimeText<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=" title="https://www.jetbrains.com/webstorm/">WebStorm<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v" title="https://code.visualstudio.com/">vscode<i class="fa fa-external-link"></i></span>，三种主流器各有特点:</p><ul><li><code>sublimeText</code>是一个十分轻巧的编辑器，在 macOS 上下载该软件仅需 15.2MB. 由于轻巧的缘故，很多那你所需的环境需要安装相应的插件，比如你可能需要某个语言的语法高亮，因此你需要在 store 上找到相应插件来提高你开发体验。然后该编辑器是付费软件(虽然可以无限试用</li><li><code>webStorm</code> 是一个功能强大的编辑器，同时也是一个付费软件，并不像<code>sublimeText</code>那样可以无限试用，由于功能太过于齐全，一些低配置的电脑可能会吃不消。以上特点是群友对<code>webStorm</code>的评价，笔者没有使用该编辑器，不过多评论。</li><li><code>vsocde</code> 是由微软开源的一个编辑器，虽然是后起之秀，但开源后该编辑器的设计与体验迅速吸引了一大批用户。它内置了一些前端基础的开发环境，针对<code>Node.js</code>还可以进行短点调试。</li></ul><p>笔者一开始也是<code>sublimeText</code>用户，但自从使用了<code>vscode</code>后就再也回不去了，因为确实是太好用了!</p><p><code>vscode</code>其中有一个插件叫做 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPVNoYW4uY29kZS1zZXR0aW5ncy1zeW5j" title="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">setiings sync<i class="fa fa-external-link"></i></span> , 它可以将你的编辑器配置上传至<code>gist</code>。就算你换了一个全新的设备，下载<code>vscode</code>后，再下载该插件，传入<code>Token</code>后就可以同步你所有的配置，十分的方便~</p><p><code>vscode</code>的配置可以查看该文章: <a href="https://anran758.github.io/blog/2018/02/06/dev-zero-configuration-vscode/">[环境搭建] 从零开始配置 vscode</a></p><h3 id="关于浏览器"><a href="#关于浏览器" class="headerlink" title="关于浏览器"></a>关于浏览器</h3><p>前端的工作更多时候是与用户打交道，我们的工作产出通常在浏览器页面上呈现。</p><p>浏览器通常提供了开发者工具以供开发者调试，要选择浏览器作为调试可以先参考目前市面的浏览器份额： 目前市面上主流的浏览器主要就是<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9pbnRsL3poLUNOL2Nocm9tZS8=" title="https://www.google.com/intl/zh-CN/chrome/">chrome<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwbGUuY29tL2NuL3NhZmFyaS8=" title="https://www.apple.com/cn/safari/">Safari<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwbGUuY29tL2NuL3NhZmFyaS8=" title="https://www.apple.com/cn/safari/">IE/Edge<i class="fa fa-external-link"></i></span>、<a href="opera">opera</a>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmlyZWZveC5jb20uY24v" title="https://www.firefox.com.cn/">firefox<i class="fa fa-external-link"></i></span>这五种浏览器。国内市场有<code>UC</code>浏览器等，但内核的大多都是采用<code>webkit</code>或者兼容低版本<code>IE</code>内核。</p><p>从 <span class="exturl" data-url="aHR0cHM6Ly9ncy5zdGF0Y291bnRlci5jb20=" title="https://gs.statcounter.com">statcounter<i class="fa fa-external-link"></i></span> 上我们可以看到浏览器市场份额，选中 <strong>Edit Chart Data</strong>, 再选择 <code>Region</code> 为 <code>China</code>, 我们就能看到中国浏览器市场份额的数据, 以 <strong>2018.07 - 2019.07</strong> 的趋势为例:</p><p><img alt data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5ugug3hhqj20zk0k0ae2.jpg"></p><p>从统计数据来看目前主要的趋势还是以<code>chrome</code>所使用的<code>webkit</code>内核作为主流，同时<code>chrome</code>的开发者工具对于开发人员十分的友好，因此有很多的开发者选择了该浏览器作为首选的调试工具。<code>chrome</code>还有一个便利就是登陆了谷歌账号后，可以在别的机器上进行同步插件和配置。</p><p>打开<code>chrome</code>，右键页面并选中 “<strong>检查</strong>“即可打开开发者工具，<code>chrome</code>的具体使用参考下面几篇文章:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vY2hyb21lL2Fuc3dlci8xNTcxNzk/aGw9emgtSGFucw==" title="https://support.google.com/chrome/answer/157179?hl=zh-Hans">Chrome 键盘快捷键<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3dpa2kuamlrZXh1ZXl1YW4uY29tL3Byb2plY3QvY2hyb21lLWRldnRvb2xzLw==" title="http://wiki.jikexueyuan.com/project/chrome-devtools/">Chrome 开发工具指南<i class="fa fa-external-link"></i></span></li></ul><h3 id="关于设计图"><a href="#关于设计图" class="headerlink" title="关于设计图"></a>关于设计图</h3><p>每个团队的设计师提供的设计图可能是不一致的，有些团队的设计师可能使用<code>Skitch</code>, 一个可以直接导出为<code>html</code>文件的设计图、有些则直接提供<code>PSD</code>文件。</p><p>如果要在两者当中选择，那么我更喜欢<code>PSD</code>的设计图。虽然<code>Skitch</code>导出的设计图可以直接查看每个元素的尺寸，但没有标注和测量的功能。<code>PSD</code>文件通常是源文件，可以在设计软件中打开，可以查看具体设计的详细信息。</p><p>打开<code>PSD</code>文件通常有两种方式：</p><ul><li><code>Photoshop</code>这个著名的设计软件就不必再多说了吧，优点是功能齐全，你想要的这里都有，缺点是具备一定的学习成本，功能繁多带来的问题就是眼花缭乱。</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZmFuY3lub2RlLmNvbS5jbi9weGNvb2s=" title="https://www.fancynode.com.cn/pxcook">PxCook<i class="fa fa-external-link"></i></span> 就是专门为前端与设计师协作的工具，阉割了开发所用不到的功能，具备各种标注于测量。</li></ul><h2 id="扩展应用"><a href="#扩展应用" class="headerlink" title="扩展应用"></a>扩展应用</h2><p>有了以上的环境其实就可以投入开发了，但实际工作中还是不太够用，我们需要添加一些好用插件或者工具可以增加效率~ </p><h3 id="chrome-插件"><a href="#chrome-插件" class="headerlink" title="chrome 插件"></a>chrome 插件</h3><p>下面推荐一些比较好用的开发类插件，但链接需要科学上网才能访问：</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvbWFya2Rvd24tcHJldmlldy1wbHVzL2ZlYmlsa2JmY2JoZWJmbm9rYWZlZmVhY2ltamRja2ds" title="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl">Markdown Preview Plus<i class="fa fa-external-link"></i></span></strong><br><code>markdown</code> 是程序员最常用的一个文件之一，默认情况下<code>chomre</code>查看<code>markdown</code>是无格式文字展示，可以安装此插件将<code>markdown</code>格式为文档。<br><img alt="Markdown Preview Plus" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5ul5ji24zj20hs0b4ac3.jpg"></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvZW5oYW5jZWQtZ2l0aHViL2FubGlrY25iZ2RlaWRwYWNkYmRsam5hYmNsaGFoaG1k" title="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">Enhanced GitHub<i class="fa fa-external-link"></i></span></strong><br>该插件将增强<code>github</code>的功能，能显示仓库的大小，能够支持下载单个文件等。</p><p><img alt="Enhanced GitHub" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uw01s2uvj20hs0b4gnx.jpg"></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvZ2l0aHViLWhvdmVyY2FyZC9tbW9haGJibm9qZ2tjbGdjZWFoaGFraG5jY2ltbnBsaw==" title="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk">GitHub Hovercard<i class="fa fa-external-link"></i></span></strong><br>该插件提供 <strong>hover card</strong>, 显示用户信息、仓库信息、issue、ccommit 信息等。</p><p><img alt="HoverCard" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uoo7w822j20hs0b4dgt.jpg"></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvanNvbnZpZXcvY2hrbGFhbmhmZWZibnBvaWhja2JuZWZoYWtnb2xubWM=" title="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSONView<i class="fa fa-external-link"></i></span></strong><br><code>JSON</code>是一个通用的数据格式，无论是前端还是后端都会跟这个数据格式打交道，有时我们直接在URL打开会返回<code>JSON</code>接口后，会在页面上显示一串字符串对象，并不太方便阅读数据。</p><p>该插件就是格式化返回的<code>JSON</code>, 使其美观。</p><p><img alt="JSONView" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uonxrmtwj20hs0b4q41.jpg"></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvbm9kZWpzLXY4LWluc3BlY3Rvci1tYW5hZy9nbmhoZGdiYWxkY2lsbWdjcGZkZGdkYmtoam9oZGRrag==" title="https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NIM(Node.js 调试管理工具)<i class="fa fa-external-link"></i></span></strong><br><code>Node.js</code>的调试工具，具体教程商城页有介绍。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdnVlanMtZGV2dG9vbHMvbmhkb2dqbWVqaWdsaXBjY3Bubm5hbmhibGVkYWpicGQ=" title="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcmVkdXgtZGV2dG9vbHMvbG1oa3BtYmVrY3Bta25rbGlvZWliZmtwbW1maWJsamQ=" title="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcmVhY3QtZGV2ZWxvcGVyLXRvb2xzL2Zta2FkbWFwZ29mYWRvcGxqYmpma2FwZGtvaWVuaWhp" title="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools<i class="fa fa-external-link"></i></span></strong><br>对应前端框架开发必备的 <code>devtools</code>，需要的时候再安装也不迟。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcHJveHktc3dpdGNoeW9tZWdhL3BhZGVrZ2NlbWxva2JhZG9oZ2tpZmlqb21jbGdqZ2lm" title="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega<i class="fa fa-external-link"></i></span></strong><br>开发中还是必不可免会有使用代理的情况，该插件可以轻松快捷地管理和切换多个代理设置。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v" title="https://www.sourcetreeapp.com/">Sourcetree<i class="fa fa-external-link"></i></span></strong><br>Sourcetree 是<code>Git GUI</code>，使用可视化界面来对代码进行版本控制，操作起来会比较友好。</p><p><img alt="Sourcetree" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uwaocy62j20jg0c80uh.jpg"></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvYnRoZWNvdy9naXQtZmxvdy1jb21wbGV0aW9uL3dpa2kvSW5zdGFsbC1CYXNoLWdpdC1jb21wbGV0aW9u" title="https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion">Git flow<i class="fa fa-external-link"></i></span></strong><br>该包封装了<code>release</code>、<code>feature</code>、<code>hotfix</code>等项目代码管理流程，减少输入<code>git</code>命令过程。<code>git flow</code>也被封装进了 SourceTree 中，只不过一个是带有 UI 界面的软件，另一个是直接在命令行使用的包，满足不同人的需求。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vZG93bmxvYWRzLw==" title="https://www.getpostman.com/downloads/">Postman<i class="fa fa-external-link"></i></span></strong><br><code>Postman</code>是一个跨平台的应用，它拥有完整的<code>API</code>开发环境，该应用前后端的朋友都能使用的了。在<code>Chrome</code>插件商城中你也能找到它，安装后会自动将该应用离线下载至本地。如果你更偏爱于命令行，可以尝试<code>curl</code>。<br><img alt="postman default view" data-src="https://www.getpostman.com/img/screens/postman-default-view.png"></p><h2 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h2><blockquote><p>针对 macOS 环境的补充</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==" title="https://brew.sh/">Homebrew<i class="fa fa-external-link"></i></span>: macOS 的包管理器，如果需要使用 macOS 进行开发的话，请务必安装该包！</p><p><span class="exturl" data-url="aHR0cHM6Ly9waWxvdG1vb24uY29tL3Njcm9sbHJldmVyc2VyLw==" title="https://pilotmoon.com/scrollreverser/">scrollreverser<i class="fa fa-external-link"></i></span>： 可以将鼠标和触摸板设置不同的方向。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL1NoYWRvd3NvY2tzWC1ORw==" title="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG<i class="fa fa-external-link"></i></span>: 查看更广阔知识库的钥匙</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZGovU3dpdGNoSG9zdHMvYmxvYi9tYXN0ZXIvUkVBRE1FX2NuLm1k" title="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md">SwitchHosts<i class="fa fa-external-link"></i></span>: 开发中难免会修改<code>hosts</code>，该款软件可以用于快速切换<code>hosts</code>文件。</p><p><img alt="SwitchHosts" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uyhtxb3rj21hc0xcah5.jpg"></p><p><span class="exturl" data-url="aHR0cHM6Ly9pdGVybTIuY29tLw==" title="https://iterm2.com/">iterm2<i class="fa fa-external-link"></i></span>: macOS 默认的终端实际上并不太好用，<code>iterm2</code>的出现就是为了替代默认的重点，它支持<span class="exturl" data-url="aHR0cHM6Ly9pdGVybTIuY29tL2ZlYXR1cmVzLmh0bWw=" title="https://iterm2.com/features.html">更多的功能<i class="fa fa-external-link"></i></span>。</p><p><img alt="iterm2" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5ux90rasdj20go0a0juh.jpg"></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2g=" title="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh<i class="fa fa-external-link"></i></span>: 默认的终端或者<code>iterm2</code>的外观并不太美观~ <code>zsh</code>框架能使你的终端颜值更上一步~ 不仅如此，它作为一个框架，有更多的插件和主题可选择，感兴趣的朋友可以深究一下~</p><p><img alt="oh-my-zsh" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uxvw8655j20ip0aedgm.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> macOS </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant design pro 使用 no-mock 造成 POST 请求被重定向为 GET 请求</title>
      <link href="/blog/2019/07/16/ant-design-redirect-change-method/"/>
      <url>/blog/2019/07/16/ant-design-redirect-change-method/</url>
      
        <content type="html"><![CDATA[<p>最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行<code>npm run start:no-mock</code>后，发现预期发出<code>POST</code>请求变成了<code>GET</code>请求，状态码是<code>301</code>永久重定向。而在使用<code>mock</code>数据中不会出现这种问题。</p><a id="more"></a><p>因此使用断点调试，经过一番尝试，逐步检查函数的调用及传参问题，最后也将此问题排除掉了。</p><p>随后想到问题是不是出现在类库身上，接口是基于<code>dva/fetch</code>进行封装的，而<code>dva/fetch</code>又是基于浏览器原生(<code>native code</code>)的<code>fetch</code>进行封装. 使用断点并没有进入<code>fetch</code>内部。</p><p>为了缩小范围，将发出请求的参数和方法从<code>Network</code>中拷贝下来，使用<code>fetch</code>直接调用，发现只要不经过<code>umi</code>类处理就不会出现这种现象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 dva/fetch</span></span><br><span class="line"><span class="comment">// request('/api/login', &#123; method: 'POST', body: &#123;username, password&#125; &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用原生 fetch</span></span><br><span class="line">request(<span class="string">'https://zzz.xxx.com/api/login'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: &#123;username, password&#125; &#125;)</span><br></pre></td></tr></table></figure><p>随后在<code>network</code>上我注意到，通过<code>umi</code>处理后的请求<code>URL</code>有点奇怪:</p><p>虽然我没有研究过<code>umi</code>的具体实现细节，但可以推测出<code>umi</code>是通过<code>config</code>拿到<code>proxy.target</code>作为<code>base url</code>. 但项目中<code>target</code>使用的协议是<code>http</code>协议，在实际的<code>network</code>中被转换为了<code>https</code>. </p><p>难不成就是这个在作祟？抱着尝试的态度将<code>target</code>上的协议转为<code>https</code>, 发现就能正常的发出<code>POST</code>请求了。。</p><p>但这样就会很迷茫，真的是<code>umi</code>干的吗？由于该项目基础架构另一个团队上接手上来的，有了很多复杂的因素干扰，<code>method</code>在哪一步进行了转换呢? 然后为了解惑做了一些简单的排查:</p><p>从网络原理来考虑，这种情况应该是在客户端发生的，为了排除服务端重定向的嫌疑，使用了抓包查看了没有经过浏览器格式的报文信息，确定了是客户端的问题。接着去看了部分源码也没有看到相关的逻辑。</p><p>最后近期业务量还挺重的，因此在此文记录一下，后序会继续关注一下这个问题，了解到原因再回来补充。</p><p>由于项目是运行在内网中，因此没有升级<code>umi</code>最新版本(内网可能没有最新的版本的镜像), 也有可能在最新版已经修复但没有继续尝试了。如果有遇到相同问题的同学可以了解一下这个情况。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"umi"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="attr">"umi-plugin-react"</span>: <span class="string">"^1.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ant design pro </tag>
            
            <tag> react </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在本地测试微信登录</title>
      <link href="/blog/2019/05/18/wechat-pc-login/"/>
      <url>/blog/2019/05/18/wechat-pc-login/</url>
      
        <content type="html"><![CDATA[<p>在做微信登录的时候，希望能在本地能够测试登录。这里使用的是<strong>微信开放平台</strong>的<span class="exturl" data-url="aHR0cHM6Ly9vcGVuLndlaXhpbi5xcS5jb20vY2dpLWJpbi9zaG93ZG9jdW1lbnQ/YWN0aW9uPWRpcl9saXN0JnQ9cmVzb3VyY2UvcmVzX2xpc3QmdmVyaWZ5PTEmaWQ9b3BlbjE0MTkzMTY1MDUmdG9rZW49NTczODk0NzM0YzVhZTM5MDE1OGI0ZmEwZDA5YjJkMTVhOThmN2E1YSZsYW5nPXpoX0NO" title="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN">网站应用微信登录<i class="fa fa-external-link"></i></span>, 与<strong>微信公众平台</strong>不同，<strong>微信开放平台</strong>并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。</p><a id="more"></a><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>首先在页面引入微信的<code>js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在登录页上实例化登录对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.vuw --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"login_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// other code ...</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// other code ...</span></span></span><br><span class="line"></span><br><span class="line">    mounted() &#123;</span><br><span class="line">        APIs.login(&#123;</span><br><span class="line"><span class="javascript">            redirect_uri: Base64.encode(<span class="string">'http://apitest.anran758.com'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/* eslint-disable no-new */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> WxLogin(&#123;</span></span><br><span class="line"><span class="javascript">                    id: <span class="string">'login_container'</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// appid: "",</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// scope: "",</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// redirect_uri: "",</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// state: "",</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// style: "",</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// href: ""</span></span></span><br><span class="line">                    ...res.data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>WxLogin</code>接收一个对象，对象属性如下所示。其中对象里的<code>appid</code>, <code>scope</code>，<code>redirect_uri</code>, <code>state</code>四个属性是由后端控制返回的。</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>self_redirect</td><td>否</td><td>true：手机点击确认登录后可以在 iframe 内跳转到 redirect_uri，false：手机点击确认登录后可以在 top window 跳转到 redirect_uri。默认为 false。</td></tr><tr><td>id</td><td>是</td><td>第三方页面显示二维码的容器id</td></tr><tr><td>appid</td><td>是</td><td>应用唯一标识，在微信开放平台提交应用审核通过后获得</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即可</td></tr><tr><td>redirect_uri</td><td>是</td><td>重定向地址，需要进行UrlEncode</td></tr><tr><td>state</td><td>否</td><td>用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</td></tr><tr><td>style</td><td>否</td><td>提供”black”、”white”可选，默认为黑色文字描述。详见文档底部FAQ</td></tr><tr><td>href</td><td>否</td><td>自定义样式链接，第三方可根据实际需求覆盖默认样式。详见文档底部FAQ</td></tr></tbody></table><p>该方法会生成一个二维码，并挂载到指定的容器 ID 上。用户扫描二维码时，页面会向微信服务端发送一个请求等待用户确认，用户确认完成后，就会将页面重定向至指定的路径（redirect_uri）。</p><p>那么现在问题就来了：重定向的地址要跟<strong>微信开放平台</strong>里设置的重定向的域名一致，就是说我们在本地开发起的<code>localhost:8080</code>这种是不行的。<br>这时我们就会想到了去修改<code>hosts</code>，但光改<code>hosts</code>是不行，还需要改端口。。这时就可以用到<code>shistle</code>了。</p><h2 id="shistle"><a href="#shistle" class="headerlink" title="shistle"></a>shistle</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2d28vd2hpc3RsZQ==" title="https://github.com/avwo/whistle">whistle<i class="fa fa-external-link"></i></span>是基于Node实现的跨平台web调试代理工具，主要用于查看、修改HTTP、HTTPS、Websocket的请求、响应，也可以作为HTTP代理服务器使用。我们可以使用它来进行转发：</p><img data-src="/blog/2019/05/18/wechat-pc-login/whistle.png"><p>通过 npm 来安装 whistle:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 whistle</span></span><br><span class="line">npm install -g whistle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 whistle</span></span><br><span class="line">w2 start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口号来启动 whistle</span></span><br><span class="line">w2 start -p 9000</span><br></pre></td></tr></table></figure><p>安装完毕后命令行提示我们可以进入 whistle 的控制台(默认启动的 URL 是 127.0.0.1:8899)，但此时还不能直接抓包，还需要配置代理才可以使用.</p><p>配置代理可以使用全局代理或浏览器代理，比较推荐的做法是使用后者。我个人习惯使用<code>chrome</code>浏览器，因此可以安装 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcHJveHktc3dpdGNoeW9tZWdhL3BhZGVrZ2NlbWxva2JhZG9oZ2tpZmlqb21jbGdqZ2lm" title="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega<i class="fa fa-external-link"></i></span> 代理插件，将 shistle 的配置信息填入，保存配置后记得切换插件的模式噢。</p><img data-src="/blog/2019/05/18/wechat-pc-login/setting-proxy.png"><img data-src="/blog/2019/05/18/wechat-pc-login/open-plugin.png"><p>想要拦截<code>HTPPS</code>的请求的话，还需要<span class="exturl" data-url="aHR0cDovL3dwcm94eS5vcmcvd2hpc3RsZS93ZWJ1aS9odHRwcy5odG1s" title="http://wproxy.org/whistle/webui/https.html">安装根证书<i class="fa fa-external-link"></i></span>,</p><img data-src="/blog/2019/05/18/wechat-pc-login/https.gif"><p>接着进入 whistle 的控制台, 点进<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4ODk5LyNydWxlcw==" title="http://127.0.0.1:8899/#rules">rules<i class="fa fa-external-link"></i></span>, 配置需要代理或转发的地址。这个配置规则类似于设置 hosts.</p><img data-src="/blog/2019/05/18/wechat-pc-login/rules.png"><p>设置好 rules 后，将本地开发的的网址<code>http://localhost:8020/#/login</code>替换为<code>http://test.anran758:8020/#/login</code>再进行测试登录，登录完毕后就能拿到用户数据了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2d28vd2hpc3RsZS9ibG9iL21hc3Rlci9SRUFETUUtemhfQ04ubWQ=" title="https://github.com/avwo/whistle/blob/master/README-zh_CN.md">whistle<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vcGVuLndlaXhpbi5xcS5jb20vY2dpLWJpbi9zaG93ZG9jdW1lbnQ/YWN0aW9uPWRpcl9saXN0JnQ9cmVzb3VyY2UvcmVzX2xpc3QmdmVyaWZ5PTEmaWQ9b3BlbjE0MTkzMTY1MDUmdG9rZW49NTczODk0NzM0YzVhZTM5MDE1OGI0ZmEwZDA5YjJkMTVhOThmN2E1YSZsYW5nPXpoX0NO" title="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN">网站应用微信登录开发指南<i class="fa fa-external-link"></i></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信开发 </tag>
            
            <tag> 微信登录 </tag>
            
            <tag> shistle </tag>
            
            <tag> 网站应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[UI组件] 来做一个可配置的滑块进度条吧</title>
      <link href="/blog/2019/05/03/minp-customize-slider/"/>
      <url>/blog/2019/05/03/minp-customize-slider/</url>
      
        <content type="html"><![CDATA[<p>在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..</p><a id="more"></a><p>emmm，一看这样的设计需求就意味着小程序原生的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9zbGlkZXIuaHRtbA==" title="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">slider<i class="fa fa-external-link"></i></span>组件就不能用了。因为这玩意在样式上就不能自由的配置，只好来手动实现一个。</p><hr><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><img title="slider-bar" data-src="/blog/2019/05/03/minp-customize-slider/slider-bar.png"><p>行吧，那说干就干。首先滑动条可以从俯视图角度来看，分为三层。分别是<code>底部滑轨区域</code>，<code>进度条区域</code>以及供用户操作的<code>滑块</code>本身。</p><p>在结构设计中，可以将<code>底部滑轨区域</code>，<code>进度条区域</code>分为一块，这样<code>进度条区域</code>可以根据随着滑动条的高度变化而变化, 宽度则由<code>js</code>控制。除此之外还需要暴露一些参数给外部，让它自己定义长粗宽。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的属性列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// 滑块大小</span></span><br><span class="line">        blockSize: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">32</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块宽度</span></span><br><span class="line">        blockBorderWidth: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨高度</span></span><br><span class="line">        height: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨进度</span></span><br><span class="line">        step: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进度值小数位</span></span><br><span class="line">        digits: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"slider-wrap"</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slider-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span>,</span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2</span>rpx;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="comment">/* border-radius: 8rpx; */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">3</span>rpx <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击行为事件"><a href="#点击行为事件" class="headerlink" title="点击行为事件"></a>点击行为事件</h2><blockquote><p>滑块进度条的<code>滑块</code>是一个听话的小朋友，就是说我们叫它去哪它就听话的过去。所以就不要抓它去煲汤了~</p></blockquote><p>在组件外部容器中绑定一个点击事件，我们必须得要知道用户点击位置，在<code>bind:tap</code>事件中取到<code>clientX</code>属性。除此之外还需要取到进度条的位置信息。</p><p>得到两个关键数据后，将用户点击的位置<code>ClintX</code>与进度条组件的偏移量<code>offset</code>相减，得出相对于组件内的进度<code>progress</code>.<br>再用组件的宽度<code>width</code>减去<code>progress</code>乘于<code>100</code>得到目前进度的百分比<code>percentage</code>。<br>同时为了防止进度条超出进度条</p><p>如下图所示：<code>((191 - 36) / 301) * 100 ≈ 52</code></p><img title="关系示意图" data-src="/blog/2019/05/03/minp-customize-slider/offset.png"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ...other --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        containerInfo: <span class="literal">null</span>,</span><br><span class="line">        percentage: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ready() &#123;</span><br><span class="line">        <span class="comment">// 取到滑块进度条的位置信息</span></span><br><span class="line">        wx.createSelectorQuery().in(<span class="keyword">this</span>)</span><br><span class="line">            .select(<span class="string">'.slider-wrap'</span>)</span><br><span class="line">            .boundingClientRect(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rect) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.data.container = rect;</span><br><span class="line">                <span class="keyword">this</span>._initBloackPos();</span><br><span class="line">            &#125;).exec()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击进度条</span></span><br><span class="line">    tappingSlider(evt) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">        <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要做边界处理</span></span><br><span class="line">        <span class="keyword">const</span> perc = <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123; percentage &#125;);</span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</span><br><span class="line">              value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算相对容器的偏移距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; x - X 坐标</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; offset - 偏移量</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; maxVal - 在 maxVal 范围内求百分比</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _computeOffset(x, offset, maxVal) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; width &#125; = <span class="keyword">this</span>.data.containerInfo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 底层保证一定精度</span></span><br><span class="line">        <span class="keyword">return</span> (((x - offset) / width) * maxVal).toFixed(<span class="number">4</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边界处理</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; num - 待处理的最值</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; maxNum - num 最大值</span></span><br><span class="line"><span class="comment">     * @param &#123; Number &#125; minNum - num 最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _boundaryHandler(num, maxNum = <span class="number">100</span>, minNum = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num &gt; maxNum ? maxNum : (num &lt; minNum ? minNum : num);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;percentage&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>虽然实现了点击滑动到指定位置的功能，但仔细一看还是有一些瑕疵的~ 当我们点击到百分百时，<code>滑块</code>超出原先设定的容器宽度。</p><p>超出的原因是因为在布局上，我们使用绝对定位<code>absolute</code>，通过设置滑块<code>left</code>属性来控制滑块位置的。<br>偏移量中还包含了滑块自身的宽度，因此还需要对滑块的偏移量做一定的处理，去掉自身宽度再获取百分比。</p><p>在文章开头我们已经暴露了一个<code>blockSize</code>的属性，利用该属性可以计算滑块的最大偏移量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">// other data...</span></span><br><span class="line"></span><br><span class="line">        _blockOffset: <span class="number">0</span>,</span><br><span class="line">        _maxDistance: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 点击进度条</span></span><br><span class="line">        tappingSlider(evt) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此，该事件就完成啦~</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>完成点击事件后，我们还得让它能进行自由的滑动。进度条组件的拖动的流程大致是：<code>点击滑块</code> -&gt; <code>拖动滑块</code> -&gt; <code>释放滑块</code>这三个步骤。</p><p>因此跟H5的思路一样，我们只需监听<code>touchmove</code>、<code>touchstatr</code>、<code>touchend</code>三个事件。</p><p>首先先监听<code>touchmove</code>，用户点击滑块后，记录当前的<code>clientX</code>属性, 随后还需要记录当前<code>进度</code>和滑块的<code>偏移量</code>；<br><code>touchmove</code>事件则由外层容器相关联，并更新滑动的距离。由于<code>touchmove</code>里针对<code>拖动事件</code>逻辑不能被随便触发，因此需要加一个标识的锁；<br>在<code>touchend</code>事件触发后释放锁即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onTouchStart(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="keyword">this</span>.data.originPos = <span class="keyword">this</span>.data._blockOffset;</span><br><span class="line">            <span class="keyword">this</span>.data.originPercentage = <span class="keyword">this</span>.data.percentage;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.data._startTouchX = evt.changedTouches[<span class="number">0</span>].clientX;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块移动</span></span><br><span class="line">        onTouchMove(evt) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; moving, containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!moving || !containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123;</span><br><span class="line">                digits,</span><br><span class="line">                originPos,</span><br><span class="line">                originPercentage,</span><br><span class="line">                _startTouchX,</span><br><span class="line">                _maxDistance</span><br><span class="line">            &#125; = <span class="keyword">this</span>.data;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, _startTouchX, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> perc = originPercentage + computeOffset(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> offset = originPos + computeOffset(_maxDistance);</span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(offset, _maxDistance);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; percentage, _blockOffset &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</span><br><span class="line">                value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        onTouchEnd(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>滑块进度条</code>组件的实现~ 实际上该组件还有更多可供配置的地方，如颜色值，背景控制等这些比较基础的东西就不继续展开讲啦~<br> 本文是以小程序进行示例。但思路是共通的，也可以使用同样思路在<code>H5</code>实现，只不过是 API 的差异罢了~</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vcy9PYzc5ZjdtdjdLOE4=" title="https://developers.weixin.qq.com/s/Oc79f7mv7K8N">微信代码片段<i class="fa fa-external-link"></i></span>, 可以直接拿来就用。</p><hr><p>2019/05/04 更新：</p><p>后面又重新看了一遍，发现该组件还是有可优化的空间：</p><p>操作不必局限于滑块上，可以将<code>bindtap</code>事件废弃，其余的所有事件都代理到最外部的节点中。<code>touchstar</code>的同时就渲染位置信息，还允许它自由的滑动:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// other options ...</span></span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// other method ...</span></span><br><span class="line">        onTouchStart(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="keyword">this</span>.data.originPos = _blockOffset;</span><br><span class="line">            <span class="keyword">this</span>.data.originPercentage = percentage;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.data._startTouchX = clientX;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vcy9YcGFaVjdtbjd0OEw=" title="https://developers.weixin.qq.com/s/XpaZV7mn7t8L">微信代码片段 v0.0.2<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序开发 </tag>
            
            <tag> UI组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5微信支付所遇到的若干问题</title>
      <link href="/blog/2019/02/23/h5-cookie-lost/"/>
      <url>/blog/2019/02/23/h5-cookie-lost/</url>
      
        <content type="html"><![CDATA[<p>最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。</p><a id="more"></a><h2 id="cookie-丢失的问题"><a href="#cookie-丢失的问题" class="headerlink" title="cookie 丢失的问题"></a>cookie 丢失的问题</h2><p>在H5页面中，一开始我们是需要拿到微信用户的信息。因此需要调用获取用户的接口。<br>在第一次调用该接口时，需要有一个授权的过程。没有拿到用户信息的话，就需要调取授权让用户确认。</p><p>然后问题就来了<del>授权完成后，会发现后端是拿不到<code>cookie</code>信息。经过查询资料后发现原来还是跨域在作祟</del><br>虽然我们解决了基本的跨域问题，即域名(origin)的不同。但是默认情况下跨域请求不会发送<code>cookie</code>.</p><p>这时前端需要设置<code>XHR</code>的<code>withCredentials: true</code>, 后端也需要配合设置<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxz" title="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials">Access-Control-Allow-Credentials<i class="fa fa-external-link"></i></span>即可。</p><p>以 <code>axios</code> 为例, <code>withCredentials: true</code> 与 <code>data</code> 平级:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'jojo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  withCredentials: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios(opt).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><p>这种情况一般是前后端项目不在同一个域名的情况下，且需要带凭证的场景需要设置<code>Credentials</code>。</p><h2 id="url未注册-url-not-registered"><a href="#url未注册-url-not-registered" class="headerlink" title="url未注册(url not registered)"></a>url未注册(url not registered)</h2><p>随后微信弹了一下<code>url not registered</code>的错误，检查支付目录已经正确的被配置。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvanNhcGkucGhwP2NoYXB0ZXI9N183JmluZGV4PTY=" title="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6">微信内H5调起支付<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvanNhcGkucGhwP2NoYXB0ZXI9N18z" title="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3">jsapi 开发流程<i class="fa fa-external-link"></i></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> h5 </tag>
            
            <tag> 微信 </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在微信小程序中保存网络图片</title>
      <link href="/blog/2019/02/11/miniprograms-download-image/"/>
      <url>/blog/2019/02/11/miniprograms-download-image/</url>
      
        <content type="html"><![CDATA[<p>在小程序的文档中我们得知，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS93eC5zYXZlSW1hZ2VUb1Bob3Rvc0FsYnVtLmh0bWw=" title="https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html">wx.saveImageToPhotosAlbum<i class="fa fa-external-link"></i></span> 是用来保存图片到相册的。</p><p>但是仔细一看会发现这个接口的<code>filePath</code>参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。</p><a id="more"></a><p>因此先需要把该文件下载至本地，使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS93eC5kb3dubG9hZEZpbGUuaHRtbD9zZWFyY2gta2V5PWRvd25sb2FkRmlsZQ==" title="https://developers.weixin.qq.com/miniprogram/dev/api/wx.downloadFile.html?search-key=downloadFile">wx.downloadFile<i class="fa fa-external-link"></i></span> 。</p><p>但值得注意的是<strong>小程序只可以跟指定的域名与进行网络通信</strong>，也就是说下载图片之前，我们需要先去<strong>微信公众者平台</strong>的开发设置里设置<code>uploadFile合法域名</code>。</p><p>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存图片</span></span><br><span class="line">  saveImage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</span><br><span class="line">        url: <span class="keyword">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'保存成功~'</span>,<span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是用户自己取消的话保存图片的话</span></span><br><span class="line">        <span class="comment">// if (~err.errMsg.indexOf('cancel')) return;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将 callback 转为易读的 promise</span></span><br><span class="line"><span class="comment">   * @returns [promise]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  wxToPromise(method, opt) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        success(res) &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err) &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后理论上就可以保存图片了… 用户第一次在我们的小程序使用保存图片这个功能是会弹出一个授权弹框，如果用户手滑点了拒绝授权后再点一次保存图片，然后就会发现什么反应都没有了。。。</p><p>出现这样的原因是因为这个授权弹框只会出现一次，所以我们得想办法再让用户重新授权一次。这时就想到使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS93eC5hdXRob3JpemUuaHRtbA==" title="https://developers.weixin.qq.com/miniprogram/dev/api/wx.authorize.html">wx.authorize<i class="fa fa-external-link"></i></span> .</p><p>但是经过测试后发现，使用 <code>wx.authorize</code> 后，会报 <code>authorize:fail auth deny</code> 的错误。然后经过查阅资料得知：</p><blockquote><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景。</li></ul></blockquote><p>emmm… 那这样效果当然不符合我们预期，只能在换一种方式。这时就想到了使用<code>&lt;button open-type=&quot;openSetting&quot;/&gt;</code>，在交互上做一个提示弹框，引导用户重新授权：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简陋版提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;showDialog&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"dialog-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line">    这是一段提示用户授权的提示语</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">open-type</span>=<span class="string">"openSetting"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtap</span>=<span class="string">"confirm"</span> &gt;</span></span><br><span class="line">         授权</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">bindtap</span>=<span class="string">"cancel"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span>,</span><br><span class="line">    showDialog: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  saveImage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</span><br><span class="line">        url: <span class="keyword">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// this.hide();</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'保存成功~'</span>,</span><br><span class="line">          icon: <span class="string">'none'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">&#123; errMsg &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(errMsg)</span><br><span class="line">        <span class="comment">// if (~errMsg.indexOf('cancel')) return;</span></span><br><span class="line">        <span class="keyword">if</span> (!~errMsg.indexOf(<span class="string">'auth'</span>)) &#123;</span><br><span class="line">          wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'图片保存失败，稍后再试'</span>, <span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 调用授权提示弹框</span></span><br><span class="line">          <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            showDialog: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// callback to promise</span></span><br><span class="line">  wxToPromise(method, opt) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        success(res) &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err) &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  confirm() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      showDialog:<span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  cancel() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      showDialog: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后这样就完成啦~</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vcy9Tb09oaTZtWDdENlk=" title="https://developers.weixin.qq.com/s/SoOhi6mX7D6Y">微信代码片段点这里<i class="fa fa-external-link"></i></span>,  该功能需要添加<code>appid</code>才能进行正常的测试。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发笔记 - 小程序项目的结构设计</title>
      <link href="/blog/2018/11/23/miniprogrmas-build-frame/"/>
      <url>/blog/2018/11/23/miniprogrmas-build-frame/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/11/23/miniprogrmas-build-frame/banner.png"><p>在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~</p><a id="more"></a><h2 id="简要认识小程序开发"><a href="#简要认识小程序开发" class="headerlink" title="简要认识小程序开发"></a>简要认识小程序开发</h2><p>其中小程序的构成是由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四种类型构成(下文将简称为四类文件)。其开发方式跟传统网页开发是十分类似的。</p><ul><li><code>.wxml</code>模板文件对应为传统网页开发的<code>.html</code>文件，是一个页面(组件)的骨架。只不过它里面采用的语法跟传统的<code>HTML</code>语法有些差异, 比如标签的名称是微信自己在底层封装的组件。</li><li><code>.wxss</code>样式文件则对应<code>CSS</code>样式文件，具有大部分<code>CSS</code>的特性(比如<code>css3</code>的某些伪类特性就没有，但常见的<code>css3</code>属性倒是可以用)，除此之外还在此基础上做了新的扩展。</li><li><code>js</code>一直都是作为跟页面交互角色，在小程序开发中也不例外。<br>在<code>js</code>中，可以使用微信提供的<code>API</code>。如常见的<code>Page</code>(构造器)和<code>Component</code>，还有微信给出的一些特定权限的API.  </li><li><code>json</code>则是配置文件，一般是页面或者组件内那一级的配置文件。</li></ul><p>(这里有个小细节可以区分<code>wxml</code>和<code>wxss</code>区别，这两者都是以<code>wx(微信)</code>为开头，后面的小尾巴是区别是样式文件还是模板文件)。</p><p>具体的更多细节可以去看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3F1aWNrc3RhcnQvYmFzaWMvZmlsZS5odG1s" title="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html">官网文档<i class="fa fa-external-link"></i></span>。本文的重心还是在讨论项目结构如何安排会比较整洁合理。</p><h2 id="项目结构设计思路"><a href="#项目结构设计思路" class="headerlink" title="项目结构设计思路"></a>项目结构设计思路</h2><p>每个小程序项目的根目录会有一个<code>project.config.json</code>的项目配置文件，可以设置<code>miniprogramRoot</code>属性指定小程序源码的目录, 默认为根目录(<code>/</code>)。意思是说把源代码放在<code>/src/</code>下的目录也没有问题，笔者采用的是源码在根目录方式。</p><p>首先，小程序规定：一个小程序<strong>主体部分</strong>由三个文件组成，同时必须放在项目的根目录。</p><ul><li><code>app.js</code> 需要在里面调用<code>App()</code>函数，注册一个小程序。</li><li><code>app.json</code> 小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</li><li><code>app.wxss</code>  全局样式，作用于每一个页面。但注意的是<code>app.wxss</code>写的全局样式不会影响组件内的样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>小程序是由许多页面组成的，因此我们需要一个目录来存放页面, 我们通常把这个文件夹命名为<code>/pages/</code>。<code>app.json</code>的<code>pages</code>是一个数组，数组的每一项是用来指定页面的路径，框架会根据路径自动去寻找相对位置的四类文件(小程序的代码构成)。数组第一项为小程序入口页面。</p><p>每个页面为单独的一个目录, 页面的四类文件使用统一的名称。这里我们跟官方同步，四类文件跟随目录的名称走:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   │── home</span><br><span class="line">│   │   ├── home.wxml</span><br><span class="line">│   │   ├── home.js</span><br><span class="line">│   │   ├── home.json</span><br><span class="line">│   │   └── home.wxss</span><br><span class="line">│   └── user</span><br><span class="line">│       ├── user.wxml</span><br><span class="line">│       └── user.js</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>除此之外，在开发小程序时，页面是会分主要页面和次要页面(子页)，子页通常是一些列表页详情页的东西。理论上只会有一个入口能跳的过去那种二级页面。如果这样的子页一多，然后全都放在了<code>/pages/</code>目录下，就会导致目录列表变得庞大，会比较难找…</p><p>这时可以考虑换一种方式储存，在页面文件夹里再加一个文件夹, 名为<code>subpage</code>。把子页放在这个文件夹内，这样层级关系就清晰了，缺点就是不适合套太深。或者说一个产品也不应该把页面藏得太深让用户找不到…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── subpage</span><br><span class="line">│       │   └── detail</span><br><span class="line">│       │       ├── index.wxml</span><br><span class="line">│       │       └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>至于项目简单一些的话前者会好一点(子页命名参照<code>master-description</code>的格式)，页面太过复杂的话可能会比较推荐使用后者的方式。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>既然有了页面，那么页面必不可免会需要引用到图片。图片大致可以分为<strong>业务类</strong>和<strong>公共类</strong>。一些可以复用的图片我们可以放在同一个地方统一管理。而业务类则放在对应的页面目录下, 命名格式推荐为<code>dir@description</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── iamges (公共图片)</span><br><span class="line">│   │── icon</span><br><span class="line">│   │   ├── icon@download.png</span><br><span class="line">│   │   └── icon@cancel.png</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── images</span><br><span class="line">│       |   └── index@bg.png</span><br><span class="line">│       |   └── index@video.png</span><br><span class="line">│       ├── index.wxml</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── index.json</span><br><span class="line">│       └── index.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>但值得注意的是，在<strong>js</strong>中使用<code>import</code>引入图片时不能通过根目录进行查找，而<code>wxml</code>则没有这种限制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"/images/icon@download.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"./images/index@video.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/images/icon@download.png'</span></span><br><span class="line"><span class="comment">// 只能使用相对路径</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/../../icon@download.png'</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>写完页面后自然需要给页面润色, 我们可以通过在页面的<code>.wxss</code>来写局部样式，这没问题。但在我们完成一个又一个页面后，这时你可能会发现有些页面的样式<strong>重复性</strong>太高了。</p><p>因为一个成熟的设计师，在设计每一个产品时，大多会有一套设计风格或者称之为主题的东西。这些元素大量重复在各个页面中，我们重复写这些样式实际上代码是有点冗余的。</p><img title="主题按钮" data-src="/blog/2018/11/23/miniprogrmas-build-frame/button.png"><p>这时有经验的开发者很自然就会想到将重复性的代码抽出来，所幸微信提供了<code>@import</code>语句可以导入外联样式表。而这些通用的样式可以放在<code>/style/</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── style</span><br><span class="line">│   ├── button.wxss</span><br><span class="line">│   └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>直接在<code>.wxss</code>的顶层引入即可复用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">improt</span> <span class="string">'/style/button.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* other code */</span></span><br></pre></td></tr></table></figure><p>至于是为何不在<code>app.json</code>中设定全局样式而单独抽出来的原因也是前文所提及的问题————组件中默认情况下不受全局样式影响的，理论上组件也不该受到外部样式的”无意“的影响。<br>但<code>app.json</code>中的样式只需要加载一次就全局可用，外部样式就不一定了(因为没有实际的调研过)，而且还需要额外的去做引入的那一步。具体用哪一种方式还是要看具体情况来自己斟酌啦~</p><p>还有一些方法，比如使用<code>scss</code>、<code>less</code>之类的预处理之类的方案，也是可以，只不过超出了本文的讨论范围，不展开讲。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件对于熟悉模块化开发的同学自然不陌生，小程序基础库版本 <code>1.6.3</code> 就开始支持自定义组件了，至今为止也不用担心兼容性的问题了。从笔者角度来看看法，小程序的组件可以分为全局组件和局部组件。</p><p>全局性是指那种封装了登录、弹框、动画组件等等之类的组件，局部的大多是减轻一个页面内的复杂度，通过模块”搭积木”的方式来组成一个页面。即使某个功能砍了也能对页面减少牵连。</p><p>我们习惯于将全局性的东西放在源码的根目录上，因此会在根目录上创建<code>/components</code>文件夹，里面存放全局性的组件。<br>其中全局性的组件有不少会有同等类型的组件，因为可以再进一步的分类，如动画类组件存放为一个文件夹内。<br>再利用编辑器的文件名排序的特性，可以加上<code>@</code>提前组件集合。</p><p>组件下的四类文件按照<code>componment/index</code>的方式命名与<code>page</code>区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">├── componments (公共组件)</span><br><span class="line">│   │── anima</span><br><span class="line">│   │   ├── coin</span><br><span class="line">│   |   |   ├── index.js</span><br><span class="line">│   |   |   └── ...</span><br><span class="line">│   │   └── liquid</span><br><span class="line">│   |       └── ...</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── componments</span><br><span class="line">│       |   └── goods</span><br><span class="line">│       |     ├── index.wxml</span><br><span class="line">│       |     └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>在原生小程序开发中，一般在源码的根目录下，都会有一个<code>utils</code>文件夹，专门来干杂七杂八的脏话累活。其中包含工具类函数、<code>API</code>的管理、配置信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── utils (工具集)</span><br><span class="line">│   │── api</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   ├── ... (其他工具类)</span><br><span class="line">|   ├── config.js</span><br><span class="line">|   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>当小程序的资源大小超过了<code>2M</code>时，进行预览调试时就会报文件过大的错误，这时你可能就需要进行分包，将资源分开加载。小程序文档给出的目录结构是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── cat</span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── user</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><p>但经过我们在项目中尝试，我们发现通过编辑器的字符串排序后，会破坏目录结构的清晰度，所以推荐将分包放置到一个文件夹内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── subpackages (分包)</span><br><span class="line">│   │── news</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   └── store</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后的一个小程序项目主体结构大致是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">├── components (公共组件目录)</span><br><span class="line">│   ├── @anima (动画组件)</span><br><span class="line">│   └── ...</span><br><span class="line">├── images（公共图片）</span><br><span class="line">│   └── icon</span><br><span class="line">│      ├── icon@download.png</span><br><span class="line">│      └── icon@cancel.png</span><br><span class="line">├── pages（主包目录）</span><br><span class="line">│   └── home (app.json 设置的入口页)</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── style（公用样式目录）</span><br><span class="line">├── subpackages（分包目录）</span><br><span class="line">│   │── news</span><br><span class="line">|   └── store</span><br><span class="line">├── utils（公共模块，工具类）</span><br><span class="line">│   ├── config.js（项目配置）</span><br><span class="line">│   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .gitignore</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── project.config.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>以上是从原生小程序开发的角度来对项目结构的设计进行一个思路总结，没有过多的讲更深入的东西。下一期想整理一下关于<code>API</code>封装和管理，欢迎指导~</p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序开发 </tag>
            
            <tag> 小程序开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts 的食用方式</title>
      <link href="/blog/2018/06/28/how-to-use-echart/"/>
      <url>/blog/2018/06/28/how-to-use-echart/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/06/28/how-to-use-echart/banner.png"><p><code>ECharts</code>，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。</p><p>虽说如此，但是<code>Echarts</code>涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的<code>key</code>值相对应，缺失后就无法正常的显示…</p><p>因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。</p><a id="more"></a><hr><p>其实<code>Echarts</code>也有自己的使用教程，但本文的重心并不是从零开始讲解<code>Echarts</code>，至于更多使用细节可以看官方的<span class="exturl" data-url="aHR0cDovL2VjaGFydHMuYmFpZHUuY29tL3R1dG9yaWFsLmh0bWw=" title="http://echarts.baidu.com/tutorial.html">文档<i class="fa fa-external-link"></i></span>。</p><p>这里姑且先用折线图作示例。首先需要先引入<code>ECharts</code>, 我们选择好自己所需的版本后(tips: 如何选择版本，可以去看看<span class="exturl" data-url="aHR0cDovL2VjaGFydHMuYmFpZHUuY29tL2Rvd25sb2FkLmh0bWw=" title="http://echarts.baidu.com/download.html">这里<i class="fa fa-external-link"></i></span>)，然后在<code>&lt;/body&gt;</code>前插入脚本：<code>&lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;</code> 。</p><p>随后通过<code>echarts</code>提供的 API 初始化目标容器节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 echarts</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br></pre></td></tr></table></figure><p>接着我们需要填写配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="comment">// 全局 tooltip ,</span></span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 坐标轴触发</span></span><br><span class="line">    trigger: <span class="string">'axis'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图例组件，也就是提供显示或隐藏某一条数据信息开关</span></span><br><span class="line">  legend: &#123;</span><br><span class="line">    <span class="comment">// 组件在底部显示</span></span><br><span class="line">    bottom: <span class="string">'0px'</span>,</span><br><span class="line">    <span class="comment">// 图例每项之间的间隔</span></span><br><span class="line">    itemGap: <span class="number">46</span>,</span><br><span class="line">    <span class="comment">// 图例的数据数组, 省略则自动从 series.name 中获取</span></span><br><span class="line">    <span class="comment">// 但我们需要定制样式，因此我们添上去上去</span></span><br><span class="line">    data: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'曝光量'</span>,</span><br><span class="line">        icon: <span class="string">'circle'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'点击量'</span>,</span><br><span class="line">        icon: <span class="string">'circle'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 文字样式</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">      color: <span class="string">'#276dcc'</span>,</span><br><span class="line">      fontSize: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 重设全局调色盘的颜色，比如当前涉嫌图示例中有两条数据</span></span><br><span class="line">  <span class="comment">// 那这两条数据就会取得我们当前设置颜色作为展示</span></span><br><span class="line">  color: [<span class="string">'#42a66a'</span>, <span class="string">'#276dcc'</span>],</span><br><span class="line">  <span class="comment">// 网格布局</span></span><br><span class="line">  grid: &#123;</span><br><span class="line">    <span class="comment">// 下面三个是离容器的位置</span></span><br><span class="line">    left: <span class="string">'3%'</span>,</span><br><span class="line">    right: <span class="string">'4%'</span>,</span><br><span class="line">    bottom: <span class="string">'40px'</span>,</span><br><span class="line">    <span class="comment">// 坐标刻度，默认是false</span></span><br><span class="line">    containLabel: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// X轴配置</span></span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    boundaryGap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 坐标轴配置</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">'#d6dfea'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 坐标轴上的 label 样式</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      margin: <span class="number">18</span>,</span><br><span class="line">      fontSize: <span class="number">14</span>,</span><br><span class="line">      color: <span class="string">'#56749d'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 类目数据，只有在 type: 'category' 中有效。</span></span><br><span class="line">    <span class="comment">// 一般情况下我们并不会手动写死数据进去，而是通过 Ajax 请求数据来展示</span></span><br><span class="line">    data: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Y轴配置</span></span><br><span class="line">  yAxis: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 数值轴</span></span><br><span class="line">      type: <span class="string">'value'</span>,</span><br><span class="line">      name: <span class="string">'点击量'</span>,</span><br><span class="line">      <span class="comment">// 左侧显示</span></span><br><span class="line">      position: <span class="string">'left'</span>,</span><br><span class="line">      <span class="comment">// 下面的样式不再多说</span></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#d6dfea'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">'#56749d'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'value'</span>,</span><br><span class="line">      name: <span class="string">'曝光量'</span>,</span><br><span class="line">      position: <span class="string">'right'</span>,</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#d6dfea'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">'#56749d'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 系列列表, 这个是数据的关键所在</span></span><br><span class="line">  series: [</span><br><span class="line">    <span class="comment">// 如果 legend.data 设置了数据的话，那么 series 的数目需要和 legend.data 的数目一致。</span></span><br><span class="line">    <span class="comment">// 否则图表会不工作 !!</span></span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'点击量'</span>,</span><br><span class="line">      <span class="comment">// 图表的类型，在这个示例中我们使用是折线图</span></span><br><span class="line">      type: <span class="string">'line'</span>,</span><br><span class="line">      yAxisIndex: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 系列中的数据内容数组</span></span><br><span class="line">      <span class="comment">// 同样的，我们主要展示的数据来自于服务端</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'曝光量'</span>,</span><br><span class="line">      type: <span class="string">'line'</span>,</span><br><span class="line">      <span class="comment">// 折线图一维数据可能是这种形式的数组</span></span><br><span class="line">      <span class="comment">// [1, 2, 3, 1, 4]</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随后可以通过 Ajax 获取数据，再使用<code>setOption</code>来设置选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  config.series[<span class="number">0</span>].data = res.data.click;</span><br><span class="line">  config.series[<span class="number">1</span>].data = res.data.exposure;</span><br><span class="line">  config.xAxis.data = res.data.xAxis;</span><br><span class="line"></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如此，这样我们定义的 echarts 就完成啦~</p><img data-src="/blog/2018/06/28/how-to-use-echart/echarts.png"><hr><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><p>在<code>vue</code>中封装组件也不难，大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['data-echart', echartClass ]"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"data-echart__header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header__title"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title-name"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-popover</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-if</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">ref</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placement</span>=<span class="string">'bottom'</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">trigger</span>=<span class="string">'hover'</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"tooltip"</span> <span class="attr">class</span>=<span class="string">"el-icon-question"</span> <span class="attr">v-popover:tooltip</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"echartId"</span> <span class="attr">class</span>=<span class="string">"echart__main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'echart'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    echartClass: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    loading: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    domEchartId() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (<span class="built_in">document</span> || <span class="built_in">window</span>.document).getElementById(<span class="keyword">this</span>.echartId);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 随机生成一个ID</span></span></span><br><span class="line"><span class="javascript">      echartId: <span class="keyword">this</span>.randomChar(<span class="number">20</span>),</span></span><br><span class="line"><span class="javascript">      myChart: <span class="literal">null</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="javascript">      deep: <span class="literal">true</span>,</span></span><br><span class="line">      handler(newVal) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.update(newVal);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    loading(newVal) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.toggleLoading(newVal);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.init();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 调起loading</span></span></span><br><span class="line">    toggleLoading(flag) &#123;</span><br><span class="line"><span class="javascript">      flag ? <span class="keyword">this</span>.myChart.showLoading() : <span class="keyword">this</span>.myChart.hideLoading();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    init() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart = echarts.init(<span class="keyword">this</span>.domEchartId);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart.on(<span class="string">'click'</span>, (params) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'clickEchart'</span>, params);</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制图表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart.setOption(<span class="keyword">this</span>.option);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Object.keys(this.data).length !== 0 &amp;&amp; this.myChart.setOption(this.data);</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    update(data) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart.setOption(data);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 生成随机字符串</span><br><span class="line"><span class="javascript">     * @param &#123; <span class="built_in">Number</span> &#125; len - 指定随机字符串的长度</span></span><br><span class="line">     */</span><br><span class="line">    randomChar(len) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> x = <span class="string">'0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tmp = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        tmp += x.charAt(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100000000</span>) % x.length);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tmp;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'scss'</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">'~Scss/theme'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.data-echart</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.data-echart__header</span> &#123;</span></span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.header__title</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.title-name</span> &#123;</span></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    color: $f-color--title;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.el-icon-question</span> &#123;</span></span><br><span class="line">    font-size: 18px;</span><br><span class="line">    color: $f-color--tip;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.echart__main</span> &#123;</span></span><br><span class="line">  flex: 1;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要将组件放入一个设有高度的容器上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"height: 600px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">echart</span> <span class="attr">:option</span>=<span class="string">"charts.option"</span>&gt;</span><span class="tag">&lt;/<span class="name">echart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用的方式也面类似。首先声明一个基础的配置作为模板，在通过 ajax 拿到数据。通过动态数据传入组件内，组件<code>watch</code>到数据变化后立即重新渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某处集中封装的 ajax 请求</span></span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">'Common/apis'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      charts: &#123;</span><br><span class="line">        title: <span class="string">'My charts'</span></span><br><span class="line">        option： config</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  created() &#123;</span><br><span class="line">    API.getChartData()</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.data</span><br><span class="line">        <span class="keyword">this</span>.charts.option.xAxis.data = data.xAxis;</span><br><span class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">0</span>].data = data.click;</span><br><span class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">1</span>].data = data.exposure;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚点定位导航</title>
      <link href="/blog/2018/06/09/javascript-position-navigation/"/>
      <url>/blog/2018/06/09/javascript-position-navigation/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/06/09/javascript-position-navigation/banner.jpg"><p>一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。</p><a id="more"></a><hr><h2 id="定位原理"><a href="#定位原理" class="headerlink" title="定位原理"></a>定位原理</h2><p>首先我们来了解一下，什么锚点？</p><p>在海上，水手们会将锚丢入海中，或者靠岸时将锚抛上岸，其固定目的是让船固定位置。而<strong>锚点(anchor)</strong>也是一样，只不过场景不同罢了。</p><p>页面锚点定位可以通过<code>name</code>或者<code>id</code>属性来定位。<code>name</code>已经被<code>HTML5</code>废弃了，就不再多提。</p><p>在页面上，每个<code>id</code>都会自动创建一个锚点，同时还会生成一个<code>hash</code>，表示所处的文档位置。浏览器可以通过<code>hash</code>来确定位置，使用的方式一般如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title"</span>&gt;</span>跳到title<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 地址栏后会加上一段 # 开头的 hash --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://anran758.github.io/blog/#title --&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>hash</code>值我们可以通过浏览器的API<code>location.hash</code>取到。但值得注意的是，跳转<code>hash</code>的话是不会像服务端发送请求的(除了第一次请求页面)。</p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>但我们光知道跳转的原理可不够，只要你尝试了上面的跳转方法后，你会发现浏览器跳转方式是很唐突的。它会直愣愣的跳到指定位置(或者没有找到指定位置会，跳到页面最上面)，这在用户看来是十分生硬的，在体验上这个交互并不太友好。这时产品就会要求我们对此处进行优化~ 不过知道了上面的原理后，我们也可以直接使用js的方式来代替这种原生的默认跳转：</p><p>首先我们页面的结构大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"actived"</span> <span class="attr">href</span>=<span class="string">"#title1"</span>&gt;</span>第一组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title2"</span>&gt;</span>第二组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title3"</span>&gt;</span>第三组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title2"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title3"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面布局固定了后，元素离页面顶部的距离可以通过<code>offsetTop</code>来获取到。同时我们可以操作滚动容器(html)的<code>scrollTop</code>来修改滚动位置。嘿，这样一上(目标距离顶部的高度)一下(滚动条)，两个<code>API</code>双剑合璧后，我们就可以点击模拟滚动啦..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery 环境</span></span><br><span class="line"><span class="keyword">var</span> $menu = $(<span class="string">'.nav'</span>);</span><br><span class="line"><span class="keyword">var</span> $menuList = $menu.find(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给超链接绑定点击事件</span></span><br><span class="line">$menuList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">  $<span class="keyword">this</span>.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $<span class="keyword">this</span>.attr(<span class="string">'href'</span>).replace(<span class="regexp">/#/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标距离顶部的高度</span></span><br><span class="line">    <span class="keyword">var</span> top = $(<span class="string">'#'</span> + id).offset().top - <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给滚动容器加动画的效果，滚动到目标位置</span></span><br><span class="line">    $(<span class="string">'html'</span>).animate(&#123; <span class="attr">scrollTop</span>: top &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>蹡蹡！在页面中调试会发现，点击后页面会平滑的滚动到指定的锚点~ 除此之外，我们还得再添加一个功能：在页面滚动的时候，能让用户知道自己所在的位置~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contentList = $(<span class="string">'#content'</span>).find(<span class="string">'.item'</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> top = $(<span class="built_in">document</span>).scrollTop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取目前滚动条所处的区间</span></span><br><span class="line">  <span class="keyword">var</span> currentID = <span class="string">''</span>;</span><br><span class="line">  contentList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前距离顶部的数值</span></span><br><span class="line">    <span class="keyword">var</span> itemTop = $<span class="keyword">this</span>.offset().top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前滚动距离已经进入了 item 的区间</span></span><br><span class="line">    <span class="keyword">if</span> (top &gt; itemTop - <span class="number">250</span>) &#123;</span><br><span class="line">      currentID = <span class="string">'#'</span> + $<span class="keyword">this</span>.attr(<span class="string">'id'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentLink = $menu.find(<span class="string">'.actived'</span>);</span><br><span class="line">  <span class="comment">// 移除其他的类名</span></span><br><span class="line">  <span class="keyword">if</span> (currentID &amp;&amp; currentLink.attr(<span class="string">'href'</span>) !== currentID) &#123;</span><br><span class="line">    currentLink.removeClass(<span class="string">'actived'</span>);</span><br><span class="line"></span><br><span class="line">    $menu.find(<span class="string">"[href='"</span> + currentID + <span class="string">"']"</span>).addClass(<span class="string">'actived'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就锚点定位导航的功能就大功告成啦~ 最后将测试代码放入了<span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL2FucmFuNzU4L3Blbi95RVZxUmE=" title="https://codepen.io/anran758/pen/yEVqRa">codepen<i class="fa fa-external-link"></i></span>上了，感兴趣的同学可以去看看。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 业务组件 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将项目资源上传至七牛CDN</title>
      <link href="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/"/>
      <url>/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/05/24/node-将项目资源上传至七牛CDN/banner.png"><p>在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~</p><a id="more"></a><p>一般情况下，我们开发中会有一个脚手架，里面搭建了我们的开发环境，我们通过<code>npm</code>安装七牛的 API 客户端，<code>npm install -D qn</code>。随后我们在 build 目录下(这里我们习惯将脚手架相关的代码放在此处..)创建一个名为<code>upload.js</code>的文件。</p><p>一般  我们的代码打包后会放在一个<code>dist</code>目录下，我们通过 Node.js 查找我们想要  上传的所有文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指定目录，以及过滤掉多余的系统文件</span></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * @param &#123; String &#125; dir - 指定目录</span></span><br><span class="line"><span class="comment"> * @return &#123; Array &#125; 返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件相关信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 过滤文件</span></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 文件夹，递归继续查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok~ 有了文件列表后，接着我们就要考虑上传的问题啦。不过在这之前，我们还需要再做一些准备…我们要先去<span class="exturl" data-url="aHR0cHM6Ly9wb3J0YWwucWluaXUuY29tL3VzZXIva2V5" title="https://portal.qiniu.com/user/key">七牛开发者平台<i class="fa fa-external-link"></i></span>获取签名信息，用来作为上传的凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/base.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other configuration...</span></span><br><span class="line">  cdn: &#123;</span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/user/key</span></span><br><span class="line">    accessKey: <span class="string">'your access key'</span>,</span><br><span class="line">    secretKey: <span class="string">'your secret key'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/bucket/koudaifm/index</span></span><br><span class="line">    bucket: <span class="string">'project'</span>,                    <span class="comment">// 就是储存空间的域名，一般来说也是你的项目名</span></span><br><span class="line">    origin: <span class="string">'http://fs.project.com'</span>,      <span class="comment">// 外链域名，这个可以自己设置，一开始七牛会分配给你一个随机的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://developer.qiniu.com/kodo/manual/1671/region-endpoint</span></span><br><span class="line">    <span class="comment">// 这个是跟项目所在的储存区域相对应的，比如华南地区的就是这个示例的uploadURL</span></span><br><span class="line">    uploadURL: <span class="string">'http://up-z2.qiniu.com'</span>,</span><br><span class="line">    <span class="comment">// timeout: 3600000                   // 超时，唔..这里姑且不需要</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img title="七牛储存空间" data-src="/blog/2018/05/24/node-将项目资源上传至七牛CDN/qiniu.png"><hr><p>考虑到上传资源时，可能会碰到资源已存在的问题，这时就需要再额外创建一个函数来处理这个问题~ 然后我们开始封装上传函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将配置项放到单独文件上，统一改起来也方便..</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试，以最新</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每个文件调用 qnUpload</span></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure><hr><p>锵锵！一个可复用的上传组件就这么出现啦~ 最后上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> qn = <span class="built_in">require</span>(<span class="string">'qn'</span>);</span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * @param &#123; String &#125; dir - 指定目录</span></span><br><span class="line"><span class="comment"> * @return &#123; Array &#125; 返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 递归重复查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFiles = getAllFiles(distPath);</span><br><span class="line"><span class="keyword">const</span> filesLength = myFiles.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七牛上传配置</span></span><br><span class="line"><span class="comment">// https://www.npmjs.com/package/qn#upload</span></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Javascirpt </tag>
            
            <tag> 七牛 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的几种压缩图片的思路</title>
      <link href="/blog/2018/05/08/canvas-compress-prictures/"/>
      <url>/blog/2018/05/08/canvas-compress-prictures/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/05/08/canvas-compress-prictures/banner.png"><p>在做H5开发时，难免会遇到需要上传图片的需求。那么一般都是如何去处理压缩的需求呢？这里简要的概述一下原理，做个笔记加深印象~</p><a id="more"></a><p>目前主流对图片进行处理都是使用<code>canvas</code>技术~当我们碰到需要压缩图片的场景时，第一种我们就可以尝试控制图片的尺寸。因为图片的尺寸越大，里面包含的信息就越多，自然体积也随着增加了起来。</p><p>我们可以做一个宽高的限制，超出就对其进行尺寸的缩放。那么限制最大值是多少呢？这个应该根据产品或者需求来调整。当然，裁剪图片也是一种思路，那么该如何去裁剪，让用户选择还是我们自定义？这也是需要考虑的一点。</p><p>判断缩放的方法主要使用<code>drawImage</code>将图片导入canvas，如果图片超过了指定的宽高，就进行缩放图片。关于这一点，我觉得张鑫旭老师的<span class="exturl" data-url="aHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS93b3JkcHJlc3MvMjAxNy8wNy9odG1sNS1jYW52YXMtaW1hZ2UtY29tcHJlc3MtdXBsb2FkLw==" title="http://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/">这篇文章<i class="fa fa-external-link"></i></span>讲的已经足够简洁的了，感兴趣的同学可以看这边~</p><hr><p>第二种就是使用<code>canvas</code>提供的另一个接口：<code>canvas.toDataURL(type, encoderOptions)</code>。这是浏览器原生提供可以压缩图片的方法，该方法返回一个包含图片展示的<code>data URI</code>(也就是我们常说的base64)。</p><p>它接受两个可选参数，我们可以使用<code>type</code>参数指定其类型，默认为<code>PNG</code>格式。<code>encoderOptions</code>则是压缩图片质量参数，区间在 0~1 之间。值得注意的是，<strong>压缩图片质量这个参数只对<code>image/jpeg</code>或<code>image/webp</code>有效</strong>。所幸的是，其他格式用不了压缩图片的参数，但浏览器还是会对图片进行压缩处理，剔除对 web 展示没啥用的元数据(虽然可能会涉及到版权纠纷的问题)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="comment">// 中间处理的过程省略 ...</span></span><br><span class="line"><span class="keyword">var</span> fullQuality = canvas.toDataURL(<span class="string">"image/jpeg"</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure><p>但单单是转为 base64 是不能满足我们一些需求的，这时我们可能会想要让它再转为对服务端友好的<code>blob</code>类型。<br>这时我们就需要用到<code>window.atob()</code>, 将已经编译成 base64 的字符串解码为二进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> type = fullQuality.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码为二进制</span></span><br><span class="line"><span class="keyword">var</span> binStr = atob(fullQuality.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> length = binStr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓存区，容器大小可以容纳 binStr.</span></span><br><span class="line"><span class="comment">// 这个缓存区我们是不能直接操作的。</span></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(binStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立`Uint8Array`类型数组</span></span><br><span class="line"><span class="comment">// 这样我们就可以通过对象的方法或者数组索引读写里面的数据啦</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// var buff = new ArrayBuffer(4);   =&gt; ArrayBuffer(4) &#123;&#125;</span></span><br><span class="line"><span class="comment">// var arr = new Uint8Array(buff);  =&gt; Uint8Array(4) [0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// arr[2] = 8;</span></span><br><span class="line"><span class="comment">// console.log(buff)    =&gt; 缓存区和 Uint8Array 同时被修改了</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">// 逐个查询 binStr 里的二进制 Unicode 编码，并存入类型数组中</span></span><br><span class="line">  arr[i] = binStr.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer],&#123; <span class="attr">type</span>: type &#125;</span><br></pre></td></tr></table></figure><p>如果是想转为<code>File</code>类型的话，和上面的方法实现的也一致..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/File/File</span></span><br><span class="line"><span class="comment">// 第一个参数传入 ArrayBuffer 也行，blob 也行..</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File([buff], <span class="string">"img.jpg"</span>, &#123; <span class="attr">type</span>: type &#125;);</span><br></pre></td></tr></table></figure><p>哇，转个类型都看起来好像挺麻烦的样子呢…那么有没有内置的方法呀？答案是有，canvas 里有个<code>toBlob(callback, type, encoderOptions)</code>的方法, 它接受三个参数，一个是将canvas转为<code>blob</code>后接受的回调函数、一个是指定的图片格式、另一个是图片质量，区间也在 0~1 之间。</p><p>看起来这个方法似乎比上面那个更好用呢..然而残念的是，这货还受着兼容性影响，不在乎的兼容性的话倒是可以使用… 不然就需要上一种polyfill 的方式来实现~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收转换后的 blob 类型</span></span><br><span class="line">  <span class="comment">// 此时可以在函数里发起请求</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: baseURL + <span class="string">'/uploader/'</span>,</span><br><span class="line">    data: &#123; <span class="attr">act_id</span>: actID, <span class="attr">pic_1</span>: blob &#125;,</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="string">'image/png'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈CSS3 Matrix 的使用</title>
      <link href="/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/05/06/谈谈CSS3-Matrix-的理解/banner.png"><p>CSS3的<code>transform</code>里有一个方法叫做<code>Matrix</code>，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。</p><p>光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些<code>translate(25deg)</code>之类有着明确语义跟容易调用方法外，<code>Matrix</code>使用起来确实有些复杂~</p><a id="more"></a><p><code>Matrix</code>的参数分别有a, b, c, d, e, f六个参数，我们可以分别对应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">X</span>轴的缩放， <span class="selector-tag">X</span>轴拉升, <span class="selector-tag">Y</span>轴的拉伸, <span class="selector-tag">Y</span>轴的缩放, <span class="selector-tag">X</span>轴的位移, <span class="selector-tag">Y</span>轴的位移);</span><br></pre></td></tr></table></figure><p>这样看上去好像好多了，我们常使用的几个方法也是可以通过Matrix来实现：</p><p>元素默认情况下的表现可以用<code>Matrix</code>来表示为：<code>matrix(1, 0, 0, 1, 0, 0)</code>;</p><p>通过上面的例子，我们很容易推测出缩放的公式为：<code>translate(sx, sy)</code>等于<code>matrix(sx, 0, 0, sy, 0, 0)</code>;</p><p>位移就更简单啦： <code>translate(tx, ty)</code>等于<code>matrix(1, 0, 0, 1, tx, ty)</code>;</p><p>拉升则是：<code>skew(degx, degy)</code>等于<code>matrix(1, tan(degx), tan(degy), 1, 0, 0)</code></p><p>旋转没有提供相应的参数，他需要套用数学的公式，毕竟这个方法名就是<code>矩阵</code>嘛：<code>rotate(deg)</code>等于<code>matrix(cos(deg),sin(deg), -sin(deg), cos(deg), 0, 0)</code></p><hr><p>那问题来了，为啥有简单易用的方法不用，我们非要搞这么麻烦的东西呢？这是因为很多时候我们需要高度精确定制动画时，那些简单的方法以及不能满足我们的需求啦~</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transform </tag>
            
            <tag> css </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-flow 练习笔记</title>
      <link href="/blog/2018/04/23/git-flow/"/>
      <url>/blog/2018/04/23/git-flow/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/04/23/git-flow/banner.png"><p>在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。</p><a id="more"></a><p>git flow 有好几个版本，这里笔者演示使用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BldGVydmFuZGVyZG9lcy9naXRmbG93LWF2aA==" title="https://github.com/petervanderdoes/gitflow-avh">git-flow-avh<i class="fa fa-external-link"></i></span>的版本。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先我们先开始初始化仓库的工作流，我们在命令行使用<code>git flow init</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (<span class="built_in">local</span>) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (global) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (system) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (file) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">No branches exist yet. Base branches must be created now.</span><br></pre></td></tr></table></figure><p>命令行出现了警告，告诉我们还没有基础的分支。这是因为测试是全新的仓库作测试，这个我们姑且先不管它，接着引导会向我们确定需要初始化分支的名字，我们都采用默认即可。<br>直到询问<code>Version tag prefix</code>时，我们采用<code>v</code>作版本前缀，这其实也是很常见的一种习惯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Branch name <span class="keyword">for</span> production releases: [master]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">"next release"</span> development: [develop]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Release branches? [release/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Support branches? [support/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Version tag prefix? [] v</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hooks and filters directory? [/Users/anran/MyProject/git-flow-test/.git/hooks]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br></pre></td></tr></table></figure><p>随后我们使用<code>git branch</code>查看一下当前分支，我们会发现，git flow 创建了两条分支————主分支（master）和开发分支（develop），并自动切换到了 develop 上。</p><p>一般来说，我们常将 master 作为部署的分支，这个版本的产品防止稳定的代码和功能，作为产品的一个正式版部署。<br>正常情况下，我们不能直接在 master 分支上进行工作，而该是在 develop 开发环境下进行工作。<br>除此之外，develop 还是一个基础的分支，当我们开发新的功能时，我们会另开一个分支，在新的分支上进行功能开发，等功能开发完毕后再合并进来 develop 分支。</p><p>嘿，我们先创建一个<code>README.md</code>，在里面添加一些文字进去，再提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git branch</span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">➜  git-flow-test git:(develop) touch README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ vim README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git status</span><br><span class="line">On branch develop</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   README.md</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"First commit"</span></span><br><span class="line">[develop 61ec91a] First commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure><p>如果这时直接用<code>push</code>的话，git会提示你没有设定上游分支————别忘了现在我们在使用全新的测试仓库。</p><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git push</span><br><span class="line">fatal: The current branch develop has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin develop</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) git push --set-upstream origin develop</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (5/5), 385 bytes | 385.00 KiB/s, done.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758/git-flow-test.git</span><br><span class="line"> * [new branch]      develop -&gt; develop</span><br><span class="line">Branch &apos;develop&apos; set up to track remote branch &apos;develop&apos; from &apos;origin&apos;.</span><br><span class="line">➜  git-flow-test git:(develop)</span><br></pre></td></tr></table></figure><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><p>umm..现在假设我们现在碰到了一个需求，需要加一些功能，这时我们就需要开一个功能分支了，这时工作中常用的分支。那为啥都切到开发环境了还要单独开一个分支呢？这是避免产品调皮的说，“诶嘿，兄弟，刚才那个功能只是我突发奇想，咱们不要了吧”。嗯，这时宰一个产品祭天事小，污染了全局的开发环境才事大，回退都不好回退（可能团队中其他人也在写一些功能上去或者修复了一些bug上去，回退意味着其他人也会收到影响）。</p><p>而单独开一个分支则没那么多破事需要烦恼，再不济就删除这个分支即可，不需要耗费额外的成本。</p><p>我们先看一下给flow都有啥，使用命令<code>git flow -h</code>会提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow -h</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow &lt;subcommand&gt;</span><br><span class="line"></span><br><span class="line">Available subcommands are:</span><br><span class="line">   init      Initialize a new git repo with support <span class="keyword">for</span> the branching model.</span><br><span class="line">   feature   Manage your feature branches.</span><br><span class="line">   bugfix    Manage your bugfix branches.</span><br><span class="line">   release   Manage your release branches.</span><br><span class="line">   hotfix    Manage your hotfix branches.</span><br><span class="line">   support   Manage your support branches.</span><br><span class="line">   version   Shows version information.</span><br><span class="line">   config    Manage your git-flow configuration.</span><br><span class="line">   <span class="built_in">log</span>       Show <span class="built_in">log</span> deviating from base branch.</span><br><span class="line"></span><br><span class="line">Try <span class="string">'git flow &lt;subcommand&gt; help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>因为我们现在是想做一个新功能，feature 就是我们想要的命令。我们进一步查看详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature <span class="built_in">help</span></span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow feature [list]</span><br><span class="line">   or: git flow feature start</span><br><span class="line">   or: git flow feature finish</span><br><span class="line">   or: git flow feature publish</span><br><span class="line">   or: git flow feature track</span><br><span class="line">   or: git flow feature diff</span><br><span class="line">   or: git flow feature rebase</span><br><span class="line">   or: git flow feature checkout</span><br><span class="line">   or: git flow feature pull</span><br><span class="line">   or: git flow feature delete</span><br><span class="line"></span><br><span class="line">    Manage your feature branches.</span><br><span class="line"></span><br><span class="line">    For more specific <span class="built_in">help</span> <span class="built_in">type</span> the <span class="built_in">command</span> followed by --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><hr><p>我们使用<code>git flow feature start</code>再加上一个名字，这个名字代表着这个功能分支是做什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature start home</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Switched to a new branch <span class="string">'feature/home'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'feature/home'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'feature/home'</span></span><br><span class="line"></span><br><span class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</span><br><span class="line"></span><br><span class="line">     git flow feature finish home</span><br></pre></td></tr></table></figure><p>这时我们创建了一个名为<code>feature/home</code>的新分支，并且切换到了新分支上。feature的前缀就是前面使用默认的功能分支的名字。<br>这个 feature 可以当成一个放置功能的文件夹。</p><p>随后我创建一个 HTML 文件，并在上面写了少许代码假装（雾）完成了这个新功能的开发。<br>使用<code>git flow feature finish &lt;name&gt;</code>完成本回合的开发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(feature/home) ✗ git flow finish home</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</span><br><span class="line">Already up to date.</span><br><span class="line">Deleted branch feature/home (was 61ec91a).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The feature branch <span class="string">'feature/home'</span> was merged into <span class="string">'develop'</span></span><br><span class="line">- Feature branch <span class="string">'feature/home'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure><p>git flow 将分支合并后，会将<code>feature/home</code>分支删除。这时分支会切换到<code>develop</code>。<strong>注意，这时候的代码还没有提交到远端！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"添加新的功能"</span></span><br><span class="line">[develop 9ca31f9] 添加新的功能</span><br><span class="line"> 1 file changed, 12 insertions(+)</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git push</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 482 bytes | 482.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758/git-flow-test.git</span><br><span class="line">   61ec91a..9ca31f9  develop -&gt; develop</span><br></pre></td></tr></table></figure><h2 id="正式发布"><a href="#正式发布" class="headerlink" title="正式发布"></a>正式发布</h2><p>好啦，当我们开发的差不多了，bug都修完并且都测试过了，这时就可以考虑部署一版了。这时我们可以使用<code>git flow release start &lt;version number&gt;</code>进入发布的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git flow release start 1.0.0</span><br><span class="line">Switched to a new branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'release/1.0.0'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- Start committing last-minute fixes <span class="keyword">in</span> preparing your release</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow release finish <span class="string">'1.0.0'</span></span><br></pre></td></tr></table></figure><p>git flow 基于<code>develop</code>创建了一个新的分支，同时切换到新分支<code>release/1.0.0</code>上了。</p><p>这时我们可以进入最后的准备啦~比如我们一般发布都需要写版本信息，说明这版本都做了什么？新加了哪些功能？修了哪些bug等信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ touch changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ vim changelog.md</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="comment"># item name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## v1.0.0 2018/04/23</span></span><br><span class="line"></span><br><span class="line">* 基础功能完善</span><br><span class="line">* 完成巴拉巴拉功能</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"changelog.md"</span> 6L, 83C</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git add changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git commit -m <span class="string">"增加版本号信息"</span></span><br><span class="line">[release/1.0.0 f8464d6] 修改版本号信息</span><br><span class="line"> 1 file changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 changelog.md</span><br></pre></td></tr></table></figure><p>这时暂时先不用push，不过这里值得注意的是，<strong>一般来说，我们只有两个长期分支，一个 develop，另一个是 master分支。例如release 、feature等分支一般不会出现在远程的分支中。这是以为当我们做完这些工作流后，这些分支都会合并删除了。</strong></p><p>等完成这些工作后，我们把发布流程结束，在命令行输入: <code>git flow release finish 1.0.0</code>。git flow将会做以下几个步骤：</p><ul><li><p>pull代码，以确保本地分支的代码都是最新的版本。</p></li><li><p>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。<br>这时命令行会进入vim编辑器里的合并信息页，默认会以<code>Merge branch &#39;release/1.0.0&#39;</code>作为 commit<br>信息提交。我们也可以自己输入一些信息进行描述。(vim编辑器状态下，输入<code>a</code>则进入编辑状态，使用<code>:q</code>为不保存信息退出编辑器，<code>:wq</code>为保存信息并退出vim)。</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Merge branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Please enter <span class="keyword">a</span> commit message <span class="keyword">to</span> explain why this merge <span class="keyword">is</span> necessary,</span><br><span class="line"># especially <span class="keyword">if</span> it merges <span class="keyword">an</span> updated upstream into <span class="keyword">a</span> topic branch.</span><br><span class="line">#</span><br><span class="line"># Lines starting with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts</span><br><span class="line"># the commit.</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"~/MyProject/git-flow-test/.git/MERGE_MSG"</span> <span class="number">7</span>L, <span class="number">256</span>C</span><br></pre></td></tr></table></figure><ul><li>保存后又会进入另一个信息，这次这个是确定版本号信息。我们将<code>v1.0.0</code>前面的<code>#</code>去掉，让其作为tag，<code>v</code>是一开头初始化所用的前缀，而<code>1.0.0</code>则是我们这次发布的名称（版本号）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Write a message for tag:</span></span><br><span class="line"><span class="comment">#   v1.0.0</span></span><br><span class="line"><span class="comment"># Lines starting with '#' will be ignored.</span></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"~/MyProject/git-flow-test/.git/TAG_EDITMSG"</span> 5L, 84C</span><br></pre></td></tr></table></figure><ul><li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字。</li><li>清理操作，版本分支会被删除，并且回到 “develop”。</li></ul><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>上线后，在进行测试时会可能会发现之前没有留意到的小bug，比如展示的数据调错了字段，当bug修复后，这时就可以使用git flow 里的<code>hotfix</code>，用来表示bug的修复。值得注意的是，<code>hotfix</code>与之前两个分支有些不同，<code>hotfix</code>是基于<code>master</code>主分支的修复，而前面两者是基于<code>develop</code>分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(master) git flow hotfix start v1.0.1hotfix</span><br><span class="line">Switched to a new branch <span class="string">'hotfix/v1.0.1hotfix'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'hotfix/v1.0.1hotfix'</span> was created, based on <span class="string">'master'</span></span><br><span class="line">- You are now on branch <span class="string">'hotfix/v1.0.1hotfix'</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Start committing your hot fixes</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow hotfix finish <span class="string">'fixShoppingCart'</span></span><br></pre></td></tr></table></figure><p>然后你会看到git flow会提示你：</p><ul><li>开始修复你bug</li><li>修复bug也是需要影响版本号的</li><li>完成上述工作后就可以结束这个补丁啦~</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) vim index.html</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ vim changelog.md</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git commit -m <span class="string">"fixed shopping cart bug"</span></span><br><span class="line">[hotfix/v1.0.1hotfix 1506b7f] fixed shopping cart bug</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) git flow hotfix finish v1.0.1hotfix</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> changelog.md | 2 ++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> changelog.md | 8 ++++++++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 10 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 changelog.md</span><br><span class="line">Deleted branch hotfix/v1.0.1hotfix (was 1506b7f).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been merged into <span class="string">'master'</span></span><br><span class="line">- The hotfix was tagged <span class="string">'vv1.0.1hotfix'</span></span><br><span class="line">- Hotfix tag <span class="string">'vv1.0.1hotfix'</span> has been back-merged into <span class="string">'develop'</span></span><br><span class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure><p>我们使用<code>git flow hotfix finish v1.0.1hotfix</code>结束工作流后，跟之前那样会出现合并的信息，如果需要的话，就添加相应秒速信息，再保存退出即可。</p><p>这时会将修复的部分同时合并到<code>master</code>和<code>develop</code>分支上，同时会为这次hotfix打上 tag。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>bugfix</code>，它也是修复bug分支。看到这里就会有同学会疑问了：“啥？又改bug，这和之前那个又有啥区别？”。</p><p>原来它与<code>hotbug</code>不同的是，它是基于<code>develop</code>分支的。事实上这一个工作流在笔者的日常开发中用的比较少，似乎有些gif flow 的模型中都没有这个工作流，不过我也没有深入的去考证~因为目前没有遇到碰到这个的场景，了解的同学不妨留言讨论分享一下。</p><p>除此之外还有一个<code>support</code>的功能，是想用来支持以前的版本产品，这是一个实验性的功能，不太建议使用这个。</p><p>如果你偏爱于可视化的git的话，如同 sourcetree 之类的 Git GUI 也内置有git flow。</p><img title="Mac下的SourceTree" data-src="/blog/2018/04/23/git-flow/img-1.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>git flow实际上就一连串命令的组合，我们也可以单个单个的输入命令达到同样的效果。虽说git flow统一了工作流程，但并不是适用于全部的场景。项目中只有一个人时却反而会显得有点繁琐了。我们应该根据实际项目去选择符合项目的工作流。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> git flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器与服务端的背后交互: 详解页面请求的过程</title>
      <link href="/blog/2018/04/06/URL-to-browser/"/>
      <url>/blog/2018/04/06/URL-to-browser/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/04/06/URL-to-browser/banner.jpg"><p>这其实一个很经典的一个题目啦~但其涉及知识面之广，却值得一说。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我们将 URL 输入至浏览器的地址栏后回车, 首先浏览器就会开始检查 URL 是否合法, 是否 IP 地址， 若是不符合匹配规则, 将会以关联字进行搜索， 并带至搜索页（这个看浏览器设置）.</p><p>我们以掘金为例, 我在输入 URL 的时候粗心的输错了协议. 但 Chrome 浏览器不认识这玩意呀, 然后将我们带到了搜索页. 仿佛在说: “嘿, 兄弟. 虽然不太理解你想干嘛, 但是你可以看看这里有你想要的东西吗?”</p><img data-src="/blog/2018/04/06/URL-to-browser/img-1.png"><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>嘿, 接下来我们需要了解一些基础的概念~</p><p>通常我们看到诸如<code>www.baidu.com/</code>之类的网址， 我们将其称之为域名. 而 <strong>DNS</strong>就是<strong>域名系统(Domain Name System)</strong>，它所处于的角色就是将主机名和域名映射为相应的 IP 地址.</p><p>事实上我们向服务端请求资源时, 也可以直接输入目标 IP, 并不一定需要通过域名才能访问到. 但更多的时候，我们常见的还是使用域名的方式进行访问， 这是为什么呢？</p><p>其实这个也很好理解，当你需要记住十个以上诸如<code>111.13.101.208</code>的 IP 地址的话，你就会感觉头疼了，如果我们使用我们熟悉的单词去记的话，相反就没那么困扰了（想想淘宝，京东和百度的域名~）.</p><p>然而当计算机在网络进行通讯时, 它们仍然需要 IP 地址————因为它们不认得域名，这时 DNS 就派上用场啦~ 换句话说, 域名对于服务端来说, 并不是必须的，这只不过是方便人脑记忆罢了~</p><img title="通过 IP 地址来访问百度首页" data-src="/blog/2018/04/06/URL-to-browser/anima-1.gif"><hr><p>ok, 咱们回归正题, 我们把前面的错误纠正, 输入正确的 URL =&gt; 浏览器开始解析 DNS:</p><ul><li>首先浏览器将接收到的<code>URL</code>查询主机名，并将主机名发送到<code>DNS</code>客户端.</li><li>随后查找缓存中是否有该域名的记录， 缓存查找会根据以下几步进行查找：<ul><li>每个浏览器都有自己的缓存, 浏览器会先检查自身的缓存的是否存在目标的<code>DNS</code>记录? 如果有则进行尝试连接.(chrome 浏览器的 DNS 是采用预解析的, 我们可以在地址栏输入 about:DNS 查看浏览器本地的<code>DNS</code>)</li><li>如果浏览器缓存没有找到, 进而会查找操作系统中的<code>DNS</code>. (windows 可以在命令行使用<code>ipconfig /displaydns</code>来查看 <code>DNS</code>)</li><li>如果在本地<code>DNS</code>都没有找到的话, 则会查找<strong>hosts 文件</strong>(域名解析文件), 它是负责将主机名映射到相应的<code>IP</code>地址。随带一提，我们在日常开发中常用到的<code>127.0.0.1</code>默认就在<strong>hotst 文件</strong>中映射了域名为<code>localhost</code>, 因此我们直接使用<code>localhost</code>来访问<code>127.0.0.1</code>。这些都是可以由我们自定义的。</li></ul></li><li>如果 hosts 与本地 DNS 解析器缓存都没有相应的网址映射关系，首先会找 TCP/IP 参数中设置的首选 DNS 服务器（比如谷歌通用 DNS 地址 8.8.8.8），我们叫它本地 DNS 服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析。</li><li>如果要查询的域名，由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析。</li><li>如果仍然没有找到的话， 本地 DNS 会发出一个请求到 <strong>ISP DNS 缓存服务器（互联网服务提供商，如电信，你用的是哪一家的网）</strong>进行递归查询.</li><li>如果仍然没有找到，就会去根域名进行查询，根域名服务器全球只有十三台。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com）服务器 IP 告诉本地 DNS 服务器。</li><li>顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的 IP 地址告诉本地 DNS 服务器。</li><li>主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录。</li><li>找到会将结果缓存起来， 同时返回结果给客户端.</li></ul><p>从客户端到本地<code>DNS</code>服务器是属于递归查询，而<code>DNS</code>服务器之间就是的交互查询就是迭代查询。</p><p><strong>资料借鉴：</strong> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzMDQyMTMx" title="https://www.zhihu.com/question/23042131">DNS 解析的过程是什么，求详细的？<i class="fa fa-external-link"></i></span></p><h2 id="TCP-IP-连接"><a href="#TCP-IP-连接" class="headerlink" title="TCP/IP 连接"></a>TCP/IP 连接</h2><blockquote><p>世界上几乎所有的 HTPP 通信都是由 TCP/IP 承载的，TCP/IP 是全球计算机及网络设备都在使用的一种常用的分组交换网络分层。 HTTP 的连接实际上就是 TCP 连接以及其使用规则。 –《HTTP 权威指南》</p></blockquote><p>紧接着，浏览器拿到 IP 地址后， 浏览器获取 URL 的端口（每个协议都有默认的端口号，比如 http 默认端口就为 80.），URL 中没有则获取协议的默认端口。</p><p>随即浏览器发起 TCP 连接请求：</p><ul><li>创建新的套接字（socket）.</li><li>浏览器发起到 120.41.39.47:443(掘金主页 IP 及端口) 的连接.<ul><li>建立一条新的 TCP 连接时， TCP 软件会进行交换一系列的 IP 分组，对连接的有关参数进行沟通.<br>a1). 首先浏览器会发送一个小的 TCP 分组，这个分组设置了一个特殊的 <strong>SYN</strong> 标记，用来表示这是一条连接请求，然后等待服务端的回应.<br>a2). 服务器接受了连接后， 会对一些连接参数进行计算，并向客户端传回个 TCP 分组，这分组中包含有 <strong>SYN</strong> 和 <strong>ACK(确定字符)</strong> 标记，说明请求已经成功建立.<br>a3). 如果浏览器迟迟没有收到 ACK 标记时， 可能会重新发送一个请求。如果 收到后，则会向服务器回送一条 ACK（确认信息），将完整的请求头发送出去.</li></ul></li><li>服务器读取请求后，对 HTTP 请求进行处理.</li><li>判断请求是否合理合法，合理的话就执行所请求的动作，并将数据写回客户端.</li></ul><img title="访问掘金首页" data-src="/blog/2018/04/06/URL-to-browser/anima-2.gif"><p>在输入网址后，浏览器向服务端发起请求，服务端先是返回一个<code>doc</code>类型的<code>HTML</code>文件回来，浏览器解析文档时，再一次根据文档里的(link 或者 script 标签)进一步请求外部资源（详情放在下面再说）.<br>我们可以在<strong>Network</strong>上看到，浏览器将请求发出去后，请求的<code>status</code>会变为<code>pending</code>，这也是上面说到开始建立连接请求的第一步，正在等待服务器的回应。随即我们点进请求详情内，可以发现请求头只有少量的字段。<br>我们再打开一个请求状态（status）为 200 的请求，就能看到完整的请求头以及服务端传回来的响应了.</p><h2 id="渲染文档"><a href="#渲染文档" class="headerlink" title="渲染文档"></a>渲染文档</h2><p>接着上面的问题， 浏览器开始解析页面。不过不同的浏览器引擎渲染过程都不太一样，这里姑且先说说<code>webkit内核</code>的渲染方式.</p><ul><li>首先浏览器的HTML解释器（HTML Parser）先工作，它将HTML的标签解析为DOM树。（DOM树构建）.<ul><li>如果遇到了<code>&lt;script&gt;</code>标签则会停止解析文档，这是因为JavaScript中可能会带有<code>document.write</code>方法，可能会重写页面的结构，因此浏览器会等待<code>script</code>标签下载完毕并执行后才会继续解析文档。</li><li>这也是著名的web开发最佳实践的规则之一的由来————将<code>&lt;script&gt;</code>放在<code>&lt;body/&gt;&gt;</code>之上，这样就不会阻塞文档解析了。</li></ul></li><li>接着css解析器（CSS Parser）会在DOM树构建完毕后开始解析css，它和DOM树一样最后解析出来的是树形结构的<strong>CSSOM</strong>（css object module，别名也要StyleRules），浏览器将解析后的样式信息保存到新建的<code>RenderStyle</code>对象中。</li><li><code>RenderStyle</code>对象被<code>RenderObject</code>类所管理和使用.</li><li>当创建RenderObject对象之后，每个对象是不知道自己的位置、大小等信息的，webkit根据盒模型来计算他们的位置、大小等信息，这个过程也被称之为回流与重绘（reflow and reflow）.</li><li>页面呈现.</li></ul><p>页面绘制的过程在下图的加载Mozilla官网动图就很好的体现了出来~</p><img data-src="/blog/2018/04/06/URL-to-browser/Mozilla.gif">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详解图片的加载方式</title>
      <link href="/blog/2018/03/24/loading-pictures/"/>
      <url>/blog/2018/03/24/loading-pictures/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/03/24/loading-pictures/banner.png"><p>[大图预警，流量慎入！] 我们在浏览页面获取信息时, 细心的你可能会留意到, 不同网页的图片可能有不同的加载方式. 那么究竟是由什么决定图片的加载方式的呢? 然后不由的陷入了沉思(.jpg), 所谓耳听为虚, 就让自己来动手操作一下吧~</p><a id="more"></a><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><p>目前所知的图片加载方式主要有两种: 一种是<strong>线性加载</strong>, 而另一种则是<strong>渐进式加载</strong>.</p><p><strong>线性加载</strong>其实我们已经很熟悉啦, 图片的加载方式由上至下, 一点一点的加载的方式. 同时也是最常见的方式. 如下为例:</p><img data-src="/blog/2018/03/24/loading-pictures/anima-1.gif"><p><strong>渐进式</strong>则如同名字一般, 它会先显示低分辨率的近似图像, 再逐步的增加图片分辨率(模糊到清晰). 这里容我卖个关子, 不上示例图先.</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>那么到底是什么决定了图片的加载方式呢? 事实上, 加载方式在作图的时候就已经被定下来了.</p><p>比如在 Photoshop 中, 我们使用快捷键<code>ctrl + shift + alt + s</code>, 弹出储存为 Web 所用格式, 再选择<code>jpeg</code>格式后能看到下面有一个<strong>连续</strong>的选项(悬浮提示以多条路径下载), 这个选项的背后就是一个算法的接口，默认是不勾选的。渐进式使用的是小波变换, 而默认线性加载则是离散余弦变化算法. (关于算法的问题已经超出了本文的讨论范围, 这里姑且不谈.)</p><img title="Photoshop 界面" data-src="/blog/2018/03/24/loading-pictures/img-1.jpg"><p>浏览器在加载页面的时候, 读取图片的压缩算法, 再根据不同的压缩算法来选择相应的渲染算法.</p><h2 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h2><p>嗯, 看似很有道理的样子呢, 那实际效果如何呢? 来动手测试一下: 我准备了两张相同内容但不同加载方式的图片. 将控制台打开, 设置一个比较差的网速来对比两张图片的加载情况.</p><img title="jpg格式下, 两张图片加载对比" data-src="/blog/2018/03/24/loading-pictures/diff-1.gif"><p>what? 怎么好像跟想象中的有所出入? 仔细一瞧, 图一虽然从上至下的加载, 但同时它的清晰度也跟着变化. 而图二则没有这种的效果.</p><p>随后我想到了文件大小的限制的问题, 为了了解更详细加载过程, 我再次准备了两张<code>png</code>的格式, 只不过在ps上<code>png</code>格式需要勾选的选项变成是<strong>交错</strong>, 然后再次进行试验:</p><img title="png格式下, 两张图片加载对比" data-src="/blog/2018/03/24/loading-pictures/diff-2.gif"><p>啊哈… 由于图片本身也挺大的, 在这加载期间两者之间差距就体现出来了 —— 原来前面那只是因为算法前期结构的构建. 细心的同学还会看到, 虽然图一看上去最先加载完了图片, 但控制台里跳动<code>Size</code>和<code>Time</code>还在告诉我们, 浏览器仍然还没有下载渲染完这张图片, 安静的等待渲染完毕后, 你可能还会惊讶的发现: 什么? 图一竟然比图二还加载的时间还长一点?</p><p>是的, 得益于渐进式逐步加载的算法, 人们在视觉上会感觉渐进式相比线性更快一些, 虽然实际加载的时间可能还会长点, 但用户体验的确是上去.</p><p>然而并非所有浏览器都支持渐进式加载, 翻阅了一下资料, 发现早期张鑫旭dalao也写过类似的内容, 也可以参考一看: <span class="exturl" data-url="aHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS93b3JkcHJlc3MvMjAxMy8wMS9wcm9ncmVzc2l2ZS1qcGVnLWltYWdlLWFuZC1zby1vbi8=" title="http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/">渐进式jpeg(progressive jpeg)图片及其相关<i class="fa fa-external-link"></i></span></p><h2 id="JavaScript的渐进式"><a href="#JavaScript的渐进式" class="headerlink" title="JavaScript的渐进式"></a>JavaScript的渐进式</h2><p>前文介绍渐进式的时候卖了个关子, 没上示例图是为啥呢~ 这是因为此物非彼物, 我们常看到的渐进式加载可能不是由图片本身算法的效果, 为了避免混淆才暂时不上. 文章看到这里, 有过开发经验的同学就会明白, 若真有这种需求, 我们总不能祈祷全部用户上传图片都是渐进式的吧, 这也不现实.</p><p>google 图片就是使用<code>javascript</code>来操作图片的渐进式. 在点击查看大图的时候, 预先加载一个缩略图, 同时图片底布有一条loading的效果. 加载完毕后就显示清晰的图片, 并且将 loading 隐藏起来. 我在控制台研究了一段时间, 没研究出具体的实现手法. 知道的dalao也不妨留言, 交流一下~</p><img title="png格式下, 两张图片加载对比" data-src="/blog/2018/03/24/loading-pictures/google-1.gif"><p>至于知乎的渐进式加载图片, 已经有知友分析过了, 实现方式跟我上一篇文章讲的东西思路也有相似之处, 只不过是针对方向不同~ 有兴趣的可以移步知友的回答: <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzU1NjIyOTMwL2Fuc3dlci8xNDU0NzUyNDM=" title="https://www.zhihu.com/question/55622930/answer/145475243">新版知乎加载图片时从模糊到清晰的这个效果是如何做出来的？ - Tw93的回答<i class="fa fa-external-link"></i></span></p><hr><p>最后如果有什么说的不对的或者, 欢迎dalao们指出批评~</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
            <tag> Photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于移动端GIF动图逐个播放的思路</title>
      <link href="/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
      <url>/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<img class="lazy" data-src="/blog/2018/03/11/关于前台GIF动图逐个播放的思路/banner.png"><p>最近碰到了一个需求, 大致是移动端有一个提示页, 在页面中会四个GIF图, 连起来像一个”小视频”一样, 用来展示商品的步骤.</p><p>但是四个GIF一起播放的话, 那么用户体验就自然没有那么好啦. 我仔细的想了想, 想到了微博的GIF图好像就是一张一张播放的, 那么我们前端有没有办法也实现这个逐个播放的功能呢…</p><a id="more"></a><hr><p>事实上, 浏览器并没有给我们提供控制GIF的API(据说曾经好像有, 但因为用户体验的问题被废除了, 关于这点我没有去考证过), 我们无法得知这个动画是否已经结束了, 或者控制它的播放和停止.</p><p>网上并没有太多关于这方面的资料, 不过张鑫旭dalao的<span class="exturl" data-url="aHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS93b3JkcHJlc3MvMjAxNS8xMi9jc3MzLWFuaW1hdGlvbi1qcy1jYW52YXMtZ2lmLXBhdXNlLXN0b3AtcGxheS8=" title="http://www.zhangxinxu.com/wordpress/2015/12/css3-animation-js-canvas-gif-pause-stop-play/">这篇文章<i class="fa fa-external-link"></i></span>. 其中一个方法给我一个思路 —— 虽然<code>img</code>并没有这种事件, 但是我们可以使用canvas做替换呀.</p><p>说干就干, 这里借鉴dalao的代码, 对<code>HTMLImageElement</code>(可以用来操纵<code>&lt;img&gt;</code>元素的布局和图像)的原型作扩展, 增加两个方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'getContext'</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展播放功能</span></span><br><span class="line">  HTMLImageElement.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.storeCanvas) &#123;</span><br><span class="line">      <span class="comment">// 移除存储的canvas</span></span><br><span class="line">      <span class="keyword">this</span>.storeCanvas.parentElement.removeChild(<span class="keyword">this</span>.storeCanvas);</span><br><span class="line">      <span class="keyword">this</span>.storeCanvas = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 透明度还原</span></span><br><span class="line">      <span class="keyword">this</span>.style.opacity = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.storeUrl) &#123;</span><br><span class="line">      <span class="keyword">this</span>.src = <span class="keyword">this</span>.storeUrl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展停止功能</span></span><br><span class="line">  HTMLImageElement.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">let</span> width = <span class="keyword">this</span>.width;</span><br><span class="line">    <span class="keyword">let</span> height = <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (width &amp;&amp; height) &#123;</span><br><span class="line">      <span class="comment">// 存储图片链接</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.storeUrl) &#123;</span><br><span class="line">        <span class="keyword">this</span>.storeUrl = <span class="keyword">this</span>.src;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// canvas 和图片相同宽高</span></span><br><span class="line">      canvas.width = width;</span><br><span class="line">      canvas.height = height;</span><br><span class="line">      canvas.getContext(<span class="string">'2d'</span>).drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重置当前图片</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.src = canvas.toDataURL(<span class="string">"image/gif"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 跨域, 这时画布被污染</span></span><br><span class="line">        <span class="keyword">this</span>.removeAttribute(<span class="string">'src'</span>);</span><br><span class="line">        canvas.style.position = <span class="string">'absolute'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        <span class="keyword">this</span>.parentElement.insertBefore(canvas, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.style.opacity = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">this</span>.storeCanvas = canvas;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前台并没有我们想要操作图片的事件, 因此无法得知gif能持续多少秒, 这点只能由服务端来判断. 所幸这次情况没有那么复杂, 我们不需要适配随机的GIF. 就根据我们手头的动图计算有多少帧, 查看得知每个GIF播放时间都为3s. 再使用定时器的方式去调用方法, 为了防止用户没看清GIF的动作, 因此在定时器时间上再翻了一倍.</p><p>页面代码大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .split-line End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"body-title"</span>&gt;</span>观影指南<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-tips"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-line clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-1.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1.坐上座椅，系好安全带<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-2.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>2.于右手边取眼镜佩戴，并带上耳机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-line clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-3.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>3.按下扶手上的按钮，开始观影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-img"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./tips-4.gif"</span> <span class="attr">alt</span>=<span class="string">"tips-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>4.如感不适，长按按钮停止观 影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .body-tips End --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先选择全部目标GIF, 使其暂停(初始化). 紧接着包装一下定时器用函数调用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里是 ES6 的写法</span></span><br><span class="line"><span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.tips-img img'</span>)</span><br><span class="line"><span class="keyword">let</span> palyTimer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palyGif</span> (<span class="params">num = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  clearTimeout(palyTimer)</span><br><span class="line">  images[num].play()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  palyTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    images[num].stop()</span><br><span class="line">    num = (images.length - <span class="number">1</span> &lt;= num) ? <span class="number">0</span> : ++num</span><br><span class="line">    images[num].play()</span><br><span class="line">    <span class="keyword">return</span> palyGif(num)</span><br><span class="line">  &#125;, <span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">images.forEach(<span class="function"><span class="params">img</span> =&gt;</span> img.addEventListener(<span class="string">'load'</span>, img.stop, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"><span class="comment">// 函数提升, 将其推向下一队列</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> palyGif(), <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>仅仅几行代码留实现我们想要的效果啦(图片压了下):</p><img data-src="/blog/2018/03/11/关于前台GIF动图逐个播放的思路/anima-1.gif"><hr><p>至于微博那种逐个播放的效果, 我原本想在控制台研究一下它实现的原理. 但仔细一看, 发现微博动图在手机客户端和非客户端上的效果是不一样的. 也就是说在安卓客户端上的确逐个播放, 但是在手机网页上却是一起播放, 并没有实现这个功能, PC页面同理, 因此推测并不是使用js实现的.</p><p>最后各位看官如果有什么好的想法的话, 可以留个言一起交流一下呗~</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> gif </tag>
            
            <tag> canvas </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊常见的跨域问题</title>
      <link href="/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/03/04/聊聊常见的跨域问题/banner.jpg"><p>跨域是前端工程中一个很常见的问题啦. 今天就来聊一聊跨域, 以及常见的处理方式和原理.</p><a id="more"></a><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h2><p>跨域实际上源于浏览器对javascript的一种安全限制(也被称之为同源策略). 默认情况下, 我们只能访问同一协议、同一域名、同一端口下的资源. 如今都是提倡前后分离的情况下, 前端更是需要调用大量后台接口的场景, 因此解决跨域的问题就摆在了面前.</p><h2 id="产生跨域的原因"><a href="#产生跨域的原因" class="headerlink" title="产生跨域的原因"></a>产生跨域的原因</h2><p>产生跨域的原因我们主要归为这两点:</p><ol><li>浏览器安全限制(不能读取不同域、端口、协议下的内容)</li><li>使用的是XHR(XMLHttpRequest)请求</li></ol><p>同源策略这个原因是众所周知了, 它作为一个安全策略, 的确有效预防了某些安全上的问题. 但同时又阻止了大量适合使用的跨域请求. 而 XHR 也受同源策略影响: 浏览器不允许 javascript 查找跨域文档的内容. 使用 XHR, 文档内容都是通过<code>responseText</code>属性暴露, 因此同源策略不允许 XHR 进行跨域请求.</p><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><p>跨域很多情况下都需要后端的配合, 因此主要先来谈谈前端的跨域方案.</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>前文我们说过, 产生跨域的原因之一XHR请求, 但是<code>script</code>发出的请求类型(type)并不是<code>xhr</code>, 因此可以解决跨域的问题.</p><p>JSONP 由回调函数和数据组成的, 实现方式就是动态创建一个<code>&lt;script&gt;</code>标签, 然后设置<code>src</code>属性指向的跨域的URL(包涵请求参数). 来向服务端请求数据.</p><p>比如我们要查询小明的信息, 这时我们得知它的<code>userID</code>为 1150, 同时我们都知道GET请求可以通过url进行传参, 因此我们向服务器发起请求:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = <span class="string">"https://www.example.com/users?user_id=1150"</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure><p>在插入<code>&lt;script&gt;</code>标签到<code>&lt;body&gt;</code>后, 浏览器立马就去请求服务器的资源. 值得注意的是, 使用<code>jsonp</code>也需要服务端的配合. 因此必须通过某种方式来告知服务端, 我们正在通过<code>&lt;script&gt;</code>标签调用请求, 必须返回一个JSONP响应, 而不应该是普通JSON响应.</p><p>至于什么叫<code>jsonp</code>响应呢? 这里其实很好理解.. 假设后端发回来的是<code>json</code>格式的数据, 我们也用不了呀, 数据还是数据, 不会做任何变化.. 为了让浏览器可以在<code>&lt;script&gt;</code>标签里直接使用, 我们需要让服务端返回一段js代码 —— 用函数包装的json的形式(这也jsonp中”P(padding)”的含义). 这个函数名前后端可约定. 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端返回 js 代码到 &lt;script&gt;里</span></span><br><span class="line">userData(&#123;<span class="string">'naem'</span>:<span class="string">'小明'</span>,<span class="string">'id'</span>:<span class="number">1150</span>,<span class="string">'level'</span>:<span class="string">'中等'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当 jsonp 请求成功后, 将json传入函数并调用, 我们拿到 json 后就可以做一些其他的事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来拿B站为例. 打开chrome下的network, 上图就是<code>jsonp</code>的应用, 服务端返回的js脚本. 下图可以发现, 我们发出去的请求类型是<code>script</code>,  验证了前文所说的<code>&lt;script&gt;</code>不受同源策略影响的.</p><img data-src="/blog/2018/03/04/聊聊常见的跨域问题/img-1.jpg"><p>目前主流的类库都对<code>jsonp</code>进行了封装, 如<code>JQuery</code>的<code>getJSON</code>和<code>ajax</code>, 这里就不深入讲解了. 最后对<code>jsonp</code>总结一下:</p><p><code>jsonp</code>实际上是一个非正式传输协议, 或者说是一种”投机取巧”的方式. 我们可以利用<code>&lt;script&gt;</code>的特性从而进行数据交互解决跨域的问题. 相对来说, 它也有一定的局限性: 只能应用在GET请求上, 除此之外还有安全性的问题 —— 只能用在我们信任的服务端, 因为你不能保证对方未来会给你传些什么…</p><h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>说完了”不正规”的<code>jsonp</code>, 紧接着我们再说说原生的<code>CORS</code>规范. 我们先来看看官方的定义:</p><p><strong>CORS(Cross-origin resource Sharing, 跨资源共享)</strong>, 定义了访问跨域资源时, 浏览器和服务器应该如何沟通. 其背后主要思想就是<strong>使用自定义的HTTP头部</strong>来让浏览器与服务器进行沟通, 从而决定请求或相应是否成功, 还是应该失败.</p><p>目前主流的浏览器都已经对CORS有着良好的支持, 而IE8 ~ 9则还需要使用专用的<code>XDomainRequest</code>这里我们抛开不谈.</p><img data-src="/blog/2018/03/04/聊聊常见的跨域问题/img-2.png"><p>这个功能实际上是由浏览器自动完成的, 我们并不需要做什么额外的工作. 对于开发者来说, 也就需要了解一些安全细节的问题, 这一点我们放在后面讲.</p><h4 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h4><p>浏览器发送CORS请求时, 会将请求分为<strong>简单请求</strong>与<strong>非简单请求</strong>.</p><p>在我们日常工作中, 常用的<strong>简单请求</strong>可以将其归为以下几点:</p><ul><li>使用的方法(Methods)为<code>HEAD</code>、<code>GET</code>、<code>POST</code></li><li>请求头无自定义头</li><li><code>Content-Type</code>只能是以下几种<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p><strong>非简单请求:</strong></p><ul><li><code>PUT</code>, <code>Delete</code> 方法的 ajax 请求</li><li>发送 JSON 格式的 ajax 请求(比如post数据)</li><li>带自定义头的 ajax 请求</li></ul><p>如果是简单请求, 则会<strong>先执行, 后判断</strong>。执行的过程大致如下:</p><p>浏览器发起请求检测到是 CORS 请求, 然后添加一个<code>origin</code>字段(其中包含页面源信息: 协议、域名、端口) =&gt; 服务端收到后作相应的处理(对比<code>origin</code>, 服务端判断这个源是否接受)返回结果给浏览器 =&gt; 浏览器检查响应头是否允许跨域信息 =&gt; 允许, 那就当做没事发生. 不允许, 浏览器抛出相应的错误信息(值得一提的是, 这时状态码也还有可能是200).</p><p>非简单请求执行顺序又有些不同. 在发生 CORS 请求时, 浏览器预先发送一个<code>option</code>请求. 浏览器这种行为被称之为<strong>预检请求(Preflighted request)</strong>. 其中包含如下的请求头:</p><ul><li>origin: 同上，包含页面源信息.</li><li>Access-Control-Request-Methods: 请求方法</li><li>Access-Control-Request-Header: 自定义头部信息, 多个头部以逗号分隔(可选, 看请求时有没有定义请求头)</li></ul><p>举个栗子, 我们用JQuery发送一段JSON格式的请求做演示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type : <span class="string">"post"</span>,</span><br><span class="line">  url: <span class="string">"https://www.example/api/rank"</span>,</span><br><span class="line">  contentType : <span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">"something"</span>&#125;),</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">    result = json;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时请求头(Request Headers)信息如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Access-Control-Request-Header</span>: content-type</span><br><span class="line"><span class="attribute">Access-Control-Request-Methods</span>: POST</span><br><span class="line"><span class="attribute">Connection:keep-alive</span></span><br><span class="line"><span class="attribute">Host</span>: https://www.example.com</span><br><span class="line"><span class="attribute">origin</span>: localhost:8080</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1</span><br></pre></td></tr></table></figure><p>服务端接收到预检请求后, 判断是否允许这种类型的请求. 在响应头(Response Header)上返回如下头部与浏览器进行交流:</p><ul><li>Access-Control-Allow-Origin: 服务端允许的源信息</li><li>Access-Control-Allow-Methods: 服务端允许的方法, 多个方法可以使用顿号分隔</li><li>Access-Control-Allow-Headrs: 服务端允许的头部, 多个头部可以使用顿号分隔</li></ul><p>当预检请求被通过后, 我们原本想要发送的请求才会发送出去.</p><p>另外, 细心的你或许已经注意到了, 非简单请求这一来一回需要发送两次请求, 如果频率高的情况下岂不是很费性能又影响效率? 所幸的是HTTP协议新增(IE10+)了一个响应头用于缓存预检请求. 服务端在响应头添加如下字段:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 3600</span><br></pre></td></tr></table></figure><p>这个响应头表示这个预检请求可以缓存多长时间, 单位为秒. 这里3600s = 1h, 也就是说一个小时内可以不用再发预检命令了.</p><h4 id="带-cookie-的跨域请求"><a href="#带-cookie-的跨域请求" class="headerlink" title="带 cookie 的跨域请求"></a>带 cookie 的跨域请求</h4><p>默认情况下, 跨域请求是不带上 cookie 的. 前端需要将<code>withCredentials</code>属性设置为<code>true</code>, 同时还需要服务端设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>启动 cookie. 如果在发送 cookie 的时候, 浏览器检测到服务端响应头没有这个头部, 那么就会在控制台抛出一个错误.</p><p>另外, 还有一个值得注意的是. 服务端响应头设置了<code>Access-Control-Allow-Origin: *</code>的话, 是不能满足带 cookie 的跨域请求的. 因此有这种场景不能使用通配符, 需要全匹配字段.</p><h4 id="CORS-总结"><a href="#CORS-总结" class="headerlink" title="CORS 总结"></a>CORS 总结</h4><p>简单总结一下 CORS. CORS的出现也是为了解决跨域的问题. 只不过和<code>JSONP</code>不同, 它是纳入规范的一部分, 它几乎支持所有的类型的HTTP请求(JSONP只能使用GET). 唯一美中不足的也就是兼容性的问题, 因此可以使用JSONP作向下的兼容</p><p>事实上前端在 CORS 上并没有多少可操作的余地, 主要的还是浏览器来处理、服务端在设置, 但是并不代表我们就不需要了解这些知识啦.</p><hr><p>嗯, 其他的跨域方法先挖个坑..</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[环境搭建] 从零开始配置 vscode</title>
      <link href="/blog/2018/02/06/dev-zero-configuration-vscode/"/>
      <url>/blog/2018/02/06/dev-zero-configuration-vscode/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/banner.png"><p>我们在进行开发工作时，选择一个顺手好用的 IDE 是必不可免的, 其中 <code>vscode</code> 就是一个很好的选择。它能让你大部分的工作都在编辑器内完成, 大大的提高开发效率~</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>vscode</code> 内置了前端相关的基础环境，如<code>emmet</code>扩展。另外的环境则可以通过它自己的插件商城来找到对应的插件。比如常见的预处理器的语法高亮。同时它有良好成熟的生态圈, 足够满足我们日常开发的所需的东西.</p><p>它提供了很多便捷的自定义配置，并且贴心的给每行设置都加上了备注，告诉你是有什么作用。</p><p>同时 <code>vscode</code> 对中文的支持很好，对于啃英语有些吃力的朋友会比较友善(虽然英语是程序员的基本功之一~</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img-1.jpg"><p><code>vscode</code> 还内置 <code>git</code> 源代码管理系统, 也就是说我们在写完代码后无需离开编辑器再另开一个<code>bash</code>来提交代码，直接在编辑器上完成对比代码差异后，确定无误后再提交相关的工作。还可以直接在编辑器上进行代码调试, 不过这些不在本文的讨论中。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWF6ZW1vaC5vbmUtbW9ub2thaQ==" title="https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai">One Monokai Theme<i class="fa fa-external-link"></i></span></p><p>程序员的日常生活就是在<code>coding</code>, 可以说每天都在跟编辑器打交道, 因此编辑器的颜值能影响到咱们的心情，进而影响开发效率~</p><p>在扩展商城里, 我们可以去挑选一些自己喜欢的主题, 来提高编程体验。这里笔者推荐使用<code>One Monokai</code>的主题, 它的配色对阅读代码还是挺舒服的，当然也可以去尝试其他的主题~</p><p>下载主题后还需要<code>用户设置</code>上设置使用的主题.</p><h2 id="关于快捷键"><a href="#关于快捷键" class="headerlink" title="关于快捷键"></a>关于快捷键</h2><p>如果你是某个编辑器的用户，你已经习惯了原先编辑器的快捷键，现在切换过来的话怕又要重新设置自己熟悉的快捷键觉得很麻烦的话，没有关系~</p><p><code>vscode</code>贴心的准备了其他编辑器快捷键插件，节省你重新学习的时间成本。笔者就是从<code>sublime</code>转向<code>vscode</code>从此一去不复返~</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img.png"><h2 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h2><p>假设你现在配置了让自己很舒服的一个开发环境，这时你因为硬件故障导致电脑重装或者电脑迁移等因素，要需要重新配置环境，那肯定会挺苦恼的。</p><p>因此强烈推荐安装一个<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPVNoYW4uY29kZS1zZXR0aW5ncy1zeW5j" title="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">settings sync<i class="fa fa-external-link"></i></span>的插件！</p><p>它需要一个<code>Github</code>账号以及<code>gits</code>的<code>token</code>，它将你<code>vscode</code>相关的配置相关全部提交上<code>gits</code>上。这样不管你因为什么缘故导致重新安装开发环境，恢复<code>vscode</code>的环境只需三步：下载并安装<code>vscode</code>、下载<code>settings sync</code>、校验<code>token</code>并从远程下载配置。</p><h2 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h2><p>善用插件的力量可以很大的提升我们的开发效率. 下面是一些常用插件跟大家分享一下.</p><h3 id="编辑器扩展"><a href="#编辑器扩展" class="headerlink" title="编辑器扩展"></a>编辑器扩展</h3><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWNvZGVyZmVlLm9wZW4taHRtbC1pbi1icm93c2Vy" title="https://marketplace.visualstudio.com/items?itemName=coderfee.open-html-in-browser">Open-In-Browser<i class="fa fa-external-link"></i></span></strong><br>由于<code>VSCode</code>没有提供直接在浏览器中打开文件的内置界面，所以此插件在快捷菜单中添加了在默认浏览器查看文件选项. 在 windows 下, 可以使用快捷键<code>Alt + b</code>快速的打开.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-1.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPUhvb2t5UVIubWluaWZ5" title="https://marketplace.visualstudio.com/items?itemName=HookyQR.minify">Minify<i class="fa fa-external-link"></i></span></strong><br>这是一款用于压缩合并<code>JavaScript</code>和<code>CSS</code>文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为<code>.min</code>文件的选项。它能够分别通过<code>uglify-js</code>、<code>clean-css</code>和 html-minifier，与<code>JavaScript</code>、<code>CSS</code>和<code>HTML</code>协同工作。是一个可以不通过脚手架编译就进行压缩的办法，但平时工程化项目还是不能单单依赖这种方式。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-5.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXdheW91LnZzY29kZS10b2RvLWhpZ2hsaWdodA==" title="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight">TODO Highlight<i class="fa fa-external-link"></i></span></strong><br>开发中一些没有做完的事，一般会习惯性的打上<code>TODO</code>备注，但再要找的时候就很难显目的找到了。<code>TODO Highlight</code>顾名思义就是让<code>TODO</code>高亮的插件。</p><p><img alt="TODO Highlight" data-src="https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night.png"></p><h3 id="前端类增强"><a href="#前端类增强" class="headerlink" title="前端类增强"></a>前端类增强</h3><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWZvcm11bGFoZW5kcnkuYXV0by1yZW5hbWUtdGFn" title="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag<i class="fa fa-external-link"></i></span></strong><br>自动重命名配对的<code>HTML / XML</code>标记, 这在修改标签名上一点挺便捷的.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-7.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWZvcm11bGFoZW5kcnkuYXV0by1jbG9zZS10YWc=" title="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag<i class="fa fa-external-link"></i></span></strong><br>这个扩展是为 XML，PHP，Vue，JavaScript，TypeScript，JSX，TSX 等其他语言启用的。同时它是可配置的。输入标签的右括号后，结束标签将被自动插入。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-6.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXByYW5heWdwLnZzY29kZS1jc3MtcGVlaw==" title="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek">CSS Peek<i class="fa fa-external-link"></i></span></strong><br>使用此插件，你可以追踪至样式表中<code>CSS</code>类和<code>ids</code>定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-2.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXhhYmlrb3MuSmF2YVNjcmlwdFNuaXBwZXRz" title="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets<i class="fa fa-external-link"></i></span></strong><br><code>es6</code>已经是经常运用在我们的项目中了, 该扩展包含用于 Vscode 编辑器的 ES6 语法的 JavaScript 代码片段.（同时支持 JavaScript 和 TypeScript）。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW9jdHJlZi52ZXR1cg==" title="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur<i class="fa fa-external-link"></i></span></strong><br><code>vue</code>开发必备, 可以格式化<code>.vue</code>文件, 由官方维护.</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWhvbGxvd3RyZWUudnVlLXNuaXBwZXRz" title="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue 2 Snippets<i class="fa fa-external-link"></i></span></strong><br><code>vue</code>开发必备, 这个插件基于最新的<code>Vue</code>官方语法高亮文件添加了 Syntax Highlight<code>, 并且依据</code>Vue 2<code>的 API 添加了</code>Code Snippets`.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img-3.png"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPVdha2FUaW1lLnZzY29kZS13YWthdGltZQ==" title="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">WakaTime<i class="fa fa-external-link"></i></span></strong><br>统计开发时间和效率，只需注册一个账号即可~</p><h3 id="代码规范化"><a href="#代码规范化" class="headerlink" title="代码规范化"></a>代码规范化</h3><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRiYWV1bWVyLnZzY29kZS1lc2xpbnQ=" title="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint<i class="fa fa-external-link"></i></span></strong><br>要养成一个良好的编程习惯, <code>ESLint</code>就是一个不错的选择. 它能适应项目中的规则来纠正你的不好的习惯。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWVzYmVucC5wcmV0dGllci12c2NvZGU=" title="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier<i class="fa fa-external-link"></i></span></strong><br>Prettier 是目前 Web 开发中最受欢迎的代码格式化程序。安装了这个插件，它就能够自动应用 Prettier，并将整个 JS 和 CSS 文档快速格式化为统一的代码样式。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-3.gif"><p><strong><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPUVkaXRvckNvbmZpZy5FZGl0b3JDb25maWc=" title="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig<i class="fa fa-external-link"></i></span></strong><br><code>Editor Config</code>可以让团队开发时统一约定好一种规范. 这个主流的编辑器都支持.</p><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>如果你经常使用 Markdown 的话，还可以使用安装<code>markdownlint</code>和<code>Markdown All in One</code>这两个插件，前者可以约束编写的格式，后者提供方便的键盘快捷方式，目录，自动预览等。</p><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><p>分享一下自己目前的配置, 可以根据项目所需或者自己的习惯进行调整.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">    "workbench.colorTheme": "One Monokai",</span><br><span class="line"></span><br><span class="line">    // 编辑器</span><br><span class="line">    "editor.multiCursorModifier": "ctrlCmd",</span><br><span class="line">    "editor.snippetSuggestions": "top",</span><br><span class="line">    "editor.renderWhitespace": "all",</span><br><span class="line">    "editor.formatOnPaste": true,</span><br><span class="line">    "editor.wordWrap": "on",</span><br><span class="line">    "editor.fontSize": 12,</span><br><span class="line">    "editor.tabSize": 4,</span><br><span class="line"></span><br><span class="line">    // 文件资源管理</span><br><span class="line">    "explorer.confirmDragAndDrop": false,</span><br><span class="line">    "explorer.confirmDelete": false,</span><br><span class="line"></span><br><span class="line">    // 终端</span><br><span class="line">    "terminal.integrated.cursorBlinking": true,</span><br><span class="line">    "terminal.integrated.cursorStyle": "line",</span><br><span class="line"></span><br><span class="line">    // emmet</span><br><span class="line">    "emmet.triggerExpansionOnTab": true,</span><br><span class="line">    "emmet.includeLanguages": &#123;</span><br><span class="line">        "vue-html": "html",</span><br><span class="line">        // "vue": "html",</span><br><span class="line">        "wxml": "html",</span><br><span class="line">        "javascript": "javascriptreact"</span><br><span class="line">    &#125;,</span><br><span class="line">    "emmet.syntaxProfiles": &#123;</span><br><span class="line">        "vue-html": "html",</span><br><span class="line">        // "vue": "html"</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 文件</span><br><span class="line">    "files.eol": "\n",</span><br><span class="line">    "files.associations": &#123;</span><br><span class="line">        "*.vue": "vue",</span><br><span class="line">        "*.wxss": "css",</span><br><span class="line">        "*.cjson": "jsonc",</span><br><span class="line">        "*.wxs": "javascript"</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 窗口</span><br><span class="line">    "window.zoomLevel": 0,</span><br><span class="line"></span><br><span class="line">    // 使用 vscode-typescript 来整理代码</span><br><span class="line">    "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">    "vetur.format.defaultFormatter.ts": "vscode-typescript",</span><br><span class="line"></span><br><span class="line">    // other</span><br><span class="line">    "auto-close-tag.SublimeText3Mode": true,</span><br><span class="line"></span><br><span class="line">    // 可能是让 CPU 炸了的罪魁祸首</span><br><span class="line">    "search.followSymlinks": false,</span><br><span class="line">    "html.format.extraLiners": "",</span><br><span class="line"></span><br><span class="line">    // sync githubg 同步模块</span><br><span class="line">    "sync.gist": "",</span><br><span class="line">    "sync.autoDownload": false,</span><br><span class="line">    "sync.autoUpload": true,</span><br><span class="line">    "sync.forceDownload": false,</span><br><span class="line">    "sync.quietSync": false,</span><br><span class="line">    "sync.askGistName": false,</span><br><span class="line">    "sync.removeExtensions": true,</span><br><span class="line">    "sync.syncExtensions": true,</span><br><span class="line">    "vetur.validation.template": false,</span><br><span class="line"></span><br><span class="line">    // todo highlight</span><br><span class="line">    "todohighlight.isEnable": true,</span><br><span class="line">    "todohighlight.include": [</span><br><span class="line">        "**/*.js",</span><br><span class="line">        "**/*.jsx",</span><br><span class="line">        "**/*.ts",</span><br><span class="line">        "**/*.tsx",</span><br><span class="line">        "**/*.html",</span><br><span class="line">        "**/*.css",</span><br><span class="line">        <span class="string">"**/*.scss"</span></span><br><span class="line">    ],</span><br><span class="line">    "todohighlight.exclude": [</span><br><span class="line">        "**/node_modules/**",</span><br><span class="line">        "**/bower_components/**",</span><br><span class="line">        "**/dist/**",</span><br><span class="line">        "**/build/**",</span><br><span class="line">        "**/.vscode/**",</span><br><span class="line">        "**/.github/**",</span><br><span class="line">        "**/_output/**",</span><br><span class="line">        "**/*.min.*",</span><br><span class="line">        "**/*.map",</span><br><span class="line">        <span class="string">"**/.next/**"</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    // gitlens</span><br><span class="line">    "gitlens.advanced.messages": &#123;</span><br><span class="line">        "suppressCommitHasNoPreviousCommitWarning": false,</span><br><span class="line">        "suppressCommitNotFoundWarning": false,</span><br><span class="line">        "suppressFileNotUnderSourceControlWarning": false,</span><br><span class="line">        "suppressGitVersionWarning": false,</span><br><span class="line">        "suppressLineUncommittedWarning": false,</span><br><span class="line">        "suppressNoRepositoryWarning": false,</span><br><span class="line">        "suppressResultsExplorerNotice": false,</span><br><span class="line">        "suppressShowKeyBindingsNotice": true</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // prettier</span><br><span class="line">    "prettier.singleQuote": true,</span><br><span class="line"></span><br><span class="line">    // eslint</span><br><span class="line">    "eslint.autoFixOnSave": true,</span><br><span class="line"></span><br><span class="line">    // prettier</span><br><span class="line">    "beautify.config": &#123;</span><br><span class="line">        "brace_style": "collapse,preserve-inline",</span><br><span class="line">        "end_with_newline": true</span><br><span class="line">    &#125;,</span><br><span class="line">    "minapp-vscode.disableAutoConfig": true,</span><br><span class="line">    "minapp-vscode.reserveTags": [</span><br><span class="line">        <span class="string">"text"</span></span><br><span class="line">    ],</span><br><span class="line">    "minapp-vscode.prettyHtml": &#123;</span><br><span class="line">        "wrapAttributes": true // 属性换行</span><br><span class="line">    &#125;,</span><br><span class="line">    "diffEditor.ignoreTrimWhitespace": true,</span><br><span class="line">    "terminal.integrated.rendererType": "dom",</span><br><span class="line">    "editor.renderControlCharacters": true,</span><br><span class="line">    "gitlens.views.fileHistory.enabled": true,</span><br><span class="line">    "gitlens.views.lineHistory.enabled": true,</span><br><span class="line">    "[vue]": &#123;&#125;,</span><br><span class="line">    "files.insertFinalNewline": true,</span><br><span class="line">    "vetur.format.options.tabSize": 4,</span><br><span class="line">    "[javascript]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[json]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "HookyQR.beautify"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[html]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "HookyQR.beautify"</span><br><span class="line">    &#125;,</span><br><span class="line">    "editor.suggestSelection": "first",</span><br><span class="line">    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",</span><br><span class="line">    "[jsonc]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "HookyQR.beautify"</span><br><span class="line">    &#125;,</span><br><span class="line">    "prettier.eslintIntegration": true,</span><br><span class="line">    "[markdown]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[scss]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[css]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "workbench.settings.editor": "json",</span><br><span class="line">    "[less]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "[typescript]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你可能不知道的console</title>
      <link href="/blog/2018/01/30/Debug-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6console/"/>
      <url>/blog/2018/01/30/Debug-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6console/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/30/Debug-深入研究console/banner.jpg"><p>打断点和<code>console.log</code>是我们前端调试中, 使用最为频繁的一种. 但实际上console API 可不仅仅用来查看某个值或者某个变量是否存在, 它还有更多的用法是不为人知的.</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>console 对象提供对浏览器控制台的接入。不同浏览器上它的工作方式是不一样的. 其次它是一个全局对象, 我们先在控制台将<code>console</code>打印出来, 看看它里面都有些什么东西, 再来一一讲解吧.</p><img data-src="/blog/2018/01/30/Debug-深入研究console/console.png"><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p><code>console.log</code>就是向web控制台输出一条信息. 参数可以是变量, 数字, 字符串等.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规下</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>)            <span class="comment">// Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(name)               <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>)   <span class="comment">// Hello, Jack</span></span><br></pre></td></tr></table></figure><p>除此之外, 还支持格式化输出. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi, %s. what are you doing'</span>, name)              <span class="comment">// Hi, Jack. what are you doing</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%c I am some great text'</span>, <span class="string">'font-size: 50px;'</span>)   <span class="comment">// 假装 50px: Hi, Jack. what are you doing</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/Debug-深入研究console/console-2.png"><p>下面是它所支持的参数, 学习C语言的同学有没有感觉扑面而来的熟悉感呀~</p><table><thead><tr><th align="left">占位符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%s</td><td align="left">字符串</td></tr><tr><td align="left">%d or %i</td><td align="left">整数</td></tr><tr><td align="left">%s</td><td align="left">打印字符串</td></tr><tr><td align="left">%f</td><td align="left">浮点数</td></tr><tr><td align="left">%c</td><td align="left">样式代码</td></tr></tbody></table><p>这里连知乎, 百度等大厂也用<code>console</code>来做招聘广告或做些有意思的事~</p><img title="Bilibili 主页" data-src="/blog/2018/01/30/Debug-深入研究console/console-3.png"><img title="知乎" data-src="/blog/2018/01/30/Debug-深入研究console/zhihu.png"><h3 id="info-warn-error"><a href="#info-warn-error" class="headerlink" title="info, warn, error"></a>info, warn, error</h3><p>这三者实际上在我们开发时也时常出现. 现在主流的一些框架, 比如说Eslint, 就封装了相关方法. 当你语法出现不规范的地方, 就会根据错误来弹出指定的提示框来提示你.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Info</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'Hi, This is message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// warning 警告</span></span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'On, Your operation may cause a security breach!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 报错</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'Shit! Variable does not exist!'</span>)</span><br></pre></td></tr></table></figure><p>实际效果:</p><img data-src="/blog/2018/01/30/Debug-深入研究console/console-info.png"><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p><code>console.table</code>只接受一个数组或者对象, 可以接受一个额外的参数来描述表格的列数.<br>它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tome'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'baka'</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(array)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/Debug-深入研究console/console-table.png"><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><code>console.group</code>和<code>console.groupWEnd</code>就像一对标签一样. <code>group</code>在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用console.groupEnd()之后, 当前分组才结束.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boys = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tome'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'baka'</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">boys.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.group(<span class="string">`<span class="subst">$&#123;item.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`This is <span class="subst">$&#123;item.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item.name&#125;</span> is <span class="subst">$&#123;item.age&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item.name&#125;</span> is <span class="subst">$&#123;item.age * <span class="number">7</span>&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.groupEnd(<span class="string">`<span class="subst">$&#123;item.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/Debug-深入研究console/console-group.png"><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><blockquote><p>console.dir —— 在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表</p></blockquote><p>我们知道<code>console.log</code>实际上是可以输出DOM节点的, 但有时候我们只想知道 DOM 属性的话, 这里就可以使用<code>dir</code>来输出DOM对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementById(<span class="string">'head'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(head)</span><br><span class="line"><span class="built_in">console</span>.dir(head)</span><br></pre></td></tr></table></figure><p>值得注意的是. MDN提醒我们, 这个特性是非标准, 尽量不要在生产模式下使用.</p><img data-src="/blog/2018/01/30/Debug-深入研究console/console-dir.png"><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>count, 如同字面意思一样. <code>count()</code>会输出每一次被调用的次数. 该方法的兼容性也需要注意, 不适用于生产模式.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.count(<span class="string">'Steve'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'Steve'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'zeo'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'Steve'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'zeo'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'Steve'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'zeo'</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'Steve'</span>)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/Debug-深入研究console/console-count.png"><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>clear, 顾名思义就是清除. 看到别人那乱七八糟的用于调试的log或者info时, 这时只想要保留自己的调试信息. 那么<code>console.clear()</code>就可以为你解决这个烦恼, “一键清空”前面控制台所有的信息, 从头再来(雾)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// something info</span></span><br><span class="line"><span class="built_in">console</span>.clear()</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>启动一个计时器（timer）来跟踪某一个操作的占用时长。每一个计时器必须拥有唯一的名字。 页面中最多能同时运行10,000个计时器。跟<code>group</code>一样, time也是配套的。 当以此计时器名字为参数调用 console.timeEnd() 时，浏览器将以毫秒为单位，输出对应计时器所经过的时间.</p><p>比如我们起一个<code>fetch</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'fetching data'</span>)</span><br><span class="line">fetch(<span class="string">'https://api.github.com/users/anran758'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'fetching data'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>oh, 这样我们就轻易的知道了这次我们请求花费了多少时间啦~</p><img data-src="/blog/2018/01/30/Debug-深入研究console/console-time.png"><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p><code>console.assert()</code>还是蛮有意思的. 它第一个参数接受一个断言(声明), 第二个参数是一个<strong>message</strong>. 如果断言为false，则将一个错误消息写入控制台。如果断言是true，就当做没发生。语法如下: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(assertion, message [, subst1, ..., substN]);</span><br></pre></td></tr></table></figure><p>这里的断言不一定是<code>false</code>才会触发错误. 我特意去测试了一下, 触发的规则也跟<code>if</code>的判断里的逻辑相反. 只要是断言是<code>0</code>, <code>NaN</code>, <code>undefined</code>, <code>false</code>, <code>null</code>, 空字符串<code>&#39;&#39;</code>就会激活报错.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assertion failed: Here is the "name" can not be empty</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(str, <span class="string">'Here is the "str" can not be empty'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: 0 is not allowed!</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">0</span>, <span class="string">'0 is not allowed!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: That is wrong!</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> === <span class="number">2</span>, <span class="string">'That is wrong!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么都不会发生</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> === <span class="number">1</span>, <span class="string">'That is wrong!'</span>)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/Debug-深入研究console/console-assert.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在适当的地方使用恰当的方法能使调试变得更清晰. 发现身边很多小伙伴都只了解<code>log</code>的方法, 正好最近看到了这方面的知识, 总结了一下, 活用于开发中能使效率变得更好~</p><p><strong>参考资料:</strong><br>MDN - Console: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NvbnNvbGU=" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Console">https://developer.mozilla.org/zh-CN/docs/Web/API/Console<i class="fa fa-external-link"></i></span><br>从console.log说起（上）: <span class="exturl" data-url="aHR0cDovL3d3dy5hbGxveXRlYW0uY29tLzIwMTMvMTEvY29uc29sZS1sb2cv" title="http://www.alloyteam.com/2013/11/console-log/">http://www.alloyteam.com/2013/11/console-log/<i class="fa fa-external-link"></i></span><br>javascript30: <span class="exturl" data-url="aHR0cHM6Ly9jb3Vyc2VzLndlc2Jvcy5jb20vYWNjb3VudC9hY2Nlc3MvNWE2NThlYzhhNmI1NmM1NTI3M2I0MDc4L3ZpZXcvMTk0MTI5ODc2" title="https://courses.wesbos.com/account/access/5a658ec8a6b56c55273b4078/view/194129876">https://courses.wesbos.com/account/access/5a658ec8a6b56c55273b4078/view/194129876<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> javascript </tag>
            
            <tag> tools </tag>
            
            <tag> console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进 web 移动端开发</title>
      <link href="/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/25/web-走进web移动开发/banner.jpg"><p>近年来, 人们逐渐倾向移动端的使用. 越来越多的人使用手机/平板来上网. 既然有需求, 那就自然会有市场~ 作为一个身在一线的前端工程师在工作中也难免会遇到这种场景/需求. 下面就分享一下对于移动端的一些学习笔记~</p><a id="more"></a><h2 id="移动端基础的知识"><a href="#移动端基础的知识" class="headerlink" title="移动端基础的知识"></a>移动端基础的知识</h2><p>移动端的屏幕相比 PC 来说多的太多了, 因此我们不能只是使用传统的 px, 首先来认识一下我们常用的单位吧.</p><ul><li><strong>px</strong>: css pixels 逻辑像素, 浏览器使用的抽象单位</li><li><strong>dp</strong>, pt: device independent pixels 设备无关像素</li><li><strong>dpr</strong> devicePixelRatio 设备像素缩放比</li></ul><p>它们之间的计算公式是: <code>1px = (dpr)² * dp</code></p><p>这里我们用 IPhone 5 为例, 我们知道, iPhone 5 的<code>dpr</code>为 2, 根据上面的公式, 我们能得出:</p><p>平面上: <code>1px = (2)² * dp</code> =&gt; <code>1px = 4dp(四个物理像素)</code></p><p>但我们在实际的开发中, 更多的是按照长度(维度)来换算:</p><p>维度上: <code>1px = dpr * dp</code> =&gt; <code>1px = 2 * dp</code></p><p>因此在移动端开发的时候. 我们拿到 UI 的设计图, 设计图(IPhone5)的尺寸是<code>640 * 1136</code>. 这是因为<code>dpr</code>的缘故. 因此我们需要在开发时, 将原先的宽度除于 2 才行.</p><p>还有我们常说的<code>Retina</code>屏又是什么? <code>Retina屏(高清屏幕)</code>就是<code>dpr &lt;= 2</code>.</p><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>viewport, 就是视图窗口. 其中它在手机上又分为一下两个窗口.</p><ul><li>Visual viewport (可视窗口)</li><li>Layout viewport (布局窗口)</li></ul><p>最下面一层就是<code>layout viewport</code>, 上面一层就是<code>visual viewport</code>, <code>visual viewport</code>可以控制窗口的缩放(salce), 能看得到更多底层的<code>layout viewport</code>的东西.</p><img title="两者的关系" data-src="/blog/2018/01/25/web-走进web移动开发/viewport.png"><p>这里值得注意的是, <code>layout viewport</code>的宽度是大于浏览器可视区域的宽度的.</p><h3 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h3><p>如果我们没有限制<code>viewport</code>的缩放比的话. 我们通过获取<code>window.innerWidth(布局窗口) / document.body.clientWidth</code>的缩放比得知, 设备会根据页面的大小, 自动的去调整缩放比. 这就会不符合我们的预期.</p><p>这时我们可以通过<code>Meta</code>标签来控制<code>viewport</code>. 它的语法如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"name=value,name=value"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参数如下:</p><ul><li><code>width</code>: 设置布局 viewport 的特定值(“device-width”)</li><li><code>initial-scale</code>: 设置页面的初始缩放</li><li><code>minimum-sacle</code>: 最少缩放</li><li><code>maximum-scale</code>: 最大缩放</li><li><code>user-scalable</code>: 用户能否缩放</li></ul><p>目前主流的编辑器在使用<code>emmet</code>生成基本<code>HTML</code>模板时都会自带插入一句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>而有时候我们不希望用户能控制页面的搜索，那我们就可以设置<code>user-scalable</code>为<code>no</code>, 百度就是如下的做法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h2><p>移动端的布局就能不像 PC 端一样用固定宽度了, 因为移动端有太多不同的屏幕分辨率了.. 因此现在主流的布局方式还是响应式布局和 flex 布局. 未来还有 Grid 布局, 不过现在普及度不够高暂时放放, 以后有机会单独开一篇.</p><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p><em>响应式布局<em>实际上是一个设计理念, 它是多项技术的综合体. 其核心就是</em>媒体查询(@media)</em>.</p><p>响应式网站的优点主要有:</p><ul><li>减少工作量: 代码, 设计, 内容只需要一份. 多出的工作也仅仅是 js 和 css 样式的调整.</li><li>相对来说会节省时间</li><li>每个设备都能得到正确的设计</li></ul><p>相反, 它也带有一些副作用(缺点):</p><ul><li>由于我们是响应式布局, 需要加载更多的样式和脚本资源</li><li>设计比较难精准定位和控制</li><li><em>media</em>实际上是 css3 的玩意, 对老版本浏览器兼容不好(特指 IE)</li></ul><p>接着我们继续看看响应式设计着重的几个点吧:</p><ol><li><p>关于响应式设计中<em>针对不同分辨率</em>的媒体查询设计, 可以看我 Repo 中的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FucmFuNzU4L0Zyb250LUVuZC1MYWIvdHJlZS9tYXN0ZXIvUGFnZSUyMGRlc2lnbg==" title="https://github.com/anran758/Front-End-Lab/tree/master/Page%20design">这一块<i class="fa fa-external-link"></i></span>.</p></li><li><p><em>百分比布局</em><br>仅仅使用媒体查询来适应不同的固定宽度设计, 只会从一组 css 到另一组 css 的切换. 两组之间没有任何平滑渐变. 当没有命中媒体查询时, 表现就会不可控.</p></li></ol><p>就比如说 iPhone 又出了个 iPad mini, 这个设备的宽度介于 iphone 和 ipad 之间. 这样就有可能会导致布局的错乱, 我们应该要尽量避免这种情况发生.</p><ol start="3"><li><em>弹性图片</em><br>很简单也很常见的思路. 图片设置宽度 100%, 外层一个 div 包裹着, div 设置宽度, 可以随着媒体查询改变宽度 从而实现自适应</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>当页面达到手机屏幕宽度的时候, 我们可以考虑放弃一些传统页面的设计思想. 力求页面简单, 简洁(手机屏幕小). 因此需要作出以下处理:</li></ol><ul><li>同比例缩减元素尺寸</li><li>调整页面结构布局</li><li>隐藏冗余的元素<br>除此之外, 应该将经常需要切换位置元素使用「绝对定位」, 减少重绘提高渲染性能.</li></ul><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><p><code>Flexbox</code>的出现是为了解决复杂的 web 布局，因为这种布局方式很灵活。容器的子元素可以任意方向进行排列. 有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构。</p><p><code>Flex</code>在移动布局上已经运用的很广泛了. 比如我们常见的垂直居中, 原先需要好几行代码的效果, 现在就一行<code>align-items: center</code>就能解决了, 十分便利.</p><p><code>Flex</code>网上已经有太多的详细教程了. 考虑到篇幅限制, 这边也就不再过多的赘述了. 不过值得一提的是, <code>Flexbox</code>是有新旧两个版本的, 新的是<code>display: flex</code>, 旧的(2009 年的语法)是<code>display: box</code>; 两者作用都差不多, 只是使用的属性名有些差异, 如果要兼容低版本的浏览器的话可以考虑后者.</p><p><strong>扩展阅读:</strong><br>[张鑫旭]CSS box-flex 属性，然后弹性盒子模型简介: <span class="exturl" data-url="aHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS93b3JkcHJlc3MvP3A9MTMzOA==" title="http://www.zhangxinxu.com/wordpress/?p=1338">http://www.zhangxinxu.com/wordpress/?p=1338<i class="fa fa-external-link"></i></span><br>Flex 入门: <span class="exturl" data-url="aHR0cDovL2lmZS5iYWlkdS5jb20vbm90ZS9kZXRhaWwvaWQvOTUy" title="http://ife.baidu.com/note/detail/id/952">http://ife.baidu.com/note/detail/id/952<i class="fa fa-external-link"></i></span><br>Flexbox 详解: <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxMDMyNA==" title="https://segmentfault.com/a/1190000002910324">https://segmentfault.com/a/1190000002910324<i class="fa fa-external-link"></i></span></p><h2 id="移动端一些常见的坑"><a href="#移动端一些常见的坑" class="headerlink" title="移动端一些常见的坑"></a>移动端一些常见的坑</h2><h3 id="1px-border"><a href="#1px-border" class="headerlink" title="1px border"></a>1px border</h3><p>这个问题常出现在 ios 下, 其根本原因还是<code>retina屏</code>的问题. <code>1px</code>使用了<code>2dp</code>渲染, 因此看上去就会粗一点.</p><p>常见的解决方案有以下几个:</p><p>** 背景渐变 **<br>CSS3 有了渐变背景，可以通过渐变背景实现 1px 的 border，实现原理是设置 1px 的渐变背景，50% 有颜色，50% 是透明的。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> commonStyle() &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: top, right top, bottom, left top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> border(<span class="variable">$border-color</span>) &#123;</span><br><span class="line">  @<span class="keyword">include</span> commonStyle();</span><br><span class="line">  <span class="attribute">background-image</span>: linear-gradient(</span><br><span class="line">      <span class="number">180deg</span>,</span><br><span class="line">      <span class="variable">$border-color</span>,</span><br><span class="line">      <span class="variable">$border-color</span> <span class="number">50%</span>,</span><br><span class="line">      transparent <span class="number">50%</span></span><br><span class="line">    ), linear-gradient(</span><br><span class="line">      <span class="number">270deg</span>,</span><br><span class="line">      <span class="variable">$border-color</span>,</span><br><span class="line">      <span class="variable">$border-color</span> <span class="number">50%</span>,</span><br><span class="line">      transparent <span class="number">50%</span></span><br><span class="line">    ), linear-gradient(<span class="number">0deg</span>, <span class="variable">$border-color</span>, <span class="variable">$border-color</span> <span class="number">50%</span>, transparent <span class="number">50%</span>),</span><br><span class="line">    linear-gradient(<span class="number">90deg</span>, <span class="variable">$border-color</span>, <span class="variable">$border-color</span> <span class="number">50%</span>, transparent <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点就是没办法实现圆角.</p><p><strong>使用 scale 缩放 0.5 倍</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-class">.folder</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#7c7c7c</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.folder</span> + <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h3><p>webkit 内核的浏览器可以尝试使用<code>-webkit-line-clamp</code>, 可惜兼容性不高.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intwoline</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="终端交互优化"><a href="#终端交互优化" class="headerlink" title="终端交互优化"></a>终端交互优化</h2><p>最近几年，爆炸式的移动 Web 浏览器的使用打破了这个途径。低带宽，高延迟，小内存，低处理器性能的移动设备环境，迫使开发者不得不想办法通过优化前端页面的性能来满足用户的性能预期。</p><h3 id="300-毫秒的故事"><a href="#300-毫秒的故事" class="headerlink" title="300 毫秒的故事"></a>300 毫秒的故事</h3><blockquote><p>移动 web 页面上的 click 事件响应都要慢上 300ms</p></blockquote><p>移动设备访问的 web 页面都是 pc 上的页面. 在默认的 v<code>iewport(980px)</code>的页面往往都是需要”双击”或”捏开”放大页面, 来看清页面. 正是为了确定用户是”双击”还是”单击”. sofari 需要个 300ms 的延迟来判断. 而后来的 Iphone 也一直沿用这样的设计, 没借鉴成功 iPhone 的 android 也沿用了这样的设计. 于是”300ms 的延迟”就成为了一道规范.</p><p>因此针对这个延迟, 出现了使用 tap 基础事件去代替 click 事件. 已经有成熟的类库去帮我们实现了, 这也不展开讲.</p><h3 id="移动端的事件"><a href="#移动端的事件" class="headerlink" title="移动端的事件"></a>移动端的事件</h3><p>现在智能手机的普及, 触摸成为了移动设备的交互的核心事件, 主要有这几种常用的事件<br>• Touchstart: 手指触摸屏幕触发(只有第一下才会触发)<br>• Touchmove: 手指在屏幕滑动, 连续触发<br>• Touchend: 手指离开屏幕时触发<br>• Touchcanel: 系统取消 touch 时候触发(不常用)</p><p>除了常见的事件属性外, 触摸事件也有自己专有的触摸属性:</p><ul><li>touches: 跟踪触摸操作的 touch 对象数组</li><li>targetTouches: 特定时间目标的 touch 对象数组</li><li>changeTouches: 上次触摸改变的 touch 对象数组</li></ul><p>其中<code>touches</code>是最为常用的. 它是一个数组, 包含着几个 touch 对象, 每个 touch 对象包含如下属性:<br>• clientX: 触摸目标在视口中的 x 坐标<br>• clientY: 触摸目标在视口中的 y 坐标<br>• Identifier: 标识触摸的唯一 ID<br>• pageX: 触摸目标在页面中的 x 坐标.<br>• pageY: 触摸目标在页面中的 y 坐标.<br>• screenX: 触摸目标在屏幕中的 x 坐标<br>• screenY: 触摸目标在屏幕中的 y 坐标<br>• target: 触摸的 DOM 节点目标</p><p>不过值得注意的是 Android 下可能会有 touchend 不触发的 bug, 已知 Android 4.0, 4.1, 4.4 ~ 5.0 都有这个 bug.</p><h3 id="弹性滚动"><a href="#弹性滚动" class="headerlink" title="弹性滚动"></a>弹性滚动</h3><p>当客户端的页面滚动到底部或顶部的时候, 滚动条会允许我们再向上(下)拖, 松开就会有缓冲反弹的效果, 能有一个良好的用户体验.</p><p>移动 web 页面也有这样的能力. 但是滚动有几种情况需要考虑(副作用):</p><ul><li>body 层滚动: (系统特殊化处理)<br>自带弹性滚动, overflow:hidden 失效, GIF 和定时器暂停</li><li>局部滚动: 没有弹性滚动, 没有滚动惯性, 不流畅</li></ul><p>而局部滚动开启弹性滚动的方式也很简单, 只需要在 body 上添加如下的代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* android 不支持, 但是有类库支持*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上拉刷新-下拉加载"><a href="#上拉刷新-下拉加载" class="headerlink" title="上拉刷新, 下拉加载"></a>上拉刷新, 下拉加载</h3><p>在移动端, 我们常常能看到这种 —— 顶部会允许下拉一小点距离, 松开时页会有弹性的滚动向下, 并且加载数据. 这是一种良好的交互. 多数类库或者插件都能实现这种效果. 可惜本人移动端的经验不足, 没有自己去实现过一次. (再占一个坑吧~</p><img title="上拉刷新, 下拉加载" data-src="/blog/2018/01/25/web-走进web移动开发/img-1.jpg"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>移动端与 PC 端的开发主要还是着重点不同吧. 比如在移动开发时, 我们必须要考虑用户的流量, 并不是所有人都在用着好的 WIFi 来上网.<br>其中如何在这个小屏幕下给用户带来良好的体验也是另外一门学问. 本文只是总结一些常见的东西, 比如移动端适配也还没有讲. 如果以后自己的工作重心倾向移动端的话, 就会继续再更新相关的内容吧~</p><p><strong>参考资料:</strong><br>饿了么 - 移动端 Web 开发踩坑之旅: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjE0MTM1MQ==" title="https://zhuanlan.zhihu.com/p/26141351">https://zhuanlan.zhihu.com/p/26141351<i class="fa fa-external-link"></i></span><br>Hello, 移动 WEB: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzQ5NA==" title="https://www.imooc.com/learn/494">https://www.imooc.com/learn/494<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 移动端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我们要选用 Vue/React/Angular 进行开发</title>
      <link href="/blog/2018/01/23/JavaScript-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%BE%E5%BC%83JQuery%E8%80%8C%E9%80%89%E7%94%A8Vue-React-Angular%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
      <url>/blog/2018/01/23/JavaScript-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%BE%E5%BC%83JQuery%E8%80%8C%E9%80%89%E7%94%A8Vue-React-Angular%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/23/JavaScript-你为什么会放弃JQuery而选用Vue-React-Angular进行开发/banner.png"><p>本篇文章是笔者早期写的，现在回顾来看其实是有一些片面的。<code>jquery</code>的语法封装确实不错</p><a id="more"></a><p>JQuery, 曾经从事网页工作者的标配, 以前还没有前端的概念, 但不懂JQuery几乎是会被嘲讽的. 而当下的使用量却逐年降低, 更多的用户转向新兴的 React/Angular/Vue . 今天我们来聊聊, 相比JQuery成熟庞大生态圈, 为什么我们现在开始逐步的放弃 JQuery.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>截止至笔者写这篇文章为止(2018.1), 前端开发的大趋势主要是以下几点:</p><ul><li>旧浏览器逐渐被淘汰(比如IE8及以下, 主流框架已经放弃了支持)</li><li>移动端需求的增加</li><li>用户体验要求变得更高</li><li>前端架构从传统的后台 MVC 向 RESTFul API + 前端 MV* 迁移</li></ul><p>众所周知. JQuery只是一个DOM和ajax的封装库. 现在前端项目的日益发展导致JQuery已经不足以承载太多的复杂项目了. JQuery能兼容各种低版本的浏览器这一大优势也在旧浏览器淘汰的路上逐步减弱. 越来越多的开发者开始拥抱新型框架, 它们使前端不太需要关心DOM了, 只需要关心状态.</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>因为我目前主要使用的是Vue的技术栈, 就来说说为什么要选择 Vue 吧.<br>首先, Vue.js是一个库, 并不是一个真正框架(或者说是一个UI层面的框架). 它相比其他两个主流框架 (React/Angular) 来说 Vue 的学习成本相对来说会比较低. 其次 vue 的作者是国人<span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vYXJ0dGVjaGRlc2lnbj90b3BuYXY9MSZ3dnI9NiZ0b3BzdWc9MQ==" title="https://weibo.com/arttechdesign?topnav=1&wvr=6&topsug=1">尤雨溪<i class="fa fa-external-link"></i></span>, 因此它对中文的支持会更友好一点(说句题外话, 偶尔能看到有老外吐槽. Vue.js的源码偶尔能看到中文的注释2333).</p><p>Vue是渐进式框架, 它主要关注的是视图管理. 其核心思想主要是数据驱动和组件化. vue的优势主要有以下几点:</p><ol><li><p>侵入性低<br>不对整体构架做过多约束, 方便与其他库或是已有的前端技术栈整合. 比如说当前的项目就是在使用JQuery, 我们也可以将项目移入vue里, 然后逐步的进行改良.</p></li><li><p>vue鼓励模块化<br>因为组件系统是 Vue 的另一个重要概念, 因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用. 这将有利于将界面代码自然分割成更容易维护的模块. 简而言之就是模块化开发, 减少代码的重复性和提高复用性.<br>vue.js比较推荐的是基于commonJs的一个模块方案. 通过webpack这样的模块构建工具, 将一个组件的模块, css和js都写在同一个文件里. Vue本身也有自己脚手架叫做<code>vue-cli</code>, 通过脚手架来帮助我们自动构建项目, 再使用npm进行包管理也是使项目模块化的一种.</p></li><li><p>Vue的语法糖和各种修饰符使得编写JS变得更加的容易. 同时使用一些依赖库, 比如<code>babel</code>使我们能大胆的使用ES6的语法糖. 原先需要封装一个函数的命令, 现在只用一句代码就能解决了. 大大的提高效率.</p></li><li><p>Vue也有自己的生态系统和一个活跃的社区.</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>JQuery作为曾经的霸主, 现在市场使用的份额仍然不小. 原因主要是一些老旧的项目仍然在使用着. 其次, 有些时候我们也会遇到需要频繁操作DOM的场景, 再加上JQuery庞大的生态圈. 有很多完善的插件仍然可以使用. 因此, JQuery虽然过时了, 但在未来几年中, 也必然还会有它的份额存在.</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> 框架 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化 - 回流与重绘</title>
      <link href="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/"/>
      <url>/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/15/性能优化-回流与重汇/banner.png"><p>回流与重绘已经是个老生常谈的问题啦, 但提到性能优化上却又必不可免的提到它. 今天来谈一谈什么是回流与重绘, 我们该如何去测试, 如何针对性的去优化.</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在<code>HTML</code>中, 每一个标签都有自己的盒子模型. 浏览器在解析<code>HTML</code>的过程中会通过一个叫<code>frame</code>的对象对盒子进行操作. 它主要有三个动作:</p><ul><li>构建<code>frame</code>, 以建立<code>DOM树</code>.</li><li><strong>reflow</strong>, 布局引擎为<code>frame</code>计算图形, 以确定对象位置, 浏览器根据各种样式来计算结果放在它该出现的位置.</li><li><strong>repaint</strong>, 当计算好盒子模型的位置, 大小以及其他属性后, 浏览器就根据各自的特性进行绘制一遍, 显现出来给用户看.</li></ul><img title="Mozilla 页面绘制" data-src="/blog/2018/01/15/性能优化-回流与重汇/Mozilla.gif"><h2 id="回流的代价"><a href="#回流的代价" class="headerlink" title="回流的代价"></a>回流的代价</h2><p><strong>回流(reflow)</strong>就是布局引擎为 frame 计算图形的过程. 但是这里需要我们注意的是, 回流并不仅仅只是在渲染页面的时候会触发, 实际上当你修改某个 css 属性或者操作 DOM 时, 就有可能会触发回流和重绘.</p><p>也就是说, 我们操作 DOM 实际上是<em>有代价</em>的. 因为 DOM 的改变会导致浏览器重新计算的它的位置和渲染的样式. 我们来做一个假设, 当用户作出某个操作时(比如下拉滚动条), 你的页面中有几十个 DOM 节点同时发生回流绘制, 那这中间消耗的可是浏览器的资源, 可想而知这样页面的性能自然弱了下来.</p><h2 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h2><p>YaHoo!性能小组总结了一些导致<code>reflow</code>发生的一些因素:</p><ol><li>调整窗口大小</li><li>改变字体</li><li>增加或者移除样式表</li><li>内容变化，比如用户在 input 框中输入文字, CSS3 动画等</li><li>激活<code>CSS</code>伪类，比如<code>:hover</code></li><li>操作<code>class</code>属性</li><li>脚本操作<code>DOM</code></li><li>计算<code>offsetWidth</code>和<code>offsetHeight</code>属性</li><li>设置 style 属性的值</li></ol><p>而<code>repaint</code>只要视觉效果改变了, 就一定会触发<code>repaint</code>. 比如<code>color</code>或者<code>background</code>. 这个很好理解, 如同字面意思一样. 重绘嘛, 就是字体颜色发生了变化浏览器需要重新绘制一遍. 这里值得一提的是, <strong>触发<code>reflow</code>一定会触发<code>repaint</code>, 而触发<code>repaint</code>却不一定会触发<code>reflow</code></strong>.</p><h2 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h2><p>接下来我们找个页面测试一下, 看看该如何去调试回流与重绘的.<br>先来介绍一下我使用的工具. 我们打开天猫官网, 打开Chrome开发者工具, 找到 <code>More tools =&gt;  Rendering</code> 面板， 可以看到以下几个选项:</p><ol><li><strong>Paint flashing</strong> - 高亮(绿色)显示重绘的页面区域</li><li><strong>Layer boders</strong> - 我们知道页面是由多个”图层”组合的, 最终显示给用户看的就是多图层叠加在一起的效果, 区别无非是层级的问题(css的<code>absolute</code>和<code>z-index</code>就可以很好的说明这一点). 勾选这个选项可以显示图层边款, 我们再根据分析哪些不是我们想要的.</li><li><strong>FPS meter</strong> - 玩游戏的同学大概会比较了解这个, 也就是显示绘制每秒帧数，帧速率分布和GPU内存. 这个更多的是用来分析页面交互和动画性能.</li><li><strong>Scrolling performance issues</strong> - 滚动性能问题. 它会高亮显示可能减慢滚动速度的元素(蓝绿色), 其中包括触摸和滚轮事件处理程序以及其他主线程滚动情况.(有兴趣的同学可以在淘宝的官网勾上这个选项, 看下都有啥).</li></ol><img title="Paint flashing" data-src="/blog/2018/01/15/性能优化-回流与重汇/img-1.png"><p>这里主要讲<code>Paint flashing</code>. 我们勾上按钮后, 首先能看到天猫的Logo是一个GIF的动态图, 不断闪烁的绿色高亮提醒着我们, 浏览器正在努力的绘制的图形. 这点很好理解, 因为它是动态的, 浏览器需要绘制 gif 的每一帧展示给用户看. 首屏的轮播图也同理, 内容的不断变化触发着回流与重绘.</p><p>紧接着我们往下滚, 发现左下角的工具栏会随着滚动而发生重绘. 很显然, 这种是使用了<code>fixed</code>定位. 我们知道<code>fixed</code>是相对浏览器窗口进行定位的. 我们滚动一点, 它会重新计算位置, 导致触发回流. 所幸的是<code>fixed</code>定位只会对自己渲染, 而不会影响身边的DOM. </p><p>接着我们继续测试. 咦? 这几个商品模块好像不太对劲呀? 怎么停止滚动了, 还是会发生不断的重绘? 打开审查元素一看, 模块中有一个 gif 的背景图片. 我们将属性关闭, 发现几个模块的重绘都消失了, 果然是这东西作祟呀. 紧接着我们来检查一下这 gif 是有什么特殊的作用. 将表面的DOM删掉, 还原<code>background</code>属性 —— 噢~原来是一个加载的loading…. 父元素加一个loading动图, 在子元素还没加载出来时显示loading. 加载后由于层级的关系自然就覆盖了上去, 用户自然就看不到了.</p><p>这种看似巧妙简便的方法实则是在用户看不到的地方在浪费无意义的性能消耗而已. 因此我还特意的去测试了淘宝和京东的情况, 发现这种写法只有天猫才有. 不知道写页面的同学是偷懒还是什么其他的原因, 这里我们可不要养成这种习惯~很多时候坑就是自己挖的最后又自己踩了上去.</p><img title="天猫" data-src="/blog/2018/01/15/性能优化-回流与重汇/repaint.gif"><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><p>到这里我们已经了解了渲染规则后, 那么就可以针对性的进行控制优化 —— 在我们 coding 的时候合理的去避开回流的影响来减少页面的开销.</p><p><code>display:none</code>这个属性已经被玩烂了, 该属性的作用就如同它名字一样直观. <code>display</code>就是用来控制显示的状态嘛… 因此很多人喜欢拿它来做隐藏某一个元素的方法. 而背后却忽略了(或者说不知道)它本身所带的回流性能开销(因为会影响节点的位置从而触发回流和重绘).</p><p>值得庆幸的是, 已经有前行者帮我们踩过很多坑, 我们只需站在巨人的肩上, 借鉴一下前人的经验:</p><ol><li>如果想设定元素的样式，通过改变元素的<code>class</code>类名 (尽可能在 DOM 树的最里层)</li><li>避免设置多项内联样式</li><li>应用元素的动画，使用<code>position</code>属性的<code>fixed</code>值或<code>absolute</code>值(前文说过, 它只会影响自己)</li><li>权衡平滑和速度</li><li>避免使用<code>table</code>布局</li><li>避免使用 CSS 的<code>JavaScript</code>表达式 (仅 IE 浏览器)</li></ol><p>除此之外, 使用<code>JavaScript</code>想要动态插入多个节点时, 可以使用<code>DocumentFragment</code>. 创建后一次插入. 就能避免多次的渲染性能.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下所学的概念, 回流(reflow), 就是布局引擎为<code>frame</code>计算图形, 确定节点位置的一个步骤. 其中触发回流的原因主要是节点(DOM)大小或者位置的改变才会触发回流. 而重绘, 就是表面的视觉效果改变了, 就会触发重绘. 其中触发了回流紧接着也会触发重绘, 而触发重绘不一定会触发回流(ahh..有点像绕口令).</p><div class="note primary">            <p><strong>参考资料</strong><br>形象化的reflow: <span class="exturl" data-url="aHR0cDovL3d3dy5hb2FvLm9yZy5jbi9ibG9nLzIwMDgvMDUvcmVmbG93Lw==" title="http://www.aoao.org.cn/blog/2008/05/reflow/">http://www.aoao.org.cn/blog/2008/05/reflow/<i class="fa fa-external-link"></i></span><br>影响 reflow 的因素及其优化: <span class="exturl" data-url="aHR0cDovL3d3dy5wbGFuYWJjLm5ldC8yMDA5LzA0LzEzL3JlZmxvdy8=" title="http://www.planabc.net/2009/04/13/reflow/">http://www.planabc.net/2009/04/13/reflow/<i class="fa fa-external-link"></i></span><br>Gecko Reflow Visualization - mozilla.org: <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aVG5JeElBNUtHdw==" title="https://www.youtube.com/watch?v=ZTnIxIA5KGw">https://www.youtube.com/watch?v=ZTnIxIA5KGw<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS93b3JkcHJlc3MvMjAxMC8wMS8lRTUlOUIlOUUlRTYlQjUlODElRTQlQjglOEUlRTklODclOEQlRTclQkIlOTglRUYlQkMlOUFjc3MlRTYlODAlQTclRTglODMlQkQlRTglQUUlQTlqYXZhc2NyaXB0JUU1JThGJTk4JUU2JTg1JUEyJUVGJUJDJTlGLw==" title="http://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/">回流与重绘: CSS性能让JavaScript变慢?<i class="fa fa-external-link"></i></span></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> HTML </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化 - 基础的性能优化</title>
      <link href="/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/13/性能优化-前端性能优化/banner.png"><p>其实很多性能方面的问题, 很多都是从基础就开始影响. 既然如此我们也从最底层逐步分析, 切入每一点小细节~</p><a id="more"></a><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><p>web早期, 人们有很多想要实现的设计效果出于css或兼容性的限制, 不得不由图片来去实现这种效果. 以现在时代的眼光来说, 无疑是很不优雅的. 撇开图片本身所占用的空间大小外, 本身代码结构就不够语义化. 那么现在这个CSS3都已经普及的年代, 来试着让<code>HTML</code>, <code>CSS</code>属性或<code>SVG</code>用寥寥数行的代码来代替图片来实现效果吧~ 比如一个圆角, 一个渐变的海浪线等.</p><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><p>每一种图片格式都有着自己的特点和优势, 下面来了解一下现在常见的图片格式来”对症下药”.</p><p>主流的图片格式</p><ul><li><code>jpg</code> 全名是JPEG. JPEG图片以24位颜色存储单个位图.</li><li><code>png</code> 可移植网络图形格式. 使用<code>png</code>格式的图片更多的是看中它有透明图层, 因为它是256色, 每一色都可以作为透明像素. 但相对的代价就是体积较大(这个可想而知嘛, 图片里面的信息装的多了, 体积自然就大了).</li><li><code>GIF</code> 这个稍微有点网络常识的对会知道, 常用于做动画.</li><li><code>SVG</code> 可缩放矢量图形. 它能很好的处理图形大小的改变, 放大缩小都不会失真, 适合静态图片展示，高保真文档查看和打印的应用场景. 如今主流浏览器都对它有着很好兼容性支持.</li></ul><p>没有被Web标准采纳的格式, 但还是值得关注图片格式<br><strong>APNG</strong> APNG 是出自 Mozilla 公司下的两位程序员之手, APNG 的出现是为了代替 GIF. 它相较GIF来说有着更好的图片质量, 还支持着透明图层, 同时图片的大小都比 GIF 格式要小.  </p><p>可惜由于出现的较晚, 没有被Web标准给采纳. 截止到笔者写这篇文章的时间(2018.1), Edge这个不合群的家伙在最新版本 Edge 17 仍然还没有支持这个格式, 而chrome 59才开始支持. 因此兼容性不高, 平时也很少能看到这种格式的出现.  </p><p><strong>Webp</strong>是出自Google之手, WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p><p>同上面的 APNG 一样, 同样没有被Web标准所采纳. 不过在 caniuse 上能发现, 如今国内大半的用户已经支持了 WebP , 这个未来还是可以小小的期待一下.</p><h3 id="正确的使用图片格式"><a href="#正确的使用图片格式" class="headerlink" title="正确的使用图片格式"></a>正确的使用图片格式</h3><p>话归正题, 下面针对不同的使用场景, 来选择正确的图片格式.</p><ul><li>首先是jpg, 一般不需要透明图层的图片一律使用jpg, 它相对png来说两者的体积之差能有几倍之差.</li><li>如果需要比较通用的动画的话, GIF是唯一的选择. 如果是相对简单的GIF动画的话, 也可以考虑使用CSS3来实现.</li><li>如果需要清晰显示颜色丰富的图片或者需要用到透明图层的话, png是一个比较好的选择</li></ul><h3 id="页面中图片加载方式"><a href="#页面中图片加载方式" class="headerlink" title="页面中图片加载方式"></a>页面中图片加载方式</h3><p>细心的你或许会发现, 有时在网络慢的情况下, 能看到图片一点一点从上到下的加载. 或者是先模糊, 再清晰的加载方式.<br>实际上这是图片的压缩算法呈现的效果, 逐行显示是<em>离散余弦变化</em>. 而模糊到清晰的是<em>小波算法</em>. 浏览器先读取图片的压缩算法, 再根据算法来选择不同的渲染算法. 下面是某图站的一张大的壁纸加载过程(没有找到小波算法的图, 以后留意到了再回来补)</p><img title="离散余弦变化" data-src="/blog/2018/01/13/性能优化-前端性能优化/anima-1.gif"><p><strong>参考资料</strong><br><span class="exturl" data-url="aHR0cHM6Ly9hb3R1LmlvL25vdGVzLzIwMTYvMTEvMDcvYXBuZy9pbmRleC5odG1s" title="https://aotu.io/notes/2016/11/07/apng/index.html">APNG 那些事<i class="fa fa-external-link"></i></span></p><h3 id="常见的图片优化方案"><a href="#常见的图片优化方案" class="headerlink" title="常见的图片优化方案"></a>常见的图片优化方案</h3><p><strong>CSS-Sprite</strong></p><p>在页面中, 我们经常能看到一些icon图标. 这些icon实际上占用并不大, 但奈不住多呀. 100个icon的话就要发送一百个HTTP请求. CSS Sprite(精灵). 利用CSS的<code>background-position</code>和<code>background-image</code>属性, 只需要引用一张图片即可. 这极大的节省了HTTP请求量.</p><p><strong>iconfont</strong><br><code>iconfont</code> 和上面所提的<code>css-sprite</code>方法类似, 不同的是这个方法是通过引入字体图标的形式. 好处是设置字体图标的颜色或者可以通过设置<code>font-size</code>来改变尺寸, 并且不容易失真.</p><p>当然, 现在都是使用自动化工具, 都不需要自己手动去调整</p><p><strong><code>&lt;picture&gt;</code>标签</strong><br>HTML5新出了一个<code>&lt;picture&gt;</code>标签, 它是一个容器, 用来为其内部特定的<code>&lt;img&gt;</code>提供多样的<code>&lt;source&gt;</code>元素. 浏览器会根据当前页面（即图片所在的盒子的容器）的布局以及当前浏览的设备（比如普通的屏幕和高清屏幕）去从中选择最合适的资源. 也就是所谓的响应式图片. 由于兼容性所限, 因此当下并没有广泛使用.</p><p><code>media</code>属性允许你提供一个用于给用户代理作为选择<code>&lt;source&gt;</code>元素的依据的媒体查询。如果这个媒体查询匹配结果为<code>false</code>，那么这个<code>&lt;source&gt;</code>元素会被跳过, 使用如下.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"mdn-logo-smaller.png"</span> <span class="attr">media</span>=<span class="string">"(max-width: 768px)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"mdn-logo-big.png"</span> <span class="attr">media</span>=<span class="string">"(min-width: 1000px)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mdn-logo-narrow.png"</span> <span class="attr">alt</span>=<span class="string">"MDN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>构建自动化工具实现优化</strong><br>这个一句话说不完, 以后单独拎出来说这东西吧.</p><h2 id="视频优化"><a href="#视频优化" class="headerlink" title="视频优化"></a>视频优化</h2><p>当下视频播放器分为两大流派, 一个是HTML5新进入的<code>video</code>标签, 使用方式简洁. 也是现在主流播放方案. 另一个是<code>Flash</code>播放器, 也是过去常用的播放方案. 虽然技术成熟, 插件多, 但也是逐步的将被淘汰. chrome浏览器默认禁止Flash播放器的使用, 就连Edge都要手动开启才能使用.</p><blockquote><p>来对比一下两者的优缺点</p></blockquote><table><thead><tr><th align="left"></th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">video</td><td align="left">不需要下载额外的资源(如插件什么的)</td><td align="left">不同浏览器<code>video</code>标签的外观都不一样. 如果要统一的话需要自己写UI来实现</td></tr><tr><td align="left">Flash</td><td align="left">兼容性好, 只需要有 Flash player 播放器插件都可以进行播放</td><td align="left">1. 需要下载额外的 swf 播放文件才可以播放, 浏览器必须要有Flash player插件(回想以前网页老是让你下载Flash的场景)<br>2. Flash player 版本的碎片化<br>3. UI定制需要 as(带有学习成本)</td></tr></tbody></table><p><strong>当下主流的方案</strong><br>Flash 和 HTML5 两个方案相结合, 组成一个完整的方案. 当下就有几个成熟稳定的库, 如<code>Flowplayer</code>和<code>VideoJs</code>等.</p><p><strong>视频优化需要的解决问题</strong></p><ol><li>由于各浏览器UI不同, 设计师会要求我们按照设计图做播放器.</li><li>在一些视频网站中, 可能产品经理就会让我们实现, 让用户一进来就最先看到视频.<br>浏览器会将所有的多媒体文件放在最后面加载, 无论标签位置放置在什么位置. 解决的方案就是将<code>&lt;link&gt;</code>代替<code>&lt;script&gt;</code>标签引用.</li></ol><h2 id="常用的前端缓存技术"><a href="#常用的前端缓存技术" class="headerlink" title="常用的前端缓存技术"></a>常用的前端缓存技术</h2><p><code>SessionStorage</code> 临时性存储, 数据仅仅在当前的页面生效, 关闭页面后数据就自动清除了. 同时刷新页面不属于”离开页面”的范围, 数据仍然会存在. 现在微信公众号开发常用这种方法来记录用户信息.</p><p><code>Cookie</code>, 兼容性最好的本地存储. 缺点是有大小的限制, 而且每次发送请求时, 请求头会带着Cookie一起发送过去.(这里有个问题, 如果在cookie中存储了1M的数据, 那么在请求的时候, 1M的数据也会跟着请求发送到服务端. 这就很大的影响带宽了) 现在基本大多数登录的合法性验证都是用cookie验证的.</p><p>LocalStorage 特点是持久储存, 操作方法和 SessionStorage 乐视, 也都是操作key-value的形式. 几乎所有现代浏览器都已经支持了. 值得注意的是, LocalStorage 虽然可以永久储存, 但是无法跨浏览器的获取数据的, 还需要注意储存上限.</p><h2 id="高性能DOM"><a href="#高性能DOM" class="headerlink" title="高性能DOM"></a>高性能DOM</h2><p>说到高性能的<code>DOM</code>, 就不得不提回流与重绘这个概念. 为此我又专门的写了一篇<a href="https://anran758.github.io/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/">回流与重绘</a>. 有兴趣的同学可以去看一下.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上文都只是在基础上的优化. 还有更多项目内工程化的优化就再等咱有时间再更新相关的内容吧~</p><div class="note primary">            <p><strong>参考资料</strong><br>前端性能优化-通用的缓存SDK: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzg2Ng==" title="https://www.imooc.com/learn/866">https://www.imooc.com/learn/866<i class="fa fa-external-link"></i></span></p>          </div>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解之排序二叉树</title>
      <link href="/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/10/深入学习之排序二叉树/banner.png"><p>二叉树是一种具有层级特性的的数据结构. 这些知识虽说在日常工作中不常使用, 但还是有必要让我们去学习一下, 研究其原理是如何运作. 下面将分享自己的一些理解和学习笔记, 来谈一谈什么是排序二叉树.</p><a id="more"></a><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>树(Tree), 是(n&gt;=0)个节点的有限集. 其中 n=0 时, 我们称之为空树. 在一棵非空树中, 只有一个根节点. 在二叉树中, 每个节点最多有两个子节点. 一般称为左节点和右节点(左、右子树).</p><h2 id="排序二叉树"><a href="#排序二叉树" class="headerlink" title="排序二叉树"></a>排序二叉树</h2><p>排序二叉树, 又称为二叉查找树. 它有着自己显著的特点:</p><ol><li>首先一个节点左孩子的值, 一定小于它本身节点的值.</li><li>一个节点右孩子的值, 一定大于它本身节点的值.</li><li>左、右孩子(子树)也分别是排序二叉树.</li></ol><h3 id="构建排序二叉树"><a href="#构建排序二叉树" class="headerlink" title="构建排序二叉树"></a>构建排序二叉树</h3><p>二叉树大多也是递归定义的. 下面根据排序二叉树的特性来创建一个二叉树.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对比新旧节点</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</span><br><span class="line">      <span class="comment">// 左节点是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 右节点是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露方法, 插入节点</span></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line">    <span class="comment">// 根节点是不是空的</span></span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nodes = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">var</span> binaryTree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line"></span><br><span class="line">nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  binaryTree.insert(key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><p>我们已经构建好了一个排序二叉树, 现在想要获取二叉树每一个节点的信息, 因此我们需要<em>遍历</em>节点, 对它做一些操作. </p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>二叉树有<em>三种遍历<em>的方法, 分别是</em>中序遍历</em>, <em>前序遍历</em>, <em>后序遍历</em>. 其中中序遍历的顺序是: <strong>左子树 -&gt; 根元素 -&gt; 右子树.</strong></p><p>对于二叉排序树来说，中序遍历得到的序列是<em>一个从小到大排序好的序列</em>. 百闻不如一见, 我们先看看图中的路线图, 整理一下思路先. </p><img data-src="/blog/2018/01/10/深入学习之排序二叉树/img-2.png"><p>这里我们需要加入中序遍历的接口, 因此我们在原先代码上继续扩展并运行.<br>控制台会依次输出”1 3 4 6 7 8 10 13 14”</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">  function BinaryTree(key) &#123;</span><br><span class="line">    var root = null;</span><br><span class="line">    var Node = function (key) &#123;</span><br><span class="line">      this.key = key;</span><br><span class="line">      this.left = null;</span><br><span class="line">      this.right = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var insertNode = function (node, newNode) &#123;</span><br><span class="line">      // 对比新旧节点</span><br><span class="line">      if (newNode.key &lt; node.key) &#123;</span><br><span class="line">        // 左节点是否存在</span><br><span class="line">        if (node.left <span class="comment">=== null) &#123;</span></span><br><span class="line">          node.left = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          insertNode(node.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (node.right <span class="comment">=== null) &#123;</span></span><br><span class="line">          node.right = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          insertNode(node.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    // 中序遍历</span></span><br><span class="line"><span class="addition">+    var inOrderTraverseNode = function (node, callback) &#123;</span></span><br><span class="line"><span class="addition">+      // 递归遍历, 当到最后叶子节点时, 下面没有节点就会直接返回</span></span><br><span class="line"><span class="addition">+      if (node !== null) &#123;</span></span><br><span class="line"><span class="addition">+        inOrderTraverseNode(node.left, callback);</span></span><br><span class="line"><span class="addition">+        callback(node.key);</span></span><br><span class="line"><span class="addition">+        inOrderTraverseNode(node.right, callback);</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"></span><br><span class="line">    // 插入节点</span><br><span class="line">    this.insert = function (key) &#123;</span><br><span class="line">      var newNode = new Node(key)</span><br><span class="line">      if (root <span class="comment">=== null) &#123;</span></span><br><span class="line">        root = newNode;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        insertNode(root, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    /**</span></span><br><span class="line"><span class="addition">+     * 中序遍历</span></span><br><span class="line"><span class="addition">+     * @param &#123;Function&#125; callback - 决定如何处理节点</span></span><br><span class="line"><span class="addition">+     */</span></span><br><span class="line"><span class="addition">+    this.inOrderTraverse = function (callback) &#123;</span></span><br><span class="line"><span class="addition">+      inOrderTraverseNode(root, callback);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">  // 初始化调用</span><br><span class="line">  var nodes = [8, 3, 10, 1, 6, 14, 4, 7, 13]</span><br><span class="line">  var binaryTree = new BinaryTree();</span><br><span class="line">  nodes.forEach(function (key) &#123;</span><br><span class="line">    binaryTree.insert(key)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 调用成功后输出当前节点</span></span><br><span class="line"><span class="addition">+  var callback = function (key) &#123;</span></span><br><span class="line"><span class="addition">+    console.log(key)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">  // 中序调用</span><br><span class="line"><span class="addition">+  binaryTree.inOrderTraverse(callback);</span></span><br></pre></td></tr></table></figure><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>虽然前面已经有了中序遍历可以遍历节点, 为啥还要浪费精力学前序呢? 诶~这是因为每一种遍历都有自己应用优势.</p><p>前序遍历最大的作用, 就是如果我们想把已经有了的二叉树重新复制一遍, 使用前序遍历得到的效率相比重新构造一次来说, 两者的差距能差好几倍.</p><p>前序遍历的顺序与中序遍历有些不同, 前序是以: <strong>根元素 - 左节点 - 右节点</strong>的顺序来遍历. </p><img title="前序遍历路线图" data-src="/blog/2018/01/10/深入学习之排序二叉树/img-3.png"><p>这里将遍历的路线图简化了下, 红色输出, 黄色返回上一级, 而绿色则是右子树遍历. 可以看到这是很典型的递归思想. 紧接着我们继续在代码上进行扩展.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 前序排序</span></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      callback(node.key)</span><br><span class="line">      preOrderTraverseNode(node.left, callback)</span><br><span class="line">      preOrderTraverseNode(node.right, callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 中序遍历</span></span><br><span class="line"><span class="comment">   * 暴露中序遍历的方法</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; callback - 决定如何处理节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  binaryTree.preOrderTraverse(callback);</span><br><span class="line">  <span class="comment">// callback会依次打印 8 3 1 6 4 7 10 14 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>看到这里, 大家可能已经意识到了. 不同的遍历方法实际上是对当前的节点访问的顺序不一样. 后序遍历的访问的次序就是: <strong>左节点 - 右节点 - 根元素</strong>. 它的特点是, 当下面的左右孩子都遍历完了后才会触发回调函数(callback). 因此适用于破坏性操作的情况, 比如删除所有的节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后序排序</span></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      preOrderTraverseNode(node.left, callback)</span><br><span class="line">      preOrderTraverseNode(node.right, callback)</span><br><span class="line">      callback(node.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 后序遍历</span></span><br><span class="line"><span class="comment">   * 暴露后序遍历的方法</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; callback - 决定如何处理节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">this</span>.postOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  binaryTree.postOrderTraverse(callback);</span><br><span class="line">  <span class="comment">// callback会依次打印 1 4 7 6 3 13 14 10 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树节点查找"><a href="#二叉树节点查找" class="headerlink" title="二叉树节点查找"></a>二叉树节点查找</h3><p>找出排序二叉树的最大节点和最小节点实际上也很简单. 前文提过, 根据排序二叉树的特性, 节点左孩子的值, 一定比节点本身小. 节点右孩子的值一定比节点本身大. 因此我们可以根据这个规则来进行查找:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code ...</span></span><br><span class="line">  <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="comment">// 循环逐级向下查找, 直到没有左孩子(最小节点)</span></span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 循环结束后直接反馈 node值</span></span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.right) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最小节点</span></span><br><span class="line">  <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minNode(root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最大节点</span></span><br><span class="line">  <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxNode(root)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"min node is:"</span> + binaryTree.min())    <span class="comment">// 输出1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"min node is:"</span> + binaryTree.max())    <span class="comment">// 输出 14</span></span><br></pre></td></tr></table></figure><p>查找节点是否存在: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">  <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依旧是递归思想， key值比node.key值小, 就去查询左子树</span></span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.left, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> searchNode(root, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binaryTree.search(<span class="number">7</span>) ? <span class="string">"key 7 is found"</span> : <span class="string">"key 7 is not found"</span>)</span><br><span class="line"><span class="comment">// key 7 is found</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binaryTree.search(<span class="number">9</span>) ? <span class="string">"key 9 is found"</span> : <span class="string">"key 9 is not found"</span>)</span><br><span class="line"><span class="comment">// key 9 is not found</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后将上面的知识总结一下. 首先知道了树的实际上是一种具有层级特性的数据结构, 其中排序二叉树又是一种特殊的树. 它的具有以下几种性质:</p><ol><li>如果左(孩子)子树不为空, 那么左子树一定比父节点(根节点)的值小.</li><li>如果右(孩子)子树不为空, 那么右子树一定比父节点(根节点)的值大.</li><li>其中左、右子树也分别是排序二叉树.</li></ol><p>紧接着创建了二叉树节点后, 我们需要去遍历这些节点. 遍历的方法又分前序遍历, 中序遍历, 后序遍历. 三者的区别仅在遍历的顺序不同, 但却有着不同优势.</p><ul><li>前序遍历是唯一一个从根元素开始遍历的, 其顺序为 <em>根 - 左 - 右</em>, 由于它是从根左右开始, 非常适合像复制节点这样的工作.</li><li>中序遍历的顺序是 <em>左 - 根 - 右</em>, 返回的是一个从小到大(从大到小)排序的好序列.</li><li>后序遍历的顺序是 <em>左 - 右 - 根</em>, 其特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点.</li></ul><p>后面还讲到了二叉树节点查找, 利用递归找到二叉树中最小(大)的节点值等.<br>数据结构的学习之路还很长, 以后再一点一点慢慢的深入吧~</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 排序二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化Vue项目的构建速度</title>
      <link href="/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
      <url>/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/06/优化Vue项目的构建速度/banner.png"><p>随着项目依赖的增加, 在配合开发的时候听到后端同学的抱怨 build 时间长, 及其影响开发效率和心情. 然后翻阅了相关的资料开启Vue优化之路~</p><a id="more"></a><h2 id="项目依赖管理"><a href="#项目依赖管理" class="headerlink" title="项目依赖管理"></a>项目依赖管理</h2><p>首先检查一下依赖, 去掉对项目没用的依赖, 然后注意开发依赖跟生产依赖不能弄混. 如<code>scss</code>, <code>scss-loader</code>要放在开发依赖中, 因为编译后就不需要了的.. 这一点我以前也有文章提过<a href="https://anran758.github.io/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/">两者的区别</a>, 有兴趣的同学可以去看看.</p><h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><p>修改<code>config/index.js</code>下的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发环境dev下, 设置为`eval`能提高最快速度, 但是缺点是不能正确显示行号, Debug会有点影响</span></span><br><span class="line">devtool: <span class="string">'eval'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭生产环境的sourceMap, 不懂是啥的话可以看下面的文章</span></span><br><span class="line"><span class="comment">// 阮一峰 - JavaScript Source Map 详解</span></span><br><span class="line"><span class="comment">// http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</span></span><br><span class="line">productionSourceMap: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在<code>src/mian.js</code>关闭生产环境下的调试信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭生产环境下的调试信息</span></span><br><span class="line"><span class="keyword">const</span> isDebugMode = process.env.NODE_ENV !== <span class="string">"production"</span>;</span><br><span class="line">Vue.config.debug = isDebugMode;</span><br><span class="line">Vue.config.devtools = isDebugMode;</span><br><span class="line">Vue.config.productionTip = isDebugMode;</span><br></pre></td></tr></table></figure><h2 id="启动-DllPlugin"><a href="#启动-DllPlugin" class="headerlink" title="启动 DllPlugin"></a>启动 DllPlugin</h2><p>在<code>build</code>文件夹中新增<code>webpac.dll.config.js</code>的js文件. 我们将第三方库抽取出来, 打包<code>dll</code>代码.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取第三方库</span></span><br><span class="line"><span class="keyword">const</span> vendors = [</span><br><span class="line">      <span class="string">"vue/dist/vue.common.js"</span>,</span><br><span class="line">      <span class="string">"vue-router"</span>,</span><br><span class="line">      <span class="string">"babel-polyfill"</span>,</span><br><span class="line">      <span class="string">"axios"</span>,</span><br><span class="line">      <span class="string">"element-ui"</span>,</span><br><span class="line">      <span class="string">"mint-ui"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: vendors</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">"../static/js"</span>),</span><br><span class="line">    filename: <span class="string">"[name].dll.js"</span>,</span><br><span class="line">    library: <span class="string">"[name]_[hash]"</span> <span class="comment">// vendor.dll.js中暴露出的全局变量名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">"."</span>, <span class="string">"[name]-manifest.json"</span>),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 此处需要和 output.library 的值一致</span></span><br><span class="line">      name: <span class="string">"[name]_[hash]"</span>,</span><br><span class="line">      context: __dirname</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们写一个快捷的调用方式, 在<code>package.json</code>的<code>script</code>上添加一行代码:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    // other code...</span><br><span class="line">    "dll": "webpack --config ./build/webpack.dll.config.js"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以直接在命令行使用<code>npm run dll</code>, 生成<code>vendor-manifest.json</code>和<code>vendor.dll.js</code>, 前者是库文件的<code>node_modle</code>路径和<code>webpack</code>打包id的映射. 后者是我们打包后的代码库.</p><p>随后这里我们再安装<code>html-webpack-include-assets-plugin</code>和<code>copy-webpack-plugin</code>这两个插件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm insatll --save-dev html-webpack-include-assets-plugin copy-webpack-plugin</span><br></pre></td></tr></table></figure><p><code>copy-webpack-plugin</code>是因为项目的需要，我们需要copy到指定的目录下.<code>html-webpack-include-assets-plugin</code>是将<code>vendor.dll.js</code>插入到<code>index.html</code>里.</p><p>这里值得一提的是, 虽然我们可以直接在根目录的<code>index.html</code>里插入<code>script</code>, 但实际上并不妥当的. 当你<code>npm run dev</code>后, 你会发现在控制台那一行红色的报错, 告诉着你东西找不到, 虽然不影响开发, 但你会看得很难受.</p><p>紧接着我们在<code>webpack.prod.conf.js</code>上引用我们添加的依赖, 再添加以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config 是 config/index.js 里的配置</span></span><br><span class="line"><span class="comment">// utils.assetsPath 也是 build/utils.js的配置</span></span><br><span class="line"><span class="comment">// 这里这样写是为了跟项目统一</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">'./vendor-manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// copy custom static assets</span></span><br><span class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">      to: config.build.assetsSubDirectory,</span><br><span class="line">      ignore: [<span class="string">'.*'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">// 将 vendor.dll.js 插入HTML里</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackIncludeAssetsPlugin(&#123;</span><br><span class="line">    assets: [utils.assetsPath(<span class="string">'js/vendor.dll.js'</span>)],</span><br><span class="line">    files: [<span class="string">'index.html'</span>],</span><br><span class="line">    append: <span class="literal">false</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在命令行进行打包<code>npm run build</code>, 可以看到构建的速度大大的提高啦, 我们的优化也告一段落了~</p><img data-src="/blog/2018/01/06/优化Vue项目的构建速度/run-build.png"><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后再优化时说说踩的坑, 给后来人一些提示.</p><p><code>Uncaught ReferenceError: vendor_library is not defined</code> - 检查HTML里是否插入<code>vendor.dll.js</code>, 文件是否加载成功, 或者检查是否有路径问题.</p><p>一些打包后hash不变仍然会被清除重新打包 … 这是因为<code>vue-cli</code>默认配置会直接清空<code>dist</code>文件夹里的所有文件, 你提前放一些js文件进去也是没有用的.</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈对MVC与MVVM的理解</title>
      <link href="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/05/浅谈对MVC与MVVM的理解/banner.jpg"><p>开发中我们常听说MVC, MVP, MVVM这些好像很高端的名词, 那么你了解他实际上是什么东西吗? 下面谈谈对它们的理解.</p><a id="more"></a><h3 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. MVC</h3><p>其实上面所提的三者都是一种软件架构模式(或者说是一种概念), 其中<strong>MVC</strong>的历史最为长远.</p><p>MVC模式可以分成以下三种, 就是模型(module), 界面(View), 控制器(controller). 三者之间的关系.</p><img title="各部件通信方式" data-src="/blog/2018/01/05/浅谈对MVC与MVVM的理解/mvc.jpg"><p>MVC的好处在于</p><ol><li>视图控制模型分离降低耦合性</li><li>提高代码重用性和可维护性</li><li>因为是单向模块化, 不同层各施其职，互不干涉</li></ol><p>有优点再说说缺点: </p><ol><li>清晰的构架以代码的复杂性为代价, 对小项目优可能反而降低开发效率. </li><li><code>Controller</code>层代码难以复用的, 到后面会变得臃肿.</li><li>运行效率相对较低, 太过于复杂反而不太适合中小型项目</li></ol><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM(Module-View-ViewModule)的出现主要是为了解决在开发过程中<code>Controller</code>越来越庞大的问题, 它将<code>Controller</code>替换成了<code>ViewModule</code>, 同时改变了通讯模式, 这是MVVM相对于MVC改进的核心思想.</p><img data-src="/blog/2018/01/05/浅谈对MVC与MVVM的理解/mvvm.jpg"><p>其中MVVM的显著特点就是双向绑定. <code>view</code>的变动会自动更新到<code>Model</code>中. 其中当下很流行的Vue框架就是采用了这个模式. 下图的就能很清晰的看的懂ViewModel是如何做的.</p><img data-src="/blog/2018/01/05/浅谈对MVC与MVVM的理解/vue-1.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git emoji使用指南</title>
      <link href="/blog/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/31/Git-emoji使用指南/banner.jpg"><p>emoji源于日语词汇“絵文字”, 想必大家对它都挺熟悉的吧, 其拟人化的生动形象，已经成为当下流行的表情之一. 接下来讲一下如何规范的在<code>git</code>中使用emoji提高我们项目的可读性吧~<a id="more"></a></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>在<code>git commit</code>上加入emoji的二进制符号, 格式为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:emoji1: :emoji2: 本次提交的主要内容</span><br></pre></td></tr></table></figure><p>如初次提交:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">":tada: Initialize Repo"</span></span><br></pre></td></tr></table></figure><h4 id="相关规范"><a href="#相关规范" class="headerlink" title="相关规范"></a>相关规范</h4><p>emoji 表情在提交代码的时候也不能乱用，否则容易造成误解. 因此开源项目<span class="exturl" data-url="aHR0cHM6Ly9naXRtb2ppLmNhcmxvc2N1ZXN0YS5tZS8=" title="https://gitmoji.carloscuesta.me/">gitmoji<i class="fa fa-external-link"></i></span>专门规定了在 github 提交代码时应当遵循的 emoji 规范：</p><table><thead><tr><th align="left">emoji</th><th align="left">emoji代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">:tada:(喝彩)</td><td align="left"><code>tada</code></td><td align="left">初始提交</td></tr><tr><td align="left">:art:(调色板)</td><td align="left"><code>art</code></td><td align="left">改进代码的结构/格式</td></tr><tr><td align="left">:zap:(闪电)</td><td align="left"><code>zap</code></td><td align="left">提高性能</td></tr><tr><td align="left">:fire:(火焰)</td><td align="left"><code>fire</code></td><td align="left">删除代码或文件</td></tr><tr><td align="left">:bug:(bug)</td><td align="left"><code>bug</code></td><td align="left">修复一个错误</td></tr><tr><td align="left">:ambulance:(紧急救护车)</td><td align="left"><code>ambulance</code></td><td align="left">关键修补程序</td></tr><tr><td align="left">:sparkles:(闪亮)</td><td align="left"><code>sparkles</code></td><td align="left">引用新功能</td></tr><tr><td align="left">:memo:(备忘录)</td><td align="left"><code>memo</code></td><td align="left">编写文档</td></tr><tr><td align="left">:rocket:(火箭)</td><td align="left"><code>rocket</code></td><td align="left">部署新功能</td></tr><tr><td align="left">:recycle:(重构)</td><td align="left"><code>recycle</code></td><td align="left">代码重构</td></tr><tr><td align="left">:lipstick:(口红)</td><td align="left"><code>lipstick</code></td><td align="left">更新UI和样式文件</td></tr><tr><td align="left">:white_check_mark:(复选框)</td><td align="left"><code>white_check_mark</code></td><td align="left">添加测试</td></tr><tr><td align="left">:apple:(苹果)</td><td align="left"><code>apple</code></td><td align="left">修复MacOS上的问题</td></tr><tr><td align="left">:penguin:(企鹅)</td><td align="left"><code>penguin</code></td><td align="left">修复Linux上的问题</td></tr><tr><td align="left">:checkered_flag:(旗子)</td><td align="left"><code>checkered_flag</code></td><td align="left">修复Windows上的问题</td></tr><tr><td align="left">:robot:(机器人)</td><td align="left"><code>robot</code></td><td align="left">解决Android上的问题</td></tr><tr><td align="left">:green_apple:(绿苹果)</td><td align="left"><code>green_apple</code></td><td align="left">解决iOS上的问题</td></tr><tr><td align="left">:bookmark:(书签)</td><td align="left"><code>bookmark</code></td><td align="left">发布/版本标签</td></tr><tr><td align="left">:rotating_light:(警告灯)</td><td align="left"><code>rotating_light</code></td><td align="left">移除 linter 警告</td></tr><tr><td align="left">:construction:(施工)</td><td align="left"><code>construction</code></td><td align="left">工作正在进行中</td></tr><tr><td align="left">:green_heart:(绿心)</td><td align="left"><code>green_heart</code></td><td align="left">修复CI构建</td></tr><tr><td align="left">:arrow_down:(下降)</td><td align="left"><code>arrow_down</code></td><td align="left">降级依赖关系</td></tr><tr><td align="left">:arrow_up:(上升)</td><td align="left"><code>arrow_up</code></td><td align="left">升级依赖关系</td></tr><tr><td align="left">:pushpin:(图钉)</td><td align="left"><code>pushpin</code></td><td align="left">将依赖关系固定到特定的版本</td></tr><tr><td align="left">:construction_worker:(工人)</td><td align="left"><code>construction_worker</code></td><td align="left">添加CI构建系统</td></tr><tr><td align="left">:chart_with_upwards_trend:(上升趋势)</td><td align="left"><code>chart_with_upwards_trend</code></td><td align="left">添加分析或跟踪代码</td></tr><tr><td align="left">:heavy_minus_sign:(减号)</td><td align="left"><code>heavy_minus_sign</code></td><td align="left">删除依赖项</td></tr><tr><td align="left">:whale:(鲸鱼)</td><td align="left"><code>whale</code></td><td align="left">关于Docker的工作</td></tr><tr><td align="left">:heavy_plus_sign:(加号)</td><td align="left"><code>heavy_plus_sign</code></td><td align="left">添加一个依赖项</td></tr><tr><td align="left">:wrench:(扳手)</td><td align="left"><code>wrench</code></td><td align="left">更改配置文件</td></tr><tr><td align="left">:pencil2:(铅笔)</td><td align="left"><code>pencil2</code></td><td align="left">修正错别字</td></tr><tr><td align="left">:hankey:(hankey)</td><td align="left"><code>hankey</code></td><td align="left">编写需要改进的不好的代码</td></tr><tr><td align="left">:rewind:(回退)</td><td align="left"><code>rewind</code></td><td align="left">恢复更改</td></tr><tr><td align="left">:globe_with_meridians:(国际化)</td><td align="left"><code>globe_with_meridians</code></td><td align="left">国际化和本地化</td></tr><tr><td align="left">:twisted_rightwards_arrows:(合并)</td><td align="left"><code>twisted_rightwards_arrows</code></td><td align="left">合并分支</td></tr><tr><td align="left">:package:(打包)</td><td align="left"><code>package</code></td><td align="left">更新编译的文件或包</td></tr><tr><td align="left">:alien:(外星人)</td><td align="left"><code>alien</code></td><td align="left">由于外部API更改而更新代码</td></tr><tr><td align="left">:truck:(移动搬家)</td><td align="left"><code>truck</code></td><td align="left">移动或重命名文件</td></tr><tr><td align="left">:page_facing_up:(页面)</td><td align="left"><code>page_facing_up</code></td><td align="left">添加或更新许可证</td></tr><tr><td align="left">:boom:(爆炸性)</td><td align="left"><code>boom</code></td><td align="left">介绍突破性变化</td></tr><tr><td align="left">:bento:(便当)</td><td align="left"><code>bento</code></td><td align="left">添加或更新资产</td></tr><tr><td align="left">:ok_hand:(好的手势)</td><td align="left"><code>ok_hand</code></td><td align="left">由于代码审阅更改而更新代码</td></tr><tr><td align="left">:wheelchair:(无障碍)</td><td align="left"><code>wheelchair</code></td><td align="left">改善无障碍</td></tr><tr><td align="left">:bulb:(灯泡)</td><td align="left"><code>bulb</code></td><td align="left">记录源代码</td></tr><tr><td align="left">:speech_balloon:(文字框)</td><td align="left"><code>speech_balloon</code></td><td align="left">更新文字和文字</td></tr><tr><td align="left">:card_file_box:(存档箱)</td><td align="left"><code>card_file_box</code></td><td align="left">执行与数据库相关的更改</td></tr><tr><td align="left">:loud_sound:(声响)</td><td align="left"><code>loud_sound</code></td><td align="left">添加日志</td></tr><tr><td align="left">:mute:(静音)</td><td align="left"><code>mute</code></td><td align="left">删除日志</td></tr><tr><td align="left">:children_crossing:(用户)</td><td align="left"><code>children_crossing</code></td><td align="left">改善用户体验/可用性</td></tr><tr><td align="left">:building_construction:(建筑)</td><td align="left"><code>building_construction</code></td><td align="left">进行架构更改</td></tr></tbody></table><p><strong>参考资料:</strong></p><p>Git emoji: <span class="exturl" data-url="aHR0cHM6Ly9naXRtb2ppLmNhcmxvc2N1ZXN0YS5tZQ==" title="https://gitmoji.carloscuesta.me">https://gitmoji.carloscuesta.me<i class="fa fa-external-link"></i></span><br>Github emoji列表: <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTY0OTc4MA==" title="https://segmentfault.com/a/1190000009649780">https://segmentfault.com/a/1190000009649780<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手不知道的JavaScript技巧 - 条件语句的简写技巧</title>
      <link href="/blog/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
      <url>/blog/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/26/新手不知道的技巧-if语句的判定/banner.jpg"><p>可能入坑不久的同学还会用着<code>if (value !== null || Value !== undefined)</code>这样的判断语句, 而实际上只要理解判定的规则, 善用规则, 就能大大的提高代码的可读性. 接下来让我们深入学习一下.</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>大多编程语言中最为常用的一个语句就是<code>if</code>语句, 这种条件语句是通过判断指定表达式的值来决定执行还是跳过某些语句. 它的语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Expression) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<strong>Expression(表达式/条件)</strong>可以是任意表达式或者值.</p><ol><li>首先它会解析表达式的值</li><li>如果表达式是无法解析的, 会报<code>ReferenceError</code>的错误并停止. 如果不是则继续.</li><li>判断值的引用类型, 如果是布尔值, 字符串和符号则继续. <code>null</code>和<code>undefined</code>永远都返回 false.</li><li>将值传入<code>toBoolean(exprValue)</code>根据下面的规则转换为布尔值.</li></ol><table><thead><tr><th align="left">value</th><th align="left">Boolean</th></tr></thead><tbody><tr><td align="left">未定义(Undefined)</td><td align="left">false</td></tr><tr><td align="left">空值(null)</td><td align="left">false</td></tr><tr><td align="left">布尔值(Boolean)</td><td align="left">返回参数本身</td></tr><tr><td align="left">数字(Number)</td><td align="left">如果参数是<code>+0</code>, <code>-0</code>或<code>NaN</code>，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td align="left">字符串(String)</td><td align="left">如果参数是空字符串(长度为零)，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td align="left">Symbol</td><td align="left">返回 true</td></tr><tr><td align="left">Object</td><td align="left">返回 true</td></tr></tbody></table><p>这里我们得出<code>undefined</code>, <code>null</code>, <code>NaN</code>, 空字符串, 和数字 0 都是过不了条件语块的规则, 因此我们可以利用这一点来对代码进行简写.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad code</span></span><br><span class="line"><span class="keyword">if</span> (value != <span class="literal">undefined</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad code</span></span><br><span class="line"><span class="keyword">if</span> (value !== <span class="literal">undefined</span> || value !== <span class="literal">null</span> || value !== <span class="literal">false</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good code</span></span><br><span class="line"><span class="keyword">if</span> (userName) &#123;</span><br><span class="line">  something...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag锁, 利用取反转换布尔值</span></span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">  flag = <span class="literal">true</span>;</span><br><span class="line">  something...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相同的, 也没有必要去使用<code>==</code>规范不推荐的方式去隐式转换类型, 这种规则同样适用于<code>三目运算符</code>, <code>switch</code>等条件运算中去… 这样看起来是不是自己的代码整洁多了呢~</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>才疏学浅, 如果有什么说的不对或者需要改进的地方, 可以给我留言大家一起交流. 原创不易, 如果文章对你有帮助的话就随手点个赞鼓励一下呗~</p><p><strong>参考资料</strong><br>ECMA-262 官方文档<br><span class="exturl" data-url="aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlmLXN0YXRlbWVudA==" title="http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement">http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> JavaScript原理分析 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥WebSockets</title>
      <link href="/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/"/>
      <url>/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/25/初窥Web-Sockets/banner.png"><p>要说最令人津津乐道的新浏览器的API, 就数Web Sockets了. 接下来了解一下这个备受争议的API吧~</p><a id="more"></a><h2 id="什么是Web-Socket"><a href="#什么是Web-Socket" class="headerlink" title="什么是Web Socket?"></a>什么是Web Socket?</h2><p><strong>Web Socket</strong>是HTML5出来的一个持久化新协议. 它的目标是在一个单独的持久链接上提供全双工, 让客户端和服务器之间的数据交换变得更加简单.</p><p>Web Socket是基于HTTP协议来建立连接. 由于使用了自定义的协议, 因此它的URL模式策略也与标准的HTTP不同, 未加密的<code>http://</code>对应着<code>ws://</code>, 而加密的连接的<code>https://</code>也变成<code>https://</code>.</p><p><strong>那使用Web Socket的好处是什么?</strong></p><ol><li><p>能够在客户端和服务器之间发送非常少的数据, 而不用担心HTTP那样字节级的开销. 由于传递的数据很小, 表面看起来会很适用于移动端.</p></li><li><p>主动性<br>大家都知道, 标准HTTP请求是具有被动性的, 如<code>ajax轮询</code>:<br>客户端: “lalala, 帮我看一下我快递有变动吗?”<br>服务端: “没呢, 没变化”<br>客户端: “那现在呢?”<br>服务端: “也还没..”<br>客户端: “那现在呢?”<br>服务端: “还没…”<br>客户端: “那现在呢?”<br>服务端: “好啦好啦, 物流发生变化了, 你看到这里这里了”<br>客户端: “那开始派送了吗?”<br>服务端: “还没…”<br>这样的缺点是什么… <code>ajax轮询</code>需要服务器有很快的处理速度和资源, 而频繁过多的请求可能会报<code>503 Server Unavailable</code>的错误了.</p><p>而升级为Websocket后, 这时候服务器会主动把东西反馈给你, 如:<br>客户端: “哥们, 咱建立Websocket协议, 需要chat，Websocket协议版本：17（HTTP Request）”<br>服务端：”ok，确认，已升级为Websocket协议(HTTP Protocols Switched)”<br>客户端: “那有啥事的话跟我讲噢”<br>服务端: “balbalbal”<br>服务端: “balbalbal”<br>服务端: “hhhhhhhhhh”<br>服务端: “笑死啦2333333”<br>就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你, 这里场景就适用于聊天室之类的）</p></li><li><p>没有同源限制，客户端可以与任意服务器通信(不用担心跨域)</p></li></ol><h2 id="现状与短处"><a href="#现状与短处" class="headerlink" title="现状与短处"></a>现状与短处</h2><p>既然它存在这种优势为什么如今还是使用的不多呢?<br><code>HTML5</code>新API嘛… 说到<code>HTML5</code>就不得不考虑到<em>兼容性</em>的问题, WebSocket在各浏览器的兼容性不一致这是问题其一.</p><img title="Web Sockets兼容性" data-src="/blog/2017/12/25/初窥Web-Sockets/img-1.png"><p>前文有提过. 相对于PC端, <code>websocket</code>的客户端和服务器之间发送非常少的数据, 表面看起来的确移动端会更有优势. 但是目前以国内的环境来说, 反而不好用. 当网络不稳定的时候开销尤其大.</p><p>看到这里或许会有人问, 啊? 你之前不是说只需要1次HTTP请求就可以做信息传送了蛮?? 是的, 没错. 大家可能会玩过像<em>阴阳师</em>这样的游戏? 网络一闪, 就会让你重新登录.而长轮询断一次只会卡一秒, 而websocket断了则要重新从认证开始, 那当网络不稳定时, 那开销可想而知.</p><p>其次就是性能上并没有绝对的优势, 所以当前主流还是标准的HTTP比较多, 而<code>websocket</code>, 据我所知当下适用的场景也只有手游上的使用了.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><code>websocket</code>的路还很长, 虽然现在使用的不多, 但以后还是可以保留小小的期待. 上文提及资料有部分是来源于网上. 有部分是去咨询了相关的dalao. 才疏学浅若有违权, 或者说的不对的地方望各位指出.</p><p><strong>参考资料:</strong><br>WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear的回答 - 知乎<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMjE1NTYxL2Fuc3dlci80MDMxNjk1Mw==" title="https://www.zhihu.com/question/20215561/answer/40316953">https://www.zhihu.com/question/20215561/answer/40316953<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> WebSocket </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于点击下拉菜单字体模糊及可能造成boder上下一像素宽度不一的坑</title>
      <link href="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/"/>
      <url>/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/transition.gif"><p>关于点击下拉菜单会造成文字模糊及<code>boder 1px</code>上下和左右宽度不一致的问题.</p><a id="more"></a><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>朋友叫帮忙看代码~ 问题是这样的, 当点击下拉菜单时, 整个页面的组件都变模糊一下. 然后border上下的边框能隐约看到会大概溢出那么一点(但是没到一个像素).</p><p>因为使用了<code>element</code>组件, 大概能想到中间加有<code>transition</code>, 对问题进行排查后发现<code>transform</code>这个属性会对后代元素能产生影响, 将属性删除, 问题解决. 具体影响的原理, 现在占个坑, 以后再深入挖掘…</p><h2 id="Bug相关的图"><a href="#Bug相关的图" class="headerlink" title="Bug相关的图"></a>Bug相关的图</h2><img title="点击后能明显看到整个组件模糊了" data-src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/bug.gif"><img title="正常下的1像素" data-src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/img-1.jpg"><img title="1像素下还有一点点的溢出" data-src="/blog/2017/12/23/关于点击下拉菜单模糊及可能造成boder上下一像素宽度不一的坑/img-2.jpg">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transition </tag>
            
            <tag> transform </tag>
            
            <tag> 布局bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull远程仓库代码冲突</title>
      <link href="/blog/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/"/>
      <url>/blog/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/18/git-pull远程仓库代码冲突/banner.jpg"><p>常用git与远程仓库进行交互, 难免会遇到冲突的问题. 现在来了解一下, 当出现这种情况时, 该要如何处理.</p><a id="more"></a><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>代码冲突, 无非就是同时有两个人在改动同一个文件所造成的冲突. 当你使用<code>git pull</code>后, <code>git</code>会提示你: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</span><br><span class="line">        src/components/page/file.vue</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br><span class="line">Updating 8e191be..c301cdc</span><br></pre></td></tr></table></figure><p>这时候你可以使用<code>git stash</code>将本地修改存储起来. 使用<code>git status</code>查看, 是不是干净啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></span><br><span class="line">HEAD is now at 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这时再使用将远程仓库的代码pull下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  $ git pull</span><br><span class="line">Updating 8e191be..c301cdc</span><br><span class="line">Fast-forward</span><br><span class="line"> src/base/fonts/iconfont.eot                        | Bin 7320 -&gt; 7548 bytes</span><br><span class="line"> src/components/page/file.vue      |  10 +-</span><br><span class="line"> create mode 100644 static/font_503074_8sfhbdjlucjtt9/iconfont.eot</span><br></pre></td></tr></table></figure><p>现在要查看现有的储藏, 可以使用<code>git stash list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 8e191be Merge branch <span class="string">'master'</span> of https://github.com/anran758/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>这时我们还原储藏的内容, 使用命令<code>git stash pop &#39;stash@{0}&#39;</code>. <strong>注意这里的要使用引号<code>&#39;stash@{0}&#39;</code>, 因为shell正在使用扩展里的内容, 否则会报一个</strong><code>unknown option: -encodedCommand</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="string">'stash@&#123;0&#125;'</span></span><br><span class="line">Auto-merging src/components/page/file.vue</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   src/components/page/film.vue</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>之后就可以使用<code>git diff</code>或者利用图形工具, 如sourceTree(可视化git), vscode编辑器上对比代码, 手动解决冲突即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是.gitkeep? 如何在windows下使用命令行创建.gitkeep文件</title>
      <link href="/blog/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/16/使用命令行创建-gitkeep文件/banner.png"><p>在一些脚手架上构建项目中, 你或许会留意到某个目录中会有个名为<code>.gitkeep</code>的空文件. 那么这个文件是用来做什么的呢?</p><a id="more"></a><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>什么是<code>.gitkeep</code>? 其实是这样的,  当提交的代码时目录中有空文件夹时<code>git</code>会自动忽略掉. 而有时候你就是想留着这个, 以后有用处不想被忽略怎么办呢? 因此, <code>.gitkeep</code>就应运而生了…</p><p><code>.gitkeep</code>是一个约定俗成的文件名并没有什么特殊规则, 它就相当于一个占位, 让<code>git</code>开始跟踪这个目录.<br>其实任何文件都可以, 只不过大家都遵循这个命名, 会跟具有语义化. 如同字面意思一样…<code>git</code> + <code>keep</code>, 让<code>git</code>保持这个文件夹, 是不是很简单易懂呀?</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><blockquote><p>“哥, 能发个’.gitkeep’给我蛮? 项目中的弄丢了..”<br>  “啊? 直接创建一个不就完啦?”<br>  “创建不了呀!!系统不准, 会报错提示必须输入文件名”<br>  “噢~是有这个限制的, 你用命令行吧”<br>  “搜了圈, 好像没有找到在windows创建的方法诶, “<br>  “? ? ?”  </p></blockquote><p>没错, 上面这场景就是让我写这篇博客的主要起因…其实windows下环境创建<code>.</code>开头的文件只能通过命令行的方法, 而且方式也很简单. 只需要输入一行命令即可..</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">NUL</span> &gt; .gitkeep</span><br></pre></td></tr></table></figure><p>这段代码的意思就是创建一个空文件重定向到名为<code>.gitkeep</code>的文件中.</p><h2 id="gitignore与gitkeep"><a href="#gitignore与gitkeep" class="headerlink" title="gitignore与gitkeep"></a>gitignore与gitkeep</h2><p>在脚手架构建的项目中, 你也总能在根目录看到名为<code>.giitignore</code>的文件, 那么它和<code>gitkeep</code>又有什么关联呢? 前文有提过, <code>.gitkeep</code>只是约定俗成的一个名称, 而<code>.gitignore</code>是一个特殊文件, 如果你有什么不想提交上去的东西, 如配置了表单密码的配置文件呀什么的, 你可以写进这个文件中, <code>git</code>会自动的忽略掉它.</p><blockquote><p>忽略文件的原则是：</p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实像<code>.gitignore</code>带有其他特殊文件还有其他, 如<code>.nojekyll</code>来告诉Github关闭 GitHub Pages 的 Jekyll 相关功能等, 由于实际工作中用的烧, 这里不详谈, 放着让大家去挖掘吧~</p>]]></content>
      
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> Githubg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目中Axios报错Promise未定义及IE10报语法错误的解决方案</title>
      <link href="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/banner.jpg"><p>关于IE11及以下版本无法使用Promise还有IE10下报错的问题</p><a id="more"></a><h2 id="Promise未定义"><a href="#Promise未定义" class="headerlink" title="Promise未定义 ?"></a>Promise未定义 ?</h2><p>在使用Axios开发时, IE11及以下版本报错会报<code>Promise未定义</code>的错误. 这是因为<code>axios</code>本质上是封装了ES6语法的<code>promise</code>,而<code>promise</code>在IE上并不兼容. </p><img title="IE11下的错误" data-src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/promise-1.png"><p>然而说到js兼容, 这时候我们又能联想到<code>babel</code>.. 没错, <code>babel</code>中有一个工具叫做<span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmNuL2RvY3MvdXNhZ2UvcG9seWZpbGwv" title="https://babeljs.cn/docs/usage/polyfill/">babel-Polyfill<i class="fa fa-external-link"></i></span>, 它会仿效一个完整的<code>ES2015+</code>环境，并意图运行于一个应用中而不是一个库/工具. 其实食用的方式也很简单.</p><p>我们将<code>babel-polyfill</code>装进我们项目依赖中. <em>这里值得注意的是, 安装的时候需要安装到<code>dependency</code>(生产依赖)中, 而不是<code>devDependency</code>(开发依赖)</em><br>(tips.关于两者的区别, 我以前的文章有专门讲过, 感兴趣的可以看一下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure><p>首先在<code>mian.js</code>的<strong>顶部</strong>引入<code>import &quot;babel-polyfill&quot;;</code>确保能够最先加载, 随后我们在<code>build</code>目录下<code>webpack.config.js</code>修改配置, 将app使用<code>babel-polyfill</code>进行编译. 这时候我们再重新编译, 就会发现<code>promise未定义</code>的错误就以及消失了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      app: [<span class="string">"babel-polyfill"</span>, <span class="string">'./src/main.js'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为文章到这里就结束了吗…. 随即我们切换到IE10下进行测试. 你会发现, 又冒出了一个报错.. Emmm, 解决一个又来一个, 惊不惊喜意不意外?</p><img title="IE10下语法错误" data-src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/IE10-1.png"><h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>当你在IE10下看到提示语法错误的时, 这时候你就得去检查检查<code>package.json</code>下 <code>webpack-dev-server</code>版本是否高于<code>2.6.1</code>. 出现这个报错主要是因为项目中使用了<code>const</code>等语法, 然而IE11以下并不认得ES6语法语法.这个问题只有在开发模式才会出现, 只要es6转码后，打包放到服务器上，就没有问题了. </p><p>如果你想在开发阶段在IE10下测试你的代码, 你可以选择降低版本到<code>2.6.1</code>上, 问题就解决了.</p><img data-src="/blog/2017/12/15/Vue项目中Axios报错Pomise未定义及IE10报语法错误的解决方案/IE10-2.png">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> IE兼容性错误 </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈前端所能做的SEO</title>
      <link href="/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/"/>
      <url>/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/05/浅谈前端所能做的SEO/seo.png"><p>SEO, 就是搜索引擎优化(Search Engine Optimization)的缩写, SEO优化是专门利用搜索引擎的搜索规则来提高网站在搜索引擎内的自然排名的一种方式. 能对搜索引擎的小蜘蛛更加友好. 那么前端能做哪些SEO的优化呢?</p><a id="more"></a><h2 id="SEO基础三要素"><a href="#SEO基础三要素" class="headerlink" title="SEO基础三要素"></a>SEO基础三要素</h2><p>我们进入某个网页打开调试工具, 在<code>&lt;head&gt;</code>标签里我们能的看到<code>&lt;title&gt;</code>标签, <code>keywords</code>和<code>description</code>的<code>&lt;meta&gt;</code>标签. 就是最基础的SEO三要素.</p><p>其中<code>&lt;title&gt;</code>标签代表着页面的标题, <code>&lt;meta keywords&gt;</code>是网站的关键字, <code>&lt;meta Description&gt;</code>则是网页的描述, 即对这些关联字进行了扩展.<br>昂, 现在我们知道了这三要素可以SEO优化, 那我们就疯狂的在关键字里加一堆上去, 越多越好?当然, 并不是这样的.这些都有限制的, 内容不可过长, 也不能过分的堆砌关键字, 每个页面的<code>description</code>也应该不同. 比如下方张老师的博客为例.</p><img title="张鑫旭老师的个人博客" data-src="/blog/2017/12/05/浅谈前端所能做的SEO/head.png"><h3 id="网站构造布局优化"><a href="#网站构造布局优化" class="headerlink" title="网站构造布局优化"></a>网站构造布局优化</h3><p>对网站布局进行SEO优化, 控制首页链接数量, 扁平化的目录层次(最多三层目录层次), 然后对导航SEO优化.</p><h2 id="编写语义化代码"><a href="#编写语义化代码" class="headerlink" title="编写语义化代码"></a>编写语义化代码</h2><p>我们常说, 要养成编写语义化代码的习惯. 那什么是语义化呢? 就是既要人看得懂, 也要机器能理解你的代码.<br>其实我们常用的HTML标签很多都是带语义化的. 如:</p><ul><li>H1 ~ H6都是用于表示标题</li><li>UL标签多用于无序列表</li><li>Ol标签用于有序列表</li><li>DL标签用于定义数据列表</li><li>Em, strong表示强调等</li></ul><img title="掘金的这种HTML就是符合语义化" data-src="/blog/2017/12/05/浅谈前端所能做的SEO/ul-1.png"><h2 id="站内优化"><a href="#站内优化" class="headerlink" title="站内优化"></a>站内优化</h2><ul><li><code>&lt;a&gt;</code> - 标签优化, 外链上加上rel=”nofollow”, 让小蜘蛛别往外面爬</li><li><code>&lt;h1&gt;</code> - 正文标题使用h1</li><li><code>&lt;img&gt;</code> - 标签使用alt说明, alt对图片起着一个注释的作用</li><li><code>&lt;strong&gt;``&lt;em&gt;</code>与<code>&lt;b&gt;``&lt;i&gt;</code>标签<br><code>&lt;strong&gt;</code>是权重标签的代表, 在搜索引擎中能够得到高度的重视, 他能突出关键词, <code>&lt;b&gt;</code>与<code>&lt;strong&gt;</code>的效果是一样的, 但是在SEO中并不会起到很好的效果, 因此不推荐使用.<br><code>&lt;em&gt;</code>表示斜体, 权重标签的重要度仅次于<code>&lt;strong&gt;</code>. </li></ul><h2 id="一些布局小技巧"><a href="#一些布局小技巧" class="headerlink" title="一些布局小技巧"></a>一些布局小技巧</h2><ul><li>重要内容HTML代码放在最前面, 小蜘蛛抓取HTML内容是按照文档流从上往下抓取的. 利用这个特点, 我们可以将重要的HTML放在上面, 然后可以通过CSS来进行布局.</li><li>重要的内容尽量不要用JS输出, 小蜘蛛看不懂JavaScript~</li><li>尽少使用iframe框架. 小蜘蛛是不会读取里面的网页的</li><li>谨慎使用<code>display: none;</code> 小蜘蛛会过滤掉<code>display: none</code>里的内容</li><li>不断的精简代码, 能使用一个标签就不要用两个标签</li></ul><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy9hbnN3ZXIvNzQ1MTE4ND9obD16aC1IYW5z" title="https://support.google.com/webmasters/answer/7451184?hl=zh-Hans">Chrome - 搜索引擎优化 (SEO) 入门指南<i class="fa fa-external-link"></i></span></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SEO其实面对的是搜索引擎, 然后搜索引擎再将搜索的结果, 根据权重展现给用户. 文中讲的只是一些基础的知识, 除此之外还有<code>robots.txt</code>, 站外友链等, 这里就不详谈了. 平时前端er日常工作中应该培养好的编程习惯, 了解了SEO的规则, 可以隐性给自己页面提升质量呢~</p>]]></content>
      
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 遍历绑定toggle icon, 动态切换action</title>
      <link href="/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/"/>
      <url>/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/vue.jpg"><p>在Vue中实现动态绑定toggle action</p><a id="more"></a><p>在遍历<code>li</code>标签时, 动态绑定点击事件, 当点击其中一个<code>item</code>时调用函数. 函数内判断是否处于<code>action</code>状态, 是则清除class, 从实现toggle的效果~ 按照这个思路也可以扩展为下拉菜单. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in itemList&quot;</span><br><span class="line">          @click=&quot;openItem(index)&quot;</span><br><span class="line">           :key=&quot;item.id&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; item.desc &#125;&#125;</span><br><span class="line">        &lt;span class=&quot;icon&quot; :class=&quot;&#123;&apos;action&apos;: actionItem === index&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      itemList: [</span><br><span class="line">        &#123;desc: &apos;item1&apos;&#125;,</span><br><span class="line">        &#123;desc: &apos;item2&apos;&#125;,</span><br><span class="line">        &#123;desc: &apos;item3&apos;&#125;</span><br><span class="line">      ],</span><br><span class="line">      actionItem: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    openItem (index) &#123;</span><br><span class="line">      if (this.actionItem === index) &#123;</span><br><span class="line">        this.actionItem = null</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.actionItem = index</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.list &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  padding: 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line">.list li &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin: 14px 0;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">  list-style: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.list .icon &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 10px;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0px;</span><br><span class="line">  border: 10px solid;</span><br><span class="line">  border-color: #aaa transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line">.list .action &#123;</span><br><span class="line">  border-color: rgb(254,0,0);</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>初次点击, <code>action</code>触发, 再次点击清除<code>action</code></p><img data-src="/blog/2017/11/29/Vue-v-for-遍历绑定toggle-icon-动态切换action/vue-1.png">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm包中的 install --save 和 install --save-dev之间到底有区别</title>
      <link href="/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/npm.jpg"><p>当我们使用<code>npm</code>进行开发时经常能遇到需要安装依赖包, 那么<code>npm install --save</code>和<code>npm install --save-dev</code>之间到底有什么区别呢? 现在来探究一番.</p><a id="more"></a><h3 id="install-–save-dev"><a href="#install-–save-dev" class="headerlink" title="install –save-dev"></a>install –save-dev</h3><p>实际上<code>--save-dev</code>是开发时候所依赖的东西，如我们想添加自动添加前缀, 那么就安装<code>autoprefixer</code>到开发依赖去. 也就是编译打包后<code>autoprefixer</code>已经帮我们添加了相应的浏览器前缀, 那么我们之后就不需要依赖他了. 所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel --save-dev</span><br></pre></td></tr></table></figure><p>在这里我们可以看到已经放进<code>package.json</code>中的<code>devDependencies</code>(开发依赖)中去了.</p><img data-src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/dev.png"><h3 id="install-–save"><a href="#install-–save" class="headerlink" title="install –save"></a>install –save</h3><p><code>--save</code>就是你发布之后还依赖的东西。 如果编译打包后还需要依赖的库, 如<code>vue</code>, 所以就放进了<code>dependencies</code>中(生产依赖).</p><img data-src="/blog/2017/11/27/谈谈npm包里的%20install%20--save%20和%20install%20--save-dev之间的区别/dep.png"><p>两者需要安装的依赖其实都可以在<code>package.json</code>中手动输入相应的库和版本号, 然后使用<code>npm install</code>就能进行安装<code>package.json</code>中的所有依赖了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JavaScript删除全部的微博</title>
      <link href="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/"/>
      <url>/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/20/使用JavaScript删除全部的微博/weibo.png"><p>生活中常常会遇到一些繁琐重复而又没有意义的东西, 所以常有人说, 作为一个程序员, 应该避免做重复没意义的事, 我们学习编程最终的目的之一无非也是偷懒….. 能让自动的就坚决不手动. 当然, 除了在学习中自己造一些有意义的轮子除外. 今天就利用一些自己所学的知识去解决生活上的一些麻烦. 比如..自动删光微博黑历史~</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>打开chrome浏览器(其他非IE现代浏览器都可以), 进入<strong>我的主页</strong>, 然后按下<code>F12</code>进入控制台.</p><img data-src="/blog/2017/11/20/使用JavaScript删除全部的微博/home.png"><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>首先这次只是单纯的想通过JavaScript批量删除全部微博代替手动而已, 那么就简单了. 我们只需要模仿点击删除的动作.</p><p>找到删除微博的key, 选中DOM元素, 这里我们可以看到菜单<strong>a标签</strong>中有一个属性<code>action-type=&quot;fl_menu</code>, 在控制台进使用<code>document.querySelectorAll</code>进行测试输出, 可以看到是一个<code>NodeList</code>的类数组, 分别对应着页面每一个<code>fl_menu</code>.</p><img title="Menu的DOM节点" data-src="/blog/2017/11/20/使用JavaScript删除全部的微博/DOM-1.png"><img title="输出到控制台" data-src="/blog/2017/11/20/使用JavaScript删除全部的微博/DOM-2.png"><p>点击<code>menu</code>弹出下拉菜单, 继续用同样的方法分析节点, 找出一个表示用于删除的属性. 一般来说, 一个合格的程序员都懂得编写语义化的代码, 这里先推测<code>action-type=&quot;feed_list_delete</code>这个属性是专属删除微博的属性, 使用<code>document.querySelector</code>将代码在控制台上测试输出. 获取到页面中第一个delete DOM, 模拟点击后弹出一个确定框, 再次使用相同的方法确定即可.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一般网站都会限制用户频繁操作, 这里我们使用<code>setTimeout</code>, 测试一个weibo能够容忍的一个操作频率(可能还跟网速有关).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 经测试, 750ms是一个较快较稳定的频率, 效率过快会弹警告.</span></span><br><span class="line">  <span class="keyword">var</span> timer = setTimeout(Delete, <span class="number">750</span>);</span><br><span class="line">  <span class="keyword">var</span> item = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Delete</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 这里需要停止定时器等待加载, 请求XHR进行加载剩余微博.</span></span><br><span class="line"><span class="comment">     * 这里是微博的一个限制, 当页面中不存在相应的DOM, 就进行页面刷新.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (item &gt; <span class="number">15</span>) &#123;</span><br><span class="line">      item = <span class="number">0</span>;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      <span class="keyword">return</span> timer = setTimeout(Delete, <span class="number">15000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟点击</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="fl_menu"]'</span>).click();</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="feed_list_delete"]'</span>).click();</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'a[action-type="ok"]'</span>).click();</span><br><span class="line"></span><br><span class="line">    ++item;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`已成功删除了<span class="subst">$&#123;item&#125;</span>项`</span>);</span><br><span class="line">    timer = setTimeout(Delete, <span class="number">750</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这样我们想要的效果就实现了.省去了一条一条删的人力, 又能运用到自己所学的知识. 其实代码代码也很简单, 无非是用到了<code>setTimeout</code>重复去递归调用而已. 要注意的是<code>querySelector</code>, 和<code>querySelector</code>都是IE9+的API, 在这里没有去考虑对IE的兼容, 并且也没有必要.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript深入理解-裁剪图片效果(选取框)</title>
      <link href="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/"/>
      <url>/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/image-01.jpg"><p>在生活中我们时常能看到这种图片裁剪的效果, 那么他实际上底层的原理是怎么实现的呢? 让我们深入的解剖一下.</p><a id="more"></a><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><img title="自己用PS撸的渣图" data-src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/clip_spec.png"><p>首先我们先将视图一分为三, 理解为三个层级叠加在一起的仰视图.</p><ul><li>最上面是可拖动的选择窗口</li><li>中间待剪辑的可视窗口</li><li>底层是一张<code>opacity: .5</code>的背景图片</li></ul><h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><p>我们这里主要讲JavaScript, HTML与css就简要的过一下.</p><p>首先<code>HTML</code>基本结构是两张相同的结构, 两张图片分别是调整过透明度的底图和一张被裁剪过了的中间层.<code>mainBox</code>包裹着选择的小方块<code>square</code>,相对定位于image在最上面一层.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/Konachan.com - 239917 sample.jpg"</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">id</span>=<span class="string">"image1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/Konachan.com - 239917 sample.jpg"</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">id</span>=<span class="string">"image2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mainBox"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square right-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>: <span class="number">#333</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">100px</span>; <span class="attribute">left</span>: <span class="number">200px</span>; <span class="attribute">width</span>: <span class="number">460px</span>; <span class="attribute">height</span>: <span class="number">360px</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-tag">img</span> &#123;<span class="attribute">width</span>: <span class="number">460px</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-id">#image1</span> &#123;<span class="attribute">opacity</span>: .<span class="number">5</span>;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-id">#image2</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">clip</span>: <span class="built_in">rect</span>(0, 200px, 200px, 0) &#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.square</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">width</span>: <span class="number">8px</span>;<span class="attribute">height</span>: <span class="number">8px</span>; <span class="attribute">background</span>: <span class="number">#fff</span>&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-up</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: nw-resize;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.up</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: n-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-up</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: ne-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: e-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-down</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: se-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.down</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: s-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-down</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: sw-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left</span>&#123;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: w-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-khtml-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h3><p><strong>ESMAScript</strong>并没有提供可拖动的API, 那我们先来思考一下, 该如何实现拖动的功能~ 最上层有9个<strong>小方块(Square)</strong>, 分别代表着不同方向的边界, 拖动这个边界, 无非需要实现这下面的底层步骤.</p><blockquote><p><strong>鼠标落下(MouseDown) =&gt; 鼠标拖动 =&gt; 松开鼠标(MouseUp)</strong>.</p></blockquote><p>先创建一个<code>clipImage</code>函数作为入口函数, 主要<strong>获取目标元素和生成DOM节点(后面讲), 绑定事件</strong>.<br>先给小方块绑定一个<strong>鼠标落下事件(mousedown)</strong>, 当触发事件(MouseEvent)时, 监听器调用<code>onMousedown函数</code>.<br><code>onMousedown</code>函数中, 接受四个参数<code>e</code>事件, <code>box</code>目标元素, <code>ctrl</code>小方块的方向, <code>type</code>属性, 主要是用来记录数据并暴露给全局变量进行通讯.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Util工具函数</span></span><br><span class="line">  <span class="keyword">var</span> util = &#123;</span><br><span class="line">    $: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "全局变量", 记录状态</span></span><br><span class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</span><br><span class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  clipImage(<span class="string">'mainBox'</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> right = util.$(<span class="string">'#box .main .right'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add mouse down event</span></span><br><span class="line">    up.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, box, up, <span class="string">'up'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将接受到的信息暴露出去.</span></span><br><span class="line">    _MainBox = box;</span><br><span class="line">    _MainCtrl = ctrl;</span><br><span class="line">    _MainType = type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>紧接着来计算拖动的距离, 在<code>onMouseDown</code>函数上将<code>moving</code>拖动标记设为<code>1</code>(true也行).</p><img title="大致坐标关系图" data-src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-1.png"><p>判断拖动的标记是否启动, 创建<code>getPosition</code>函数获取元素相对于页面左/上边的偏移量用于计算拖动的偏移量. 如下图.</p><img title="原理图" data-src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-2.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">  _MainBox = box;</span><br><span class="line">  _MainCtrl = ctrl;</span><br><span class="line">  _MainType = type;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移动计算偏移量并设置到box上</span></span><br><span class="line">   moving = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素相对于文档的距离</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> left = node.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> top = node.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> parent = node.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(parent) &#123;</span><br><span class="line">    left += parent.offsetLeft;</span><br><span class="line">    top += parent.offsetTop;</span><br><span class="line">    parent = parent.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="string">"left"</span>: left, <span class="string">"top"</span>: top&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听鼠标相对于页面的坐标</span></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (moving) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">// 父容器的宽高</span></span><br><span class="line">    <span class="keyword">var</span> addWidth, addHeight;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对于屏幕左/上的距离</span></span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(_MainType) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"right"</span>:</span><br><span class="line">        addWidth = e.clientX - boxX - width;</span><br><span class="line">        _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img title="大致坐标关系图" data-src="/blog/2017/11/17/Javascript深入解析-裁剪图片效果/drap-2.png"><p>紧接着我们会发现虽然实现了拖动的效果, 但是松开鼠标<code>box宽度</code>还是会随着鼠标变化. 这是因为还没有重置标记. 随即监听<code>鼠标松开事件(MouseUp)</code>. 单边拖动就完成啦~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标松开</span></span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// reset</span></span><br><span class="line">  moving = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="整理归纳"><a href="#整理归纳" class="headerlink" title="整理归纳"></a>整理归纳</h4><p>我们将<code>switch</code>里的代码整理出来. 装进函数里去调用. 相续的将各个方向也加上, 原理也是同理. 值得注意的是将<strong>右面和下面</strong>要加上<code>box</code>的宽高才能计算出来. <strong>剩下四个边角, 如左上什么的其实就是同时调用正方位的两个函数实现的实现起来.</strong> 然后拖动功能就大功告成啦~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util = &#123;</span><br><span class="line">    $: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</span><br><span class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  clipImage(<span class="string">'mainBox'</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> up = util.$(<span class="string">'#box .main .up'</span>);</span><br><span class="line">    <span class="keyword">var</span> down = util.$(<span class="string">'#box .main .down'</span>);</span><br><span class="line">    <span class="keyword">var</span> right = util.$(<span class="string">'#box .main .right'</span>);</span><br><span class="line">    <span class="keyword">var</span> rightUp = util.$(<span class="string">'#box .main .right-up'</span>);</span><br><span class="line">    <span class="keyword">var</span> rightDown = util.$(<span class="string">'#box .main .right-down'</span>);</span><br><span class="line">    <span class="keyword">var</span> left = util.$(<span class="string">'#box .main .left'</span>);</span><br><span class="line">    <span class="keyword">var</span> leftUp = util.$(<span class="string">'#box .main .left-up'</span>);</span><br><span class="line">    <span class="keyword">var</span> leftDown = util.$(<span class="string">'#box .main .left-down'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add mouse down event</span></span><br><span class="line">    right.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, right, <span class="string">'right'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    up.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, up, <span class="string">'up'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    down.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, down, <span class="string">'down'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    left.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, left, <span class="string">'left'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    leftUp.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, leftUp, <span class="string">'leftUp'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    leftDown.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, leftDown, <span class="string">'leftDown'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    rightUp.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, rightUp, <span class="string">'rightUp'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    rightDown.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, rightDown, <span class="string">'rightDown'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [onMousedown description] Mouse down event</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; e    [Event]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; box  [target vessel]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; ctrl [Square DOM node]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; type [Square direction]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">    _MainBox = box;</span><br><span class="line">    _MainCtrl = ctrl;</span><br><span class="line">    _MainType = type;</span><br><span class="line"></span><br><span class="line">    moving = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取元素相对于左边的距离</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = node.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> top = node.offsetTop;</span><br><span class="line">    <span class="keyword">var</span> parent = node.offsetParent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(parent) &#123;</span><br><span class="line">      left += parent.offsetLeft;</span><br><span class="line">      top += parent.offsetTop;</span><br><span class="line">      parent = parent.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="string">"left"</span>: left, <span class="string">"top"</span>: top&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标移动</span></span><br><span class="line">  <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (moving) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      <span class="comment">// 父容器的宽高</span></span><br><span class="line">      <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 相对于屏幕左/上的距离</span></span><br><span class="line">      <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span>(_MainType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"right"</span>:</span><br><span class="line">          right(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"up"</span>:</span><br><span class="line">          up(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"down"</span>:</span><br><span class="line">          down(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"left"</span>:</span><br><span class="line">          left(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"leftUp"</span>:</span><br><span class="line">          leftUp(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"leftDown"</span>:</span><br><span class="line">          leftDown(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"rightUp"</span>:</span><br><span class="line">          rightUp(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"rightDown"</span>:</span><br><span class="line">          rightDown(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标松开</span></span><br><span class="line">  <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    moving = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">right</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">left</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftDown</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">'px'</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">"px"</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">"px"</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightDown</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">"px"</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>** &lt;– 努力填坑中~ –&gt; **</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 原理解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】使用 sourcetree 实现远程仓库与本地仓库关联</title>
      <link href="/blog/2017/11/03/use-sourcetree-association/"/>
      <url>/blog/2017/11/03/use-sourcetree-association/</url>
      
        <content type="html"><![CDATA[<p><img alt="sourcetree" data-src="https://ws1.sinaimg.cn/mw690/e48206bbly1g5uwaocy62j20jg0c80uh.jpg"></p><p>sourceTree 是当下比较流行的 git 客户端,简化了如何与Git存储库进行交互，从而可以专注于编码, 可以通过简单的Git GUI可视化来管理仓库, 提高效率.</p><p>今天我们来说说如何通过<code>sourcetree</code>来将本地仓库与远程仓库关联.</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>首先把本地仓库初始化.</p><img data-src="/blog/2017/11/03/use-sourcetree-association/init.png"><p>再添加到<code>sourcetree</code>上</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add.png"><p>进入 <a href="github.com">Github</a> -&gt; your profile -&gt; repositories(仓库) -&gt; New</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-02.png"><p>填写仓库信息, 复制仓库链接</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-03.png"><img data-src="/blog/2017/11/03/use-sourcetree-association/add-04.png"><p>设置 -&gt; 添加 -&gt; 填写信息 -&gt; 确定</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-01.png"><img data-src="/blog/2017/11/03/use-sourcetree-association/add-05.png"><p>然后就可以提交到github了~</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-06.png">]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Normalize与reset</title>
      <link href="/blog/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/"/>
      <url>/blog/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/10/15/浅谈Normalize与reset/normalize.jpg"><p>前言: 在一次开发的时候, 发现团队中的小伙伴对normalize与reset都持有不同分歧. 趁着这事来谈谈, normalize与reset都有什么区别, 该如何取舍.</p><a id="more"></a><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><strong>reset</strong>, 顾名思义就是重置的意思. 最早的一份CSS reset来自Tantek的<code>undohtml.css</code>, Tantek根据自己的需要，对浏览器的默认样式进行了一些重置。</p><p>早期的浏览器支持和理解的CSS规范不同，导致渲染页面时效果不一致，会出现很多兼容性问题, <strong>reset</strong> 的作用是让各个浏览器的CSS样式有一个统一的基准，而这个基准更多的就是“清零”. </p><p>此后国内出现<code>* {margin: 0, padding: 0}</code>这种暴力清除全部样式的reset出现.</p><h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h2><p><code>Normalize</code>, 从字面上也理解也就是使其正常化. 这是<code>css reset</code>的一个代替方案.<br><code>Normalize</code>相对「平和」, 注重通用的方案，重置掉该重置的样式，保留有用的<code>user agent</code>样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的。</p><p>创造<code>normalize.css</code>的目的主要是: </p><ul><li><strong>保护有用的浏览器默认样式</strong>而不是完全去掉它们</li><li><strong>一般化的样式</strong>：为大部分HTML元素提供</li><li><strong>修复浏览器自身的bug</strong>并保证各浏览器的一致性</li><li><strong>优化CSS可用性</strong>：用一些小技巧</li><li><strong>解释代码</strong>：用注释和详细的文档来</li></ul><h2 id="相比两者的利弊"><a href="#相比两者的利弊" class="headerlink" title="相比两者的利弊"></a>相比两者的利弊</h2><p>那么相对来说, 两者之间又有什么区别呢? 这里引用一下知乎用户的回答.</p><blockquote><p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧</p></blockquote><blockquote><p>Normalize.css 是改良派。他们提倡，各个元素都有其存在的道理，简单粗暴地一视同仁是不好的。body 那一圈确实挤压了页面的生存空间，那就改掉。士农工商，谁有谁的作用，给他们制定个规范，确保他们在任何浏览器里都干好自己的活儿。</p></blockquote><p>然而在实际项目中, 为了还原设计图我们并不需要这种自带特性, 因此可以根据项目的需求将我们常用的标签进<strong>格式化</strong>, 但也不是跟传统的<code>reset</code>那样粗暴. </p><p>因为传统的<code>reset</code>的很多清除默认样式是无意义的, 是浪费性能的. 就比如<code>&lt;li&gt;</code>, 人家生来就没有<code>margin padding</code>, 干嘛非要给人家加个<code>margin: 0</code>上去呀??? <code>h1~h6</code>标签虽然有<code>margin</code>没有<code>padding</code>呀! 也不要一棒子全打死啦! 其实这是不严谨的态度.</p><p>以下的代码可以作为针对项目需求的进行调整. 这样看下去是不是舒服简洁多了呢? 也减少了很多无意义的性能损耗何乐而不为呢.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">body</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">form</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.6</span> Monda,PingFang SC,Microsoft YaHei,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 参考资料: **<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMDk0MDY2" title="https://www.zhihu.com/question/20094066">Normalize.css 与传统的 CSS Reset 有哪些区别？<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5heXF5Lm5ldC9ibG9nL25vcm1hbGl6ZSVFMyU4MCU4MXJlc2V0JUU0JUI4JThFYmFzZS8=" title="http://www.ayqy.net/blog/normalize%E3%80%81reset%E4%B8%8Ebase/">normalize、reset与base<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMzAyMTc2Ng==" title="https://segmentfault.com/a/1190000003021766">关于CSS Reset 那些事（一）之 历史演变与Normalize.css<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速查正则表达式</title>
      <link href="/blog/2017/08/21/js-common-regexp/"/>
      <url>/blog/2017/08/21/js-common-regexp/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/08/21/js-common-regexp/regex.jpg"><p>自己收集了一套针对工作中所需的正则表达式. 多适用于字符串处理、表单验证、日志数据分析等场合，实用高效.</p><a id="more"></a><blockquote><p>tips: 善用<code>Ctrl + F</code>输入关键字能提高查询的效率哟~</p></blockquote><h2 id="常见正则校验"><a href="#常见正则校验" class="headerlink" title="常见正则校验"></a>常见正则校验</h2><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class="line"><span class="keyword">var</span> userNameReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须拥有数字和特殊字符，并且在6 ~ 16位之间</span></span><br><span class="line"><span class="comment">// (?=.*[0-9]) - 断言一个字符串至少有一个数字;</span></span><br><span class="line"><span class="comment">// (?=.*[!@#$%^&amp;*]) - 断言一个字符串至少有一个特殊字符。</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?=.*[0-9])(?=.*[!@#$%^&amp;*])[a-zA-Z0-9!@#$%^&amp;*]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配邮箱地址</span></span><br><span class="line"><span class="keyword">var</span> mailReg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国六位数的邮政编码</span></span><br><span class="line"><span class="keyword">var</span> postalCode = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配15~18位身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard = <span class="regexp">/(^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\d&#123;5&#125;\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;2&#125;$)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配18位的新版身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard_18 = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验输入框是字符数为是否为 4~16 位(英文长度为1, 汉字长度为2)</span></span><br><span class="line"><span class="keyword">var</span> numName = <span class="regexp">/^[a-zA-Z0-9]&#123;4,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> mate = numName.test(value.replace(<span class="regexp">/[\u4e00-\u9fa5]/g</span>, <span class="string">'aa'</span>));</span><br></pre></td></tr></table></figure><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipv4地址正则</span></span><br><span class="line"><span class="keyword">var</span> IPReg = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reg Hex颜色正则</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL正则</span></span><br><span class="line"><span class="keyword">var</span> urlReg= <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配JSON格式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br></pre></td></tr></table></figure><p>匹配<code>json</code>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = response.data;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> ret === <span class="string">'string'</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">  <span class="keyword">var</span> matches = ret.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (matches) ret = <span class="built_in">JSON</span>.parse(matches[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">res.json(ret);</span><br></pre></td></tr></table></figure><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5-11位的腾讯qq号</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[1-9][0-9]&#123;4,11&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国内常见</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/^1[3|5|8|9]\d&#123;9&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定电话</span></span><br><span class="line"><span class="keyword">var</span> telephone = <span class="regexp">/^(0[0-9]&#123;2&#125;)\d&#123;8&#125;$|^(0[0-9]&#123;3&#125;(\d&#123;7,8&#125;))$/</span>;</span><br></pre></td></tr></table></figure><h3 id="匹配特定数字"><a href="#匹配特定数字" class="headerlink" title="匹配特定数字"></a>匹配特定数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配正整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负整数（正整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正整数（负整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配正浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负浮点数（正浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正浮点数（负浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$/</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配由26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的大写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的小写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字和26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字、26个英文字母或者下;划线组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配空白行的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\n\s*\r/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配首尾空白字符的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\s*|\s*$/</span>;</span><br><span class="line"><span class="keyword">var</span> rtrim = <span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配双字节字符(包括汉字在内, 一个双字节字符长度计2，ASCII字符计1)</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^\x00-\xff]/g</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="匹配语系字符范围"><a href="#匹配语系字符范围" class="headerlink" title="匹配语系字符范围"></a>匹配语系字符范围</h3><p>用法:<code>/^[\u4E00-\u9FA5]+$/</code>(匹配简体中文)</p><p><code>2E80～33FFh</code>：中日韩符号区。收容康熙字典部首、中日韩辅助部首、注音符号、日本假名、韩文音符，中日韩的符号、标点、带圈或带括符文数字、月份，以及日本的假名组合、单位、年号、月份、日期、时间等。</p><p><code>3400～4DFFh</code>：中日韩认同表意文字扩充A区，总计收容6,582个中日韩汉字。</p><p><code>4E00～9FFFh</code>：中日韩认同表意文字区，总计收容20,902个中日韩汉字。</p><p><code>A000～A4FFh</code>：彝族文字区，收容中国南方彝族文字和字根。</p><p><code>AC00～D7FFh</code>：韩文拼音组合字区，收容以韩文音符拼成的文字。</p><p><code>F900～FAFFh</code>：中日韩兼容表意文字区，总计收容302个中日韩汉字。</p><p><code>FB00～FFFDh</code>：文字表现形式区，收容组合拉丁文字、希伯来文、阿拉伯文、中日韩直式标点、小符号、半角符号、全角符号等。</p><h2 id="正则函数使用示例"><a href="#正则函数使用示例" class="headerlink" title="正则函数使用示例"></a>正则函数使用示例</h2><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用正则匹配中文字节, 将其替换为xx, 再获取字符串的长度就是完整的长度了.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLen</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^\x00-\xff]/g</span>, <span class="string">'xx'</span>).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配是否符合邮件规则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test返回一个布尔值, 表示是否匹配到制定字符串</span></span><br><span class="line"><span class="keyword">var</span> mail = reg.test(<span class="string">'anran758@gmail.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mail) &#123;</span><br><span class="line">  <span class="comment">// 如果邮件格式正确的话, 就可以做点啥了(雾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则技巧"><a href="#正则技巧" class="headerlink" title="正则技巧"></a>正则技巧</h2><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如这里我们想让这个日期格式反转</span></span><br><span class="line"><span class="comment">// 正则括号是一个分组, 下面的代码就捕获了三个分组</span></span><br><span class="line"><span class="comment">// 通过$分组符来转换位置, 来达到我们想要的结果</span></span><br><span class="line"><span class="string">'2018-3-21'</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g</span>, <span class="string">'$2/$3/$1'</span>) <span class="comment">// "3/21/2018"</span></span><br></pre></td></tr></table></figure><h3 id="忽略分組"><a href="#忽略分組" class="headerlink" title="忽略分組"></a>忽略分組</h3><p>不希望捕获某些分组, 只需要分组内加上<code>?:</code>即可:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:Byron).(ok)/</span>;</span><br><span class="line"><span class="string">'Byron-ok'</span>.replace(reg, <span class="string">'$1'</span>);  <span class="comment">// 只匹配了 ok</span></span><br></pre></td></tr></table></figure><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><table><thead><tr><th>名字</th><th>正則</th></tr></thead><tbody><tr><td>正向前瞻</td><td>exp(?=assert)</td></tr><tr><td>负向前瞻</td><td>exp(?!assert)</td></tr></tbody></table><p>正向前瞻就是匹配前者, 效验后者是否存在.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则的意思是: 匹配一个单词字符( [a-zA-Z0-9_] ), 然后验证后面是不是数字</span></span><br><span class="line"><span class="comment">// 结果为: "X2*3". 因为3后面没有数字, 所以没有匹配到.</span></span><br><span class="line"><span class="string">'a2*3'</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">'X'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为: "X2*X4X8"</span></span><br><span class="line"><span class="comment">// 总的说就是</span></span><br><span class="line"><span class="string">'a2*34v8'</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">'X'</span>)</span><br></pre></td></tr></table></figure><p>负向前瞻则相反, 匹配前面, 替代后面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 2 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// * 不是单词字符 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 3 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 4 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// v 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 8 是单词字符, 后面没有匹配到数字, 被替换成X</span></span><br><span class="line"><span class="comment">// 结果: aX*4XvX</span></span><br><span class="line"><span class="string">'a2*34v8'</span>.replace(<span class="regexp">/\w(?!\d)/g</span>, <span class="string">'X'</span>)</span><br></pre></td></tr></table></figure><hr><p>可视化正则表达式, 可以试试<span class="exturl" data-url="aHR0cHM6Ly9yZWdleHBlci5jb20v" title="https://regexper.com/">regexper<i class="fa fa-external-link"></i></span>, 让你看懂正则匹配的走向.</p><img data-src="/blog/2017/08/21/js-common-regexp/regexper.png"><hr><p>以后的更新与维护都将在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FucmFuNzU4L0Zyb250LUVuZC1MYWIvdHJlZS9tYXN0ZXIvUkVHRVhQ" title="https://github.com/anran758/Front-End-Lab/tree/master/REGEXP">Front-End-Lab/REGEXP<i class="fa fa-external-link"></i></span> 中。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【js】数组方法深入研究与练习</title>
      <link href="/blog/2017/07/16/array-method-test/"/>
      <url>/blog/2017/07/16/array-method-test/</url>
      
        <content type="html"><![CDATA[<p><img alt="coding" data-src="https://ws1.sinaimg.cn/large/e48206bbgy1flhd6wd575j21040o3tb8.jpg"></p><p>数组是<code>js</code>中最常见的一种数据类型，善用正确数组的方法可以编写出良好结构的代码。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%e7%9b%ae%e5%bd%95">目录</a><ul><li><a href="#%e5%9b%9e%e6%96%87%e5%a4%84%e7%90%86">回文处理</a></li><li><a href="#%e9%a6%96%e4%b8%aa%e5%8d%95%e8%af%8d%e5%ad%97%e6%af%8d%e5%a4%a7%e5%86%99">首个单词字母大写</a></li><li><a href="#%e8%bf%94%e5%9b%9e%e6%95%b0%e7%bb%84%e6%9c%80%e5%a4%a7%e7%9a%84%e6%95%b0%e5%ad%97">返回数组最大的数字</a></li><li><a href="#%e6%a3%80%e6%9f%a5%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%bb%93%e5%b0%be">检查字符串结尾</a></li><li><a href="#%e9%87%8d%e5%a4%8d%e8%be%93%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2">重复输出字符串</a></li><li><a href="#%e6%88%aa%e6%96%ad%e5%ad%97%e7%ac%a6%e4%b8%b2">截断字符串</a></li><li><a href="#%e5%88%86%e5%89%b2%e6%95%b0%e7%bb%84">分割数组</a></li><li><a href="#%e8%bf%87%e6%bb%a4%e6%95%b0%e7%bb%84%e5%81%87%e5%80%bc">过滤数组假值</a></li><li><a href="#%e6%91%a7%e6%af%81%e6%8c%87%e5%ae%9a%e6%95%b0%e7%bb%84">摧毁指定数组</a></li><li><a href="#%e6%95%b0%e7%bb%84%e6%8e%92%e5%ba%8f%e5%b9%b6%e6%89%be%e5%87%ba%e5%85%83%e7%b4%a0%e7%b4%a2%e5%bc%95">数组排序并找出元素索引</a></li><li><a href="#%e5%87%af%e6%92%92%e5%af%86%e7%a0%81">凯撒密码</a></li><li><a href="#sum-all-numbers-in-a-range">Sum All Numbers in a Range</a><ul><li><a href="#%e9%9d%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95">非数组方法</a></li></ul></li></ul></li></ul><h3 id="回文处理"><a href="#回文处理" class="headerlink" title="回文处理"></a>回文处理</h3><p><code>Palindromes(回文)</code>，顾名思义就是指倒着念和顺着念都是相同、前后对称的。</p><p>处理这种回文我们只需将字符串反转再进行对比，就可以得到结果啦：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> string = str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">''</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">var</span> replaceStr = string</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> replaceStr === string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">'eye'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="首个单词字母大写"><a href="#首个单词字母大写" class="headerlink" title="首个单词字母大写"></a>首个单词字母大写</h3><blockquote><p>Title Case a Sentence(首个单词字母大写)</p></blockquote><p>句中单词首字母大写, 确保字符串的每个单词首字母都大写，其余部分小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">L</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.toUpperCase();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>); <span class="comment">// I'm A Little Tea Pot</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>首先把字符串转换为小写,再用正则匹配带空格或者就字母开头的首个字母<code>replace</code>替换成大写字母.</p><h3 id="返回数组最大的数字"><a href="#返回数组最大的数字" class="headerlink" title="返回数组最大的数字"></a>返回数组最大的数字</h3><blockquote><p>Return Largest Numbers in Arrays(返回数组最大的数字)</p></blockquote><p>找出多个数组中的最大数,并返回一个新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> count = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = arr[i].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;);</span><br><span class="line">    count.push(a[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>],</span><br><span class="line">  [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>],</span><br><span class="line">  [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]</span><br><span class="line">]); <span class="comment">// [5,27,39,1001]</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>新定义一个数组,遍历传进来的数组进行从大到小排序,将排序后最大的数<code>push</code>进新的数组<code>count</code>最后再返回.</p><h3 id="检查字符串结尾"><a href="#检查字符串结尾" class="headerlink" title="检查字符串结尾"></a>检查字符串结尾</h3><blockquote><p>Confirm the Ending(检查字符串结尾)</p></blockquote><p>检查字符串结尾,判断一个字符串(str)是否以指定的字符串(target)结尾, 返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lenth = str.length - target.length;</span><br><span class="line">  <span class="keyword">return</span> str.substr(lenth) === target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">'Connor'</span>, <span class="string">'n'</span>); <span class="comment">// false</span></span><br><span class="line">confirmEnding(<span class="string">'Bastian'</span>, <span class="string">'n'</span>); <span class="comment">// true</span></span><br><span class="line">confirmEnding(<span class="string">'He has to give me a new name'</span>, <span class="string">'me'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p><code>substr()</code>接受一个<code>start</code>的形参，是一个字符的索引，把字符串<code>str.length - target.length</code>就可以对比结尾字符串是否一样了.</p><h3 id="重复输出字符串"><a href="#重复输出字符串" class="headerlink" title="重复输出字符串"></a>重复输出字符串</h3><blockquote><p>Repeat a string repeat a string(重复输出字符串，复读机(雾)</p></blockquote><p>重复一个指定的字符串<code>num</code>次，如果<code>num</code>是一个负数则返回一个空字符串。</p><p>对于这种题目可以使用两种方法解决:</p><ul><li><p>递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种使用递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str + repeat(str, num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">'abc'</span>, <span class="number">3</span>); <span class="comment">// "abcabcabc"</span></span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    s += str;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">'abc'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>思路</p></blockquote><p>递归一般放进<code>if()</code>判断语句中,是一种通过重复地调用函数本身,逐次减少 num 的值来实现效果.<br>第二种使用了<code>while</code>语句,每调用一次就递减 1,直至<code>num &gt; 0</code>.</p><h3 id="截断字符串"><a href="#截断字符串" class="headerlink" title="截断字符串"></a>截断字符串</h3><blockquote><p>Truncate a string(截断字符串)</p></blockquote><p>截断字符串,如果字符串的长度比指定的参数 num 长，则把多余的部分用…来表示。<br>插入到字符串尾部的三个点号也会计入字符串的长度。如果指定的参数 num 小于或等于 3，则添加的三个点号不会计入字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先判断num的值是不是大于字符串的长度,若是,那就没有必要省略了.</span></span><br><span class="line">  <span class="keyword">if</span> (num &gt;= str.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>, num) + <span class="string">'...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'A-tisket a-tasket A green and yellow basket'</span>;</span><br><span class="line"></span><br><span class="line">truncate(str, str.length);</span><br></pre></td></tr></table></figure><h3 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h3><blockquote><p>Chunky Monkey(分割数组)</p></blockquote><p>猴子吃香蕉, 分割数组,把一个数组 arr 按照指定的数组大小<code>size</code>分割成若干个数组块。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>) =&gt; [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line">chunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">2</span>) =&gt; [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>]];</span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>这道题重点主要是每<code>size</code>个值分割一个数组,这里我们可以使用以下几种方法来解题.</p><ol><li><p>while + splice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while + splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个新数组和用来临时存放分割的空数组.</span></span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  <span class="keyword">var</span> t = [];</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要保持快照</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    t = arr.splice(<span class="number">0</span>, size);</span><br><span class="line">    a.push(t);</span><br><span class="line">    i += size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>for + slice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for + splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [],</span><br><span class="line">    t = [],</span><br><span class="line">    len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组中的个数小于size或者size是小于等于0的也就没有必要分割了</span></span><br><span class="line">  <span class="keyword">if</span> (len &lt;= size || size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 它的重点主要是数组中的值的数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += size) &#123;</span><br><span class="line">      <span class="comment">// 查询指定数</span></span><br><span class="line">      t = arr.slice(i, i + size);</span><br><span class="line">      a.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>while + slice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while + slice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [],</span><br><span class="line">    t = [],</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    <span class="comment">// 查询的值</span></span><br><span class="line">    t = arr.slice(i, (i += size));</span><br><span class="line">    a.push(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="过滤数组假值"><a href="#过滤数组假值" class="headerlink" title="过滤数组假值"></a>过滤数组假值</h3><blockquote><p>Falsy Bouncer(过滤数组假值)</p></blockquote><p>删除数组中的所有假值。在 JavaScript 中，假值有 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>和<code>NaN</code>。</p><p>这道题比较有意思..</p><p>一开始我走进了一个误区，想着单纯<code>return x !== false &amp;&amp; ...</code>这样简单的返回就可以了，后来发现在处理<code>NaN</code>时会很麻烦..<code>isNaN()</code>还会把英文字符串也给过滤掉,再加上多个<code>&amp;&amp;</code>使得代码会变得繁乱,可读性不高.</p><p>然后查阅了一番资料后,才注意到平时被忽略<code>Boolean()</code>的一些特性对于处理这种类型的问题简直不能太合适.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(x);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">'ate'</span>, <span class="string">''</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure><p><strong>摘至<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQm9vbGVhbg==" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean">MDN.Boolean<i class="fa fa-external-link"></i></span> 的描述:</strong></p><blockquote><p>如果 Boolean 构造函数的参数不是一个布尔值,则该参数会被转换成一个布尔值.*<em>如果参数是 0, -0, null, false, NaN, undefined, 或者空字符串 (“”),生成的 Boolean 对象的值为 false. *</em>其他任何值,包括任何对象或者字符串”false”, 都会创建一个值为 true 的 Boolean 对象.</p></blockquote><h3 id="摧毁指定数组"><a href="#摧毁指定数组" class="headerlink" title="摧毁指定数组"></a>摧毁指定数组</h3><p>Seek and Destroy (摧毁指定数组)</p><p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</p><blockquote><p>实现原理</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVy" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter()<i class="fa fa-external-link"></i></span> 为数组中的每个元素调用一次 <code>callback</code>函数，并利用所有使得 <code>callback</code> 返回 true 或 等价于 true 的值 的元素创建一个<strong>新数组.</strong><br><code>filter()</code>从头至尾遍历数组,<strong>若回调函数返回的是 true(通过测试),就存入新数组中.若返回的是 false,则过滤掉.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先将第一个参数隔开,定义一个储存着待移除的空数组</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>], removeArgs = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 要被删除的参数装进'removeArgs'里</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    removeArgs.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历'args',若'removeArgs'中不存在'value',应该返回-1.反之返回false被过滤掉.</span></span><br><span class="line">  <span class="keyword">return</span> args.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeArgs.indexOf(value) === <span class="number">-1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="数组排序并找出元素索引"><a href="#数组排序并找出元素索引" class="headerlink" title="数组排序并找出元素索引"></a>数组排序并找出元素索引</h3><blockquote><p>Where do I belong (数组排序并找出元素索引)</p></blockquote><p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</p><p>举例：where([1,2,3,4], 1.5) 应该返回 1。因为 1.5 插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而 1.5 对应的索引值就是 1。</p><p> 同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19 插入到数组[3,5,20]后变成[3,5,19,20]，而 19 对应的索引值就是 2。</p><blockquote><p>思路</p></blockquote><p>这个没啥好说的了..将第二个参数<code>push</code>进数组中,再进行排序.排序后通过<code>indexOf()</code>来实现功能.<strong>不过需要注意的是<code>sort</code>默认是按照’Unicode’编码进行排序的.</strong></p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><blockquote><p>Caesars Cipher (凯撒密码)</p></blockquote><p>风靡全球的凯撒密码 Caesar cipher，又叫移位密码。移位密码也就是密码中的字母会按照指定的数量来做移位。</p><p>一个常见的案例就是 ROT13 密码，字母会移位 13 个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。</p><p>写一个 ROT13 函数，实现输入加密字符串，输出解密字符串。所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。</p><blockquote><p>思路</p></blockquote><p>本次练习用到<code>String.charCodeAt()</code>和<code>String.fromCharCode()</code>,首先来查询字符串的 Unicode 字符.</p><p>根据<code>Unicode</code>表我们得知:</p><ul><li><code>&lt; 65</code>同时<code>&gt; 90</code>对应的就是数字和小写字符<code>a-z</code></li><li><code>&gt;= 65</code>和<code>&lt;= 77</code>对应的就是大写字符<code>A-M</code>(13 位)</li><li><code>&gt;= 78</code>和<code>&lt;= 90</code> 对应的就是大写字符<code>N-Z</code></li></ul><p>ROT13 的功能就是移位,如果序号小于 78(A-M 字母)，使用 String.fromCharCode()转换成该序号加 13 的字符,反之减 13.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// LBH QVQ VG!</span></span><br><span class="line">  <span class="keyword">var</span> newStr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查询每个字符串的Unicode编号</span></span><br><span class="line">    <span class="keyword">var</span> temp = str.charCodeAt(i);</span><br><span class="line">    <span class="comment">// 非大写字母,空格,数字等都不转换</span></span><br><span class="line">    <span class="keyword">if</span> (temp &lt; <span class="number">65</span> || temp &gt; <span class="number">91</span>) &#123;</span><br><span class="line">      newStr.push(str.charAt(i));</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 大于77(N-Z),就转换成该序号 - 13的字符串.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; <span class="number">77</span>) &#123;</span><br><span class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp - <span class="number">13</span>));</span><br><span class="line">      <span class="comment">// 小于78(A-M),就转换成该序号 + 13的字符串</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp + <span class="number">13</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rot13(<span class="string">'SERR PBQR PNZC'</span>); <span class="comment">// 你可以修改这一行来测试你的代码</span></span><br></pre></td></tr></table></figure><h3 id="Sum-All-Numbers-in-a-Range"><a href="#Sum-All-Numbers-in-a-Range" class="headerlink" title="Sum All Numbers in a Range"></a>Sum All Numbers in a Range</h3><blockquote><p>题目描述</p></blockquote><p>&emsp;&emsp;传递给一个包含两个数字的数组。返回这两个数字和<strong>它们之间所有数字的和</strong>。最小的数字并非总在最前面。<br>比如传递<code>[1, 4]</code>会返回<code>10</code>, 即<code>1 + 2 + 3 + 4</code>.</p><h4 id="非数组方法"><a href="#非数组方法" class="headerlink" title="非数组方法"></a>非数组方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</span><br><span class="line">  <span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr);</span><br><span class="line">  <span class="keyword">var</span> num = max - min;</span><br><span class="line">  <span class="keyword">var</span> total = min;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(num) &#123;</span><br><span class="line">    num--;</span><br><span class="line">    total += ++min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
            <tag> ffc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
